adventures:
    default:
        name: "Giriş"
        description: "Seviye açıklaması"
        default_save_name: "giriş"
        levels:
            1:
                story_text: "Hedy'ye hoş geldiniz! Seviye 1'de, bir hikaye yazdırarak başlayabilirsiniz.\n\nProgramlama alanının altındaki yeşil 'Kodu çalıştır' düğmesini kullanarak kodu kendiniz deneyin.\n\nHazır mısınız? O zaman ilk komutunuzu öğrenmek için bir sonraki sekmeye gidin!\n"
                start_code: '{print} Merhaba Dünya!'
            2:
                story_text: |
                    Tebrikler! Seviye 2'ye ulaştınız. Umarım şimdiden bazı harika kodlar yapmışsınızdır!
                    İlk seviyede `{echo}` komutunun bir seferde sadece bir bilgi kaydedebildiğini fark etmiş olabilirsiniz.
                    Örneğin restoran macerasında, müşterinin ne yemek istediğini veya ne içmek istediğini yankılayabilirsiniz, ancak her ikisi tek bir cümlede olmaz.

                example_code: |
                    **Uyarı! Bu kod çalışmaz!**
                    Hedy'de komutlar arada değişecektir. Örneğin `yankıla` sadece 1. seviyede çalışır. Bu seviyede cevapları geri yankılamanın daha iyi bir yolunu öğreneceksiniz.
                    ```
                    {print} Hedy's 'e Hoş Geldiniz
                    {ask} Ne yemek istersiniz?
                    {echo} Demek isteğiniz
                    {ask} Ne içmek istersiniz?
                    {echo} Demek isteğiniz
                    ```
                story_text_2: |
                    Oyuncu hamburger ve kola yazarsa, "yani hamburger ve kola istiyorsunuz" diyemezsiniz, ancak iki ayrı satır oluşturmanız gerekir.
                    Ayrıca, `{echo}` komutu sadece cümlenin sonundaki kelimeyi yankılar. Yani "hamburgeriniz hemen geliyor!" diyemezsiniz.

                    Seviye 2'de bu durum değişiyor. Seviye 2'de, birden fazla bilgi parçasını kaydetmenize ve bunları istediğiniz yere yazdırmanıza olanak tanıyan değişkenlerle çalışmayı öğreneceksiniz.
                    O halde hadi bir sonraki sekmeye geçelim!
                start_code: "{print} Merhaba Dünya!"
            3:
                story_text: |
                    Bir önceki seviyede değişkenin ne olduğunu ve maceralarınızı daha etkileşimli hale getirmek için nasıl kullanabileceğinizi öğrendiniz.
                    Ancak... değişkenlerle yapabileceğiniz tek şey bu değil! Değişkenleri liste yapmak için de kullanabilirsiniz.
                    Ve hatta Hedy'nin bir listeden rastgele bir kelime seçmesini sağlayabilirsiniz, bu da gerçek oyunlar yapmanıza olanak tanır!
                    Bir sonraki sekmeye hızlıca göz atın!

                start_code: "{print} Merhaba Dünya!"
            4:
                start_code: "{print} 'Merhaba Dünya'"
                story_text: |
                    Önceki seviyelerde değişkenlerle pratik yaptınız, ancak bu problemle karşılaşmış olabilirsiniz.
                    Bunun gibi bir kodu çalıştırmayı denemiş olabilirsiniz:

                    Aslında şunu yazdırmak istedin

                    `My name is Sophie`

                    ama Hedy bunu yazdı

                    `My Sophie is Sophie`.

                    Bu seviyede tırnak işaretleri kullanılarak bu sorun giderilir.
                example_code: |
                    ```
                    isim {is} Sophie
                    {print} Benim adım isim
                    ```
            5:
                start_code: |-
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy {print} 'havalıymış!' {else} {print} 'eh işte'
                story_text: |
                    Önceki seviyelerde, kodu her çalıştırdığınızda oyunlarınızı farklı kılan `{at} {random}` kullanmayı zaten öğrenmiştiniz.
                    Ancak bu gerçekten etkileşimli değil, oyuncunun oyunda neler olacağı üzerinde herhangi bir etkisi yok.

                    Bu seviyede, programınızda farklı yanıtlar vermenizi sağlayan `{if}` komutunu öğreneceksiniz. Bu şekilde örneğin bilgisayarınız için gizli bir şifre programlayabilirsiniz.
                    Yeni komut için bir sonraki sekmeye geçelim!
                example_code: |
                    ```
                    şifre {is} {ask} 'Doğru şifre nedir?'
                    ```
            6:
                start_code: "# kodunuzu buraya yazın"
                story_text: |
                    Önceki seviyede `{ask}` ve `{if}` ile pratik yaptınız. Örneğin artık konuklara ne yemek istediklerini sorabilirsiniz.
                    Ancak henüz yapamadığınız şey, herkesin akşam yemeğinin fiyatını hesaplamak.

                    Bir sonraki seviye, programlarınızda toplama, çıkarma ve çarpma işlemlerini kullanmanızı sağlayacak. Bu şekilde restoranınızdaki fiyatları hesaplayabilir, ama aynı zamanda arkadaşlarınıza ve ailenize indirim yapmak için gizli bir kod ekleyebilirsiniz.
                    Bir sonraki seviyedeki bir başka seçenek de küçük kardeşinizin çarpma işlemlerinde pratik yapması için kendi matematik oyununuzu programlamaktır.
                    Gidip kendiniz görün!
                example_code: |
                    ```
                    yemek_ücreti {is} 0
                    içecek_ücreti {is} 0
                    toplam_ücret {is} 0
                    {print} 'McHedy'e Hoş Geldiniz'
                    sipariş {is} {ask} 'Ne yemek istersiniz?'
                    {if} sipariş {is} hamburger yemek_ücreti {is} 5
                    {if} sipariş {is} kızartma yemek_ücreti {is} 2
                    içecek {is} {ask} 'Ne içmek istersiniz?'
                    {if} içecek {is} su içecek_ücreti {is} 0
                    değilse içecek_ücreti {is} 3
                    toplam_ücret {is} yemek_ücreti + içecek_ücreti
                    {print} 'Toplamda 'toplam_ücret ' lira ödeyin, lütfen'
                    ```
            7:
                start_code: "{print} 'mutlu yıllar sana'\n{print} 'mutlu yıllar sana'\n{print} 'mutlu yıllar sevgili Hedy'\n{print} 'mutlu yıllar sana'\n"
                story_text: |
                    Harika bir iş çıkardınız! Bir sonraki seviyeye ulaştınız, bu da `{if}` ve `{else}` ile pratik yaptığınız anlamına geliyor. Muhtemelen kodlarınızın gittikçe uzadığını fark etmişsinizdir.
                    Örneğin 'Doğum Günün Kutlu Olsun' şarkısını programlamak isterseniz.

                    Bu, çoğunlukla aynı kelimeleri tekrar ve tekrar yazmak için çok fazla kod demek. Neyse ki bir sonraki sekmede `{repeat}` komutu ile bir kod satırını birden çok kez tekrarlamanıza olanak tanıyan bir çözüm öğreneceksiniz.
                example_code: |
                    ```
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sana'
                    {print} 'Mutlu yıllar sevgili Hedy'
                    {print} 'mutlu yıllar sana'
                    ```
            8:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim!'
                story_text: |
                    Artık tek bir kod satırını nasıl tekrarlayacağınızı öğrendiniz. Bu kullanışlı olabilir, ancak her zaman yeterli değildir. Bazen aynı anda birden fazla satırı tekrarlamak istersiniz.
                    Bu seviye, birkaç kod satırını gruplandırmanıza ve bu küçük satır grubunu bir kerede tekrarlamanıza yardım edecek!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Bir sonraki sekmede birden fazla kod satırını aynı anda tekrarlayabilirsiniz!'
                    ```
            9:
                start_code: |-
                    {print} Bir sonraki sekmeye geçelim!
                story_text: |
                    Harika bir iş! Yeni bir seviyeye daha ulaştınız! Bir önceki seviyede {if} veya {repeat} komutunda birden fazla kod satırı kullanmayı öğrendiniz. Ancak henüz ikisini birleştiremiyorsunuz...
                    İyi haberim var! Bu seviyede, bir {if} içine {if} veya bir {repeat} komutu koymanıza izin verilecektir.
                example_code: |
                    ```
                    cevap = {ask} 'Yeni bir şeyler öğrenmeye hazır mısınız?'
                    {if} cevap {is} evet
                        {print} 'Harika! eğer komutunda tekrarla komutunu kullanmayı öğrenebilirsiniz!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                    {else}
                        {print} 'Belki de bir önceki seviyede biraz daha pratik yapmalısınız'
            10:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim!'
                story_text: |
                    Harika gidiyorsunuz! Önceki seviyelerde hep küçük bir sorunla karşılaştık. Satırları tekrarlamayı öğrendiniz, ama ya satırı biraz değiştirmek isterseniz?
                    Örneğin 'eğer mutluysan ve bunu biliyorsan.' şarkısını söylemek istiyorsunuz. Şöyle görünecektir:

                    Eğer bir sonraki mısranın 'ayaklarını yere vur', ve bir sonrakinin, ve bir sonrakinin de aynı olmasını istiyorsanız, kodu tamamen değiştirmeniz gerekir.
                    Bu seviyede, bir eylem listesi oluşturmanıza ve kodu her seferinde başka bir eylemle tekrarlamanıza olanak tanıyan `{for}` komutunu öğreneceksiniz!
                    Lütfen bir göz atın!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'Mutluysanız ve bunu biliyorsanız ellerinizi çırpın.'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ve gerçekten göstermek istiyorsanız'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ellerinizi çırpın'
                    ```
            11:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim!'
                story_text: |
                    Seviye 10'a ulaştınız, harika gidiyorsunuz! Daha yüksek seviyelerde, Hedy size Python programlama dilini öğretmeye daha fazla odaklanıyor.
                    Python'da `{repeat}` komutu yoktur, ancak {repeat} gibi çalışan bir komut vardır. Python dilinde `{repeat}` komutunun nasıl söylendiğini merak ediyor musunuz? Öğrenmek için hemen devam edin!
            12:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim!'
                story_text: |
                    Belki restoran maceranızda ondalık sayıları kullanmayı denemişsinizdir. Eğer denediyseniz, muhtemelen Hedy'nin bunları henüz anlamadığını ve her zaman yuvarladığını fark etmişsinizdir.
                    Bu seviyeden itibaren ondalık sayıları kullanabilirsiniz.
                example_code: |
                    ```
                    burger = 5
                    içecek = 2
                    toplam = burger + içecek
                    print 'Bir hamburger ve içecek sipariş ettiniz'
                    print 'Toplam ' toplam ' lira ödeyin lütfen'
                    ```
            13:
                start_code: |-
                    {print} 'Hadi bir sonraki seviyeye geçelim!'
                story_text: |
                    Önceki seviyelerde iki `{if}` komutunu birbirinin içine nasıl yerleştireceğinizi öğrendiniz. Bu sorunsuz çalışır, ancak size bunun gibi çok uzun ve kullanışsız kodlar verir:

                    Bu sistemde hem doğru kullanıcı adını hem de doğru şifreyi vermeniz gerekmektedir.
                    Bu seviyede, bu kodu çok daha kısa ve anlaşılır hale getirecek `{and}` komutunu öğreneceksiniz!
                    Şuna bir bakın!
                example_code: |
                    ```
                    kullanıcı = {ask} 'Kullanıcı adınız nedir?'
                    şifre = {ask} 'Şifreniz nedir?'
                    {if} kullanıcı {is} 'Hedy'
                        {if} şifre {is} 'gizli'
                            {print} 'Hoş geldin Hedy!'
                        {else}
                            {print} 'Erişim reddedildi'
                    {else}
                        {print} 'Erişim reddedildi!'
                    ```
            14:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim'
                story_text: |
                    Aşağıdaki program ile okulda bir dersi geçip geçmediğinizi hesaplayabilirsiniz (yani, altı yada daha yüksek bir not).
                    Bu kodun, 5. satırdaki çok uzun kod nedeniyle son derece verimsiz olduğunu görebilirsiniz.
                    1'den 5'e kadar tüm farklı notların ayrı ayrı programlanması gerekiyordu. Şanslısınız ki, bu seviyede bu son derece uzun kod olmadan bunu nasıl yapacağınızı öğreneceksiniz!
                example_code: |
                    ```
                    birinci_not = {ask} 'İlk sınavınızda kaç puan aldınız?'
                    ikinci_not = {ask} 'İkinci sınavınızda kaç puan aldınız?'
                    toplam = birinci_not + ikinci_not
                    ortalama_not = toplam / 2
                    {if} ortalama_not = 1 {or} ortalama_not = 2 {or} ortalama_not = 3 {or} ortalama_not = 4 {or} ortalama_not = 5
                        {print} 'Olamaz! Bu dersi geçemediniz.'
                    {else}
                        {print} 'Harika! Bu dersi geçtiniz!'
                    ```
            15:
                start_code: |-
                    {print} 'Hadi bir sonraki seviyeye geçelim!'
                story_text: |
                    Aşağıdaki bu oyunda, oyuncunun istediği kadar oynayabilmesini sağlamak için bir kod yapılmıştır...
                    Ancak kod etkisiz ve çok uzun. Ayrıca, oyuncu 100 yerine 101 oyun oynamak isterse ne olacak?
                    Sonsuza kadar da oynayamaz mısın?
                    Bu seviyede tüm bunları çok daha kolay hale getiren bir komut öğreneceksiniz!
                example_code: |
                    ```
                    oyun {is} 'devam'
                    {for} i {in} {range} 1 {to} 100
                        {if} oyun {is} 'devam'
                            cevap = {ask} 'Devam etmek istiyor musun?'
                            {if} cevap {is} 'hayır'
                                oyun {is} 'bitti'
                            {if} cevap {is} 'evet'
                                {print} 'Tamamdır, devam ediyoruz.'
                    ```
            16:
                start_code: |-
                    {print} 'Hadi bir sonraki sekmeye geçelim!'
                story_text: |
                    Bu seviyede gerçek Python koduna doğru biraz daha yakınlaşacağız. Ayrıca iki listeyi nasıl eşleştireceğinizi de öğreneceksiniz.
                    Bu şekilde, doğru hayvanın doğru sesle eşleştirildiği bir kod programlayabilirsiniz.
                    Çünkü aşağıdaki iki kod... açıkça saçmalıyorlar!
                example_code: |
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak, 'havhav, 'möö'
                    {for} hayvan {in} hayvanlar
                        {print} 'Bir ' hayvan ' ses çıkarıyor ' sesler {at} {random}
                    ```
                    You could also try to make it work this way, but....
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak, 'havhav, 'möö'
                    {for} hayvan {in} hayvanlar
                        {for} ses {in} sesler
                            {print} 'Bir ' hayvan ' ses çıkarıyor ' ses
                    ```
            17:
                start_code: |-
                    {print} 'Hadi bir sonraki seviyeye geçelim!'
                story_text: |
                    Hedy'nin son seviyesine neredeyse ulaşmak üzeresiniz, aferin! Bu seviyede `{print}` kullanmanın gerçek bir Python yolunu öğreneceksiniz.
            18:
                start_code: |-
                    {print} ('Harika iş çıkardınız!!!')
                story_text: |
                    Tebrikler! Hedy'nin son seviyesine ulaştınız! Burada oluşturduğunuz kodu replit veya PyCharm gibi gerçek Python ortamlarına kopyalayabilir ve orada öğrenmeye devam edebilirsiniz!
                    Ancak Python'un yalnızca İngilizce komutları okuyabildiğini unutmayın. Şimdiye kadar gördüğünüz komutları İngilizce olanları ile değiştirmeniz gerekecek. Komutları yazarken cümledeki yerlerinin biraz Tarzan'ca olduğunu farketmişsinizdir. Bunun sebebi, komut kelimelerinin aynı oldukları yerlere İngilizcelerini yazınca, kodunuzun gerçek bir Python programına dönüşebilmesiydi (tabi biraz da Türkçemizin bazı harflerini değiştirmek gerekecek ama bu pek bir sorun değil).

    story:
        name: "Hikaye"
        description: "Hikaye"
        default_save_name: "Hikaye"
        levels:
            1:
                story_text: |
                    Seviye 1'de, kendiniz girdiğiniz farklı bir ana karakterle bir hikaye oluşturabilirsiniz.

                    İlk satırda `{ask}` kullanın ve hikayenin ana karakterinin kim olacağını sorun.

                    Bu ilk satırdan sonra, cümlenin yazdırılması gerekiyorsa `{print}` ile başlayın.
                    Ana karakterinizin cümlenin sonunda olmasını istiyorsanız `{echo}` kullanırsınız.
                example_code: |
                    ```
                    {ask} Bu hikayenin ana karakteri kim?
                    {print} Ana karakter şimdi ormanda yürüyecek
                    {echo} Biraz korkmuş,
                    {print} Her yerde çılgın sesler duyuyor.
                    {print} Buranın perili bir orman olmasından korkuyor.
                    ```
                start_code: "{print} Hikayeniz burada başlıyor"
                story_text_2: "### Alıştırma\nŞimdi en az 6 satır koddan oluşan kendi hikayenizi oluşturun.\nBu hikaye örnek kodumuzdaki ile aynı olmasın.\nEn az bir tane `{ask}` ve bir tane `{echo}` komutu kullanın.\nİstediğiniz herhangi bir konu hakkında yapabilirsiniz.\nAklınıza bir konu gelmiyorsa, seçeneklerimizden birini kullanın: sinemaya gitmek, bir spor karşılaşması veya hayvanat bahçesinde bir gün.\n"
            2:
                story_text: |
                    2. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Ana karakterinizin adı artık cümle içinde herhangi bir yerde olabilir.

                    Bunun için birazcık daha fazla programlamanız gerekiyor. İlk önce ana karakterinize isim vermelisiniz.

                    Daha sonra bu ismi cümle içinde herhangi bir yere koyabilirsiniz.
                example_code: |-
                    ```
                    isim {is} {ask} Ana karakterin adı nedir?
                    {print} isim şimdi ormanda koşacak
                    {print} isim biraz korkuyor
                    {print} Aniden çılgın bir ses duydu....
                    {sleep}
                    {print} isim buranın perili bir orman olmasından korkuyor
                    ```
                start_code: "{print} Sizin hikayeniz"
                story_text_2: "### Alıştırma\nŞimdi sırada bir önceki seviyede oluşturduğunuz kendi hikayenize değişkenler ekleme zamanı.\n'Programlarım'a gidin, 1. seviye hikaye maceranızı bulun ve kodunuzu kopyalayın. Kodu bu seviyedeki giriş ekranınıza yapıştırın.\n\nBu kod bu seviyede çalışmayacaktır, çünkü henüz değişkenleri kullanmadınız.\nKodunuzdaki `{ask}` komutlarını ve `{echo}` komutlarını bu seviyede öğrendiğiniz doğru şekilleriyle değiştirin.\n\n**Ekleme** Hikayenizde gerilim oluşturmak için kodunuza bir {sleep} komutu ekleyin.\n"
            3:
                story_text: |
                    3. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Bunun gibi herhangi bir canavar, hayvan veya diğer engeller için rastgelelik kullanabilirsiniz:

                example_code: |
                    ```
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} Şimdi şunun sesini duyuyor: bir hayvanlar {at} {random}
                    ```
                story_text_2: |
                    Hikayenizde `{add}` komutu da kullanışlı olabilir.
                example_code_2: |
                    ```
                    {print} Bir ses duyuyor
                    hayvanlar {is} 🐿, 🦔, 🦇, 🦉
                    hayvan {is} {ask} Ne olduğunu düşünüyorsun?
                    {add} hayvan {to_list} hayvanlar
                    {print} bu bir hayvanlar {at} {random}
                    ```
                story_text_3: |
                    Bu, hikayenizdeki `{remove}` komutunun bir örneğidir

                    ### Alıştırma
                    Önceki seviyelerdeki hikayenizi bu seviyeye kopyalayın.
                    Bu seviyede, 3 yeni komut öğrendiniz `{at} {random}` , `{add} {to}` ve `{remove} {from}`.
                    Hikayenize yeni kod satırları ekleyin, böylece tüm yeni komutlar hikayenizde en az bir kez yer alsın.
                example_code_3: |
                    ```
                    {print} Sırt çantası çok ağırlaştı.
                    {print} İçinde bir şişe su, bir el feneri ve bir tuğla vardı.
                    çanta {is} şişe su, el feneri, tuğla
                    çıkar {is} {ask} Hangi eşyayı atmalı?
                    {remove} çıkar {from} çanta
                    ```
                start_code: "{print} Sizin hikayeniz"
            4:
                story_text: |
                    Önceki seviyelerde hala bir sorun olduğunu fark etmiş olabilirsiniz. İsim kelimesini içeren bir cümle yazdırmayı denediniz mi? Örneğin: `{print}` benim adım adım dır.
                    Bunu bu seviyede çözebilirsiniz. Yazdıracağınız her şey için tırnak işareti kullanmalısınız.

                    ### Alıştırma
                    Örnek kodu kopyalayın ve 1. ve 2. satırlardaki boşluklara tırnak işareti ekleyerek tamamlayın.
                    Satır 3 ve 4'teki boşluklar tırnak işaretleriyle değil, bir `{sleep}` ve bir `{clear}` komutuyla değiştirilmelidir. Bunu çalıştırabilir misin?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve hikaye kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                    Aklınızda bulunsun: Hikayenizdeki değişkenler tırnak işaretlerinin dışında olmalıdır; tıpkı örnek kodun ikinci satırında olduğu gibi. Bu satırda değişken adı tırnak işaretlerinin dışına yerleştirilmiştir.
                example_code: |
                    ```
                    isim {is} {ask} _ Adın nedir? _
                    {print}  _ Ana karakterin adı _ isim
                    _
                    _
                    {print} isim _ şimdi ormanda yürüyecek _
                    {print} isim _ biraz korkuyor _
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Şunun sesini duyuyor _ hayvanlar {at} {random}
                    {print} isim _ buranın perili bir orman olmasından korkuyor _
                    ```
                start_code: "{print} 'Hikayeniz buraya yazılacak!'"
            5:
                story_text: |
                    Bu seviyede, hikayenizi daha da eğlenceli hale getirecek farklı sonlar programlayabilirsiniz.
                    Örnek kodda 2 farklı sonun nasıl yapıldığını görebilirsiniz.

                    ### Alıştırma 1
                    Seçtiğiniz bir konu hakkında en az 6 satırlık yeni bir kısa hikaye yazın.
                    İlham gelmedi mi? Şu konulardan birini seçin: bir süper kahraman, sıkıcı bir okul günü, ıssız bir adada mahsur kalmak.

                    Şimdi oyuncuya örnek kodda olduğu gibi mutlu veya kötü sonu seçmesi için bir şans verin.
                    Her iki sonu da programlayın.

                    ### Alıştırma 2
                    Önceki seviyelerde kendi hikaye maceranızda oluşturduğunuz hikayeyi kopyalayın.
                    Hikayenize en az 2 tane `{if}` ve `{else}` komutu eklemenin bir yolunu bulun.
                    Bu mutlu ya da kötü bir son için olabilir, ancak komutları dahil etmek için başka yollar da bulmaya çalışabilirsiniz.
                example_code: |
                    ```
                    isim {is} {ask} 'Ormanda yürüyen kim?'
                    {print} isim ' ormanda yürüyor'
                    {print} isim ' bir canavarla karşılaşır'
                    son {is} {ask} 'İyi bir son mu yoksa kötü bir son mu istersiniz?'
                    {if} son {is} iyi {print} isim ' kılıcını çıkarır ve canavar hızla kaçar'
                    {else} {print} isim ' canavar tarafından yendi'
                    ```
                start_code: "{print} 'Hikayeniz burada başlayacak!'"
            7:
                story_text: |
                    Bir hikayede, birileri kelimeleri birkaç kez söyler. Örneğin, birisi yardım istediğinde veya şarkı söylediğinde.
                    Bu seviyede, bu tür tekrarları hikayenize `{repeat}` ile koyabilirsiniz.

                    ### Alıştırma
                    Kendi hikayenize tekrarlama ekleyin. Kayıtlı programlarınıza geri dönün, 6. seviyedeki hikaye programınızı seçin ve
                    `{print}` içeren bir satır seçip onu tekrarlayın!

                example_code: |
                    ```
                    {print} 'Prens sürekli yardım istiyordu.'
                    {repeat} 5 {times} {print} 'Yardım edin!'
                    {print} 'Neden kimse bana yardım etmiyor?'
                    ```

                start_code: "{repeat} 5 {times} {print} 'Yardım edin!'"
            8:
                story_text: |
                    Bu seviyede `{if}` komutlarınızda birden fazla satır kullanabilirsiniz, bu şekilde mutlu veya üzücü sonunuzu güncellemiş olacaksınız!

                    ### Alıştırma 1
                    Örnek kodda iki farklı son gösterilmektedir; biri karakterlerin zaman makinesine atladığı, diğeri ise atlamadığı son.
                    Boşlukları her sonda en az bir cümle olacak şekilde tamamlayın.
                    **Ekleme** Hikayeyi daha uzun hale getirin. Hikayede ne oluyor? Farklı seçenekler içeren ikinci bir `{ask}` da ekleyebilirsiniz.

                    ### Alıştırma 2
                    Kayıtlı programlarınıza geri dönün, 5. seviyedeki hikaye programınızı seçin. Şimdi her biri en az üç satır uzunluğunda bir iyi ve bir kötü son yazın!

                example_code: |
                    ```
                    {print} 'OLAMAZ! T-rex yaklaşıyor!'
                    son = {ask} 'Mutlu bir son mu yoksa hüzünlü bir son mu istiyorsunuz?'
                    {if} son {is} mutlu
                        {print} 'Ali tam zamanında zaman makinesine geri atlıyor!'
                        {print} _
                    {else}
                        {print} 'Olamaz! Ali çok yavaştı ve....'
                        {print} _
                    ```
                start_code: "# kodunuzu buraya yazın"
            9:
                story_text: |
                    Bu seviyede artık `{if}` ve `{repeat}` komutlarını, diğer `{if}` ve `{repeat}` komutlarının içinde kullanabilirsiniz.
                    Bu size birçok seçenek sunar ve hikayenizi gerçekten etkileşimli hale getirmenize yardımcı olur.

                    ### Alıştırma 1
                    Kodu tamamlayın, böylece `{if}` doğru şekilde çalışsın.

                    ### Alıştırma 2
                    Hikayede, Ayşe'nin de eve gittiği kısmı için bir `{if}` ve `{else}` ekleyin.

                    ### Alıştırma 3
                    Seviye 8 'deki hikayenize geri dönün ve başka bir `{if}` içinde en az iki `{if}` kullanın.
                example_code: |
                    ```
                    {print} 'Ayşe şehir merkezinde yürüyor.'
                    yer = {ask} 'Ayşe bir dükkana mı giriyor, yoksa eve mi gidiyor?'
                    {if} yer {is} dükkan
                        {print} 'Dükkana girer.'
                        {print} 'Ayşe ilginç görünümlü bir kitap görür'
                        kitap = {ask} 'Ayşe kitabı satın aldı mı?'
                        {if} kitap {is} evet
                        _ {print} 'Ayşe kitabı satın alır ve eve gider.'
                        _ {else}
                        _ {print} 'Ayşe dükkânı terk eder ve eve gider.'
                    {else}
                        {print} 'Ayşe eve gider'
                    ```
                start_code: "# kodunuzu buraya yazın"
            10:
                story_text: |
                    Bu seviyede {for} komutunu hikayenizde kullanabilirsiniz. Bu şekilde 'Brown bear, Brown bear, what do you see' adlı çocuk kitabını kolayca programlayabilirsiniz.

                    ### Alıştırma

                    Eğer bilmiyorsanız <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> hikayeye bir göz atın</a> , ve kitapta yazıldığı gibi yazdığınızdan emin olun. (Bunun gibi bir Türkçe kitap biliyorsanız onu da yazabilirsiniz)

                example_code: |
                    ```
                    hayvanlar = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} hayvan {in} hayvanlar
                        {print} 'I see a ' hayvan ' looking at me'
                        {print} hayvan
                        {print} hayvan
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            12:
                story_text: |-
                    Bu seviyede, bir değişkene birden fazla kelimeyi kaydetmek için tırnak işaretlerine ihtiyaç duyulacaktır.

                    ### Alıştırma

                    Önceki seviyelerden bir hikaye bulun, herhangi bir seviye olabilir. Şimdi tırnak işaretlerinin doğru yerlere eklendiğinden emin olun.
                example_code: |
                    ```
                    isim = 'İngiltere Kraliçesi'
                    {print} isim ' bir parça kek yiyordu, sonra aniden...'
                    ```
                start_code: "# kodunuzu buraya yazın"
            13:
                story_text: |
                    `{and}` ve `{or}` komutlarını kullanarak hikayelerinizi çok yönlü hale getirebilirsiniz. İki soru sorabilir ve cevapların bir karışımına yanıt verebilirsiniz.

                    ### Alıştırma 1
                    Örnek koda bakın ve tamamlayın. Ardından `{and}` veya `{or}` ile en az 2 `{if}` kodu daha ekleyin.

                    ### Alıştırma 2
                    Önceki bir seviyeden bir hikaye bulun ve bir `{and}` veya `{or}` ekleyin.
                example_code: |
                    ```
                    {print} 'Kahramanımız ormanda yürüyor.'
                    {print} 'Yol ikiye ayrılıyor'
                    yol = {ask} 'Hangi yolu seçmeli?'
                    silah = {ask} 'Hangi silahı çekiyor?'
                    {if} yol {is} 'sol' {and} silah {is} 'kılıç'
                        _
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    `{while}` döngüsünü kullanmak hikayelerinizi daha ilginç hale getirebilir. Örneğin, oyun bitene kadar oynayabilmek için `{while} oyun {is} 'devam'` kullanabilirsiniz.
                    Ya da `{while} kılıç {is} 'kayıp'` kullanabilirsiniz, böylece oyuncu bir şey bulana kadar oyuna devam edemez.
                example_code: |
                    ```
                    anahtarlar = 'kayıp'
                    {print} 'Bahçenizde duruyorsunuz ve anahtarlarınızı kaybettiniz.'
                    {print} 'Onları nerede aramak istersiniz?'
                    {print} 'Seçebilirsiniz: ağaç, çiçeklik, kaya, posta kutusu'
                    {while} anahtarlar == 'kayıp'
                        yer = {ask} 'Nereye bakmak istiyorsun?'
                        {if} yer == 'çiçeklik'
                            {print} 'İşte buradalar!'
                            anahtarlar = 'bulundu'
                        {else}
                            {print} 'Hayır, burada değiller: ' yer
                    {print} 'Şimdi eve girebilirsiniz!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            18:
                example_code: "```\n{print}('Bu hikayeye hoş geldiniz!')\n```\n"
                story_text: "Başka bir hikaye yazdıracağız, ancak şimdi `{print}` ile parantez kullanmak zorundayız.\n\n### Alıştırma 1\nEn az 5 cümlelik bir hikaye oluşturun. Henüz herhangi bir 'isim' kullanmak zorunda değilsiniz.\n"
                story_text_2: "### Alıştırma 2\nSizin için zaten bir `{input}` hazırladık. Öncelikle hikayenizde `isim` değişkenini kullanın.\nArdından ikinci bir `{ask}` ekleyin ve bu değişkeni de kullanın.\nİpucu: `{print}` içinde, metin ve değişkenler arasındaki virgülleri unutmayın!\n"
                example_code_2: "```\nisim = {input}(\"Senin adın ne?\")\n{print}('Bu hikayeye hoş geldin!')\n```\n"
                start_code: '# kodunuzu buraya yazın'
    parrot:
        name: "Papağan"
        description: "Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!"
        default_save_name: "Papağan"
        levels:
            1:
                story_text: |
                    Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    {ask} Adın ne senin?
                    {echo}
                    {echo}
                    ```
                start_code: "{print} Ben papağan Hedy.\n{ask} Adın ne senin?\n{echo}\n{echo}\n"
                example_code_2: "```\n{print} Ben papağan Hedy.\n{ask} _\n{echo}\n{echo}\n"
                story_text_2: "### Alıştırma\nSarı düğmeye tıklayarak örnek kodu girdi ekranınıza kopyalayın.\nPapağanın farklı bir soru sormasını sağlayın. Örnekteki boşlukları doldurun!\n**Ekleme** Papağanın birden fazla soru sormasına da izin verebilirsiniz. Kendi kodunuzun altına birkaç satır daha kod yazın.\n"
            2:
                story_text: |
                    Bir önceki seviyede, sizden sonra tekrar eden bir papağan yapmıştınız. Bu seviyede papağanı bir değişken ve `{ask}` komutu kullanarak etkileşimli hale getireceğiz.
                    Ayrıca bir şey söylendikten sonra `{sleep}` komutları ekleyerek papağanı daha gerçekçi hale getireceğiz.
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    isim _ _ Adın ne senin?
                    {print} isim
                    _
                    {print} gaak
                    _
                    {print} isim
                    ```
                start_code: "{print} Ben papağan Hedy!"
                story_text_2: "### Alıştırma\nİlk olarak, 2. satırı bir `{is}` ve bir `{ask}` komutuyla bitirin.\nArdından papağanın bir süre sessiz kalmasını sağlamak için 4. ve 6. satırlara `{sleep}` komutunu girin.\n\n**Ekleme** Daha fazla kod satırı ekleyerek papağanın sadece adınızdan daha fazlasını sormasını sağlayabilir misiniz?\n"
            3:
                story_text: |
                    Papağanınıza `{add}` ile yeni bir kelime öğretin.
                    ### Alıştırma
                    Kodun çalışması için `{add} {to}` komutunu ekleyebilir misiniz?
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} Papağanınızı eğitin!
                    yeni_kelime {is} {ask} Ona hangi kelimeyi öğretmek istiyorsunuz?
                    _ yeni_kelime _ kelimeler
                    {print} 🧒 hadi yeni_kelime de, Hedy!
                    {print} 🦜 kelimeler {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
            5:
                story_text: |
                    Doğru kelimeyi söylerse papağanınızı ödüllendirin!

                    ### Alıştırma
                    Eksik olan 4 komutu doldurarak kodu tamamlayın.
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} 'Papağanınızı eğitin!'
                    yeni_kelime {is} {ask} 'Ona hangi kelimeyi öğretmek istiyorsunuz?'
                    {add} yeni_kelime {to_list} kelimeler
                    dediği_kelime {is} kelimeler {at} {random}
                    {print} '🧒 Hadi ' new_word ' de, Hedy!'
                    {print} '🦜 ' dediği_kelime
                    _ dediği_kelime {is} yeni_kelime _ '🧒 Aferin, Hedy! 🍪'
                    _ _ '🧒 Hayır, Hedy! ' yeni_kelime ' de!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            4:
                start_code: '# Kodunuzu buraya yazın'
                story_text: "Bu seviyede `{ask}` ve `{print}` komutları ile tırnak işaretlerini kullanmamız gerekiyor.\n### Alıştırma\nBoşluklardaki tırnak işaretlerini doldurarak kodu tamamlayın.\n"
                example_code: "```\nkelimeler {is} gaak, Hedy\n{print} _ Papağanınızı eğitin! _\nyeni_kelime {is} {ask} _ Ona hangi kelimeyi öğretmek istiyorsunuz? _\n{add} yeni_kelime {to_list} kelimeler\n{print} _ 🧒 Hadi _ new_word _ de, Hedy!_\n{print} _ 🦜 _ kelimeler {at} {random}\n```\n"
    songs:
        name: "Bir şarkı söyle!"
        description: "Şarkı yazdır"
        default_save_name: "Şarkı"
        levels:
            6:
                story_text: |
                    Şarkılar genellikle çok sayıda tekrarlama içerir. Bazen bu tekrarlar saymaya da dayanır.
                    Örneğin, meşhur 'Bira şişeleri' şarkısı gibi. Bu şarkıyı biraz matematikle programlayabilirsiniz.

                    İpucu: Hedy'nin şarkıyı size söylemesini sağlamak için sesli okuma işlevini kullanın!

                    ### Alıştırma
                    Şimdi 2'den 7'ye kadar olan satırları kopyalayarak istediğiniz kadar tekrarlayabilirsiniz.
                example_code: |
                    ```
                    mısra = 99
                    {print} mısra ' şişe duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirip, kenara koyun'
                    mısra = mısra - 1
                    {print} mısra ' şişe duvarda dizili'
                    {sleep}
                    ```
                start_code: "{print} 'Şarkı söyleyelim!'"
                story_text_2: "Bu çocuk şarkısı 5 küçük maymundan 1 maymuna doğru geri sayar.\nEğer 2 - 7. satırları kopyalar ve kodun altına yapıştırırsanız, tüm şarkıyı söyleyebilirsiniz!\n"
                example_code_2: "```\nsayı = 6\nsayı = sayı - 1\n{print} sayı ' küçük maymun yatağın üzerinde zıplıyor'\n{print} 'Biri düştü ve kafasını çarptı.'\n{print} 'Annem doktoru aradı ve doktor dedi ki'\n{print} 'ARTIK YATAKTA ZIPLAYAN MAYMUN OLMASIN!'\n{sleep}\n```\n"
            7:
                story_text: |
                    Şarkılar genellikle çok fazla tekrarlama içerir. Örneğin. Bebek Köpekbalığı! Eğer söylerseniz, aynı şeyi söylemeye devam edersiniz:

                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı

                    ### Alıştırma
                    Bebek Köpekbalığı şarkısını bir `{repeat}` ile yazdırabilir misiniz? Boşlukları değiştirerek kodu tamamlayın?
                    **Ekleme** Bebek Köpekbalığı'ndan sonra elbette başka şarkılar da programlayabilirsiniz. Tekrarı olan birçok şarkı var!
                    Aklınıza bir şarkı daha geliyorsa yazdırabilir misiniz?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Bebek Köpekbalığı tututudutudu'
                    {print} 'Bebek Köpekbalığı'
                    ```
                start_code: "{print} 'Bebek Köpekbalığı'"
            8:
                story_text: |
                    Önceki bir seviyede, 'Bira şişeleri' şarkısını programladınız. Ancak `{repeat}` komutu olmadan, dizeleri birçok kez kopyalamak zorunda kaldınız.
                    Bu seviyede, sadece basit bir satır ekleyerek şarkıyı 99 kez tekrarlayabilirsiniz!

                    ### Alıştırma
                    Boşluklara doğru komutu ekleyin ve kodu doğru şekilde girintileyin.
                example_code: |
                    ```
                    mısra = 99
                    _ 99 {times}
                    {print} mısra ' bira şişesi duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirin, kenara koyun.'
                    mısra = mısra - 1
                    {print} mısra ' bira şişesi duvarda dizili'
                    ```
                start_code: "# kodunuzu buraya yazın"
            10:
                story_text: |
                    `{for}` ile tüm yavru köpekbalığı şarkısını (ailedeki diğer tüm köpekbalıkları da dahil olmak üzere) sadece 6 satırda yazdırabilirsiniz!

                    ### Alıştırma 1
                    Bir `{for}` komutu kullanarak yavru köpekbalığı kodunu daha da kısaltabilir misiniz? Örnek kodu tamamlayın.
                example_code: |
                    ```
                    aile = bebek, anne, baba, büyükanne, büyükbaba
                    _ _ _ _ 
                      {print} _
                    ```
                start_code: "# kodunuzu buraya yazın"
                example_code_2: "```\nmaymunlar = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Alıştırma 2\nBeş küçük maymun yatakta zıplıyor şarkısını yazdırın. Eğer hatırlamıyorsanız metne bakın.\n\n**Ekleme** Ali babanın bir çiftliği var şarkısını yazdırın ve `{if}` kullanarak tüm hayvanların farklı bir ses çıkardığından emin olun.\n"
            11:
                story_text: |
                    Bu seviyede `{for}` ile `{range}` kullanarak, 5 küçük maymun gibi, saymayı kullanan şarkılar yapabilirsiniz.

                    ### Alıştırma 1
                    Boşlukları doldurun ve kodu çalışır hale getirin! Şarkı metnini hatırlamıyorsanız, kendiniz arayın.

                    ### Alıştırma 2
                    Şarkının son satırı diğerlerinden farklıdır. Bu satırı `{for}` içine yazdırın ve doğru çalışması için bir `{if}` kullanın.
                example_code: |
                    ```
                    _ maymunlar _ _ 5 _ 1
                        {print} maymunlar ' küçük maymun yatağın üzerinde zıplıyor'
                        _
                    ```
                start_code: "# kodunuzu buraya yazın"
            12:
                story_text: |
                    Bu şarkıda 'eğer mutluysan ve bunu biliyorsan, ellerini çırp' cümlesini programlamayı daha da kolaylaştırabiliriz. Çünkü tüm eylemleri bir değişkene koyabiliriz, bir göz atın:

                    ### Alıştırma
                    Şarkının doğru çalınması için her satıra doğru miktarda girinti ekleyebilir misiniz?
                    İpucu: Tüm satırların girintiye ihtiyacı yoktur
                example_code: |
                    ```
                    _ eylemler = 'ellerini çırp', 'ayaklarını yere vur', 'Yaşasın diye bağırın!'
                    _ {for} eylem {in} eylemler
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    _ {print} 'eğer mutluysan ve bunu biliyorsan ve gerçekten göstermek istiyorsan'
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    ```
                start_code: "# kodunuzu buraya yazın"
            16:
                story_text: |
                    Bu seviyede Ali Babanın çiftliği gibi bir şarkıyı daha da hızlı bir şekilde programlayabilirsiniz. Sadece listede aynı yere koyarak doğru hayvanı doğru sese bağlayabilirsiniz.
                    Sarhoş Denizci de bu seviyede hızlı bir şekilde yapılır. Tüm şarkı için sadece 8 satıra ihtiyacınız var, bir göz atın!
                example_code: |
                    ```
                    hayvanlar = ['eşek', 'köpek', 'inek']
                    sesler = ['ai', 'hav', 'möö']
                    {for} i {in} {range} 1 {to} 3
                        hayvan = hayvanlar[i]
                        ses = sesler[i]
                        {print} 'Ali Babanın bir çiftliği var'
                        {print} 'çiftliğinde ' hayvan ' var'
                        {print} ses ses ' diye bağırır'
                        {print} 'çiftliğinde Ali Babanın'
                    ```

                    ```
                    satırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']
                    {for} satır {in} satırlar
                        {for} i {in} {range} 1 {to} 3
                            {print} satır
                        {print} 'sabah erkenden'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'hey heyy ve işte doğuyor'
                        {print} 'sabah erkenden'
                    ```
                start_code: "# kodunuzu buraya yazın"
            18:
                story_text: "Seviye 16'da listeleri kullanarak şarkılar yaptık. Ancak bu programlar bu seviyede artık düzgün çalışmazlar. Seviye 17'deki iki nokta üst üste ve seviye 18'deki parantezlerin hala eklenmesi gerekiyor.\n\n### Alıştırma 1\nSarhoş denizci şarkısı örnek kod olarak verilmiştir, ancak henüz çalışmamaktadır.\nHer şeyin tekrar çalıştığından emin olabilir misiniz? Size yardımcı olmak için _bazı_ hataların yerlerine _ koyduk.\n\n### Alıştırma 2\nŞimdi de 16. seviyedeki Ali Baba şarkınıza bakın ve düzeltin.\n"
                example_code: "```\nsatırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']\n{for} satır {in} satırlaar _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ satır _\n    {print} 'sabah erkenden'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'hey heyy ve işte doğuyor'\n    {print} 'sabah erkenden'\n```\n"
                start_code: '# kodunuzu buraya yazın'
    turtle:
        name: "Kaplumbağa"
        description: "Kendi çiziminizi yapın"
        default_save_name: "Kaplumbağa"
        levels:
            1:
                story_text: "Hedy'yi çizim yapmak için de kullanabilirsiniz. Dönüşleri ve çizgileri birleştirerek bir kare veya merdiven yapabilirsiniz!\n\n`{forward}` kullanarak ileriye doğru bir çizgi çizersiniz. Ardındaki sayı kaplumbağanın ne kadar yürüyeceğini belirler. `{turn} {right}` saat yönünde çeyrek tur döner, `{turn} {left}` saat yönünün tersine döner.\n\nGeriye doğru gitmek istiyorsanız, `{forward}` komutunu eksili bir sayı ile kullanırsınız. Yani örneğin `{forward} -100`\n\n### Alıştırma\nBu küçük bir merdivenin başlangıcı. Bunu beş basamaklı yapabilir misin?\n"
                example_code: "```\n{forward} 20\n{turn} {right}\n{forward} 20\n{turn} {left}\n{forward} 20\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: |
                    Bu seviyede, kaplumbağayı etkileşimli hale getirmek için değişkenler kullanabilirsiniz. Örneğin oyuncuya kaplumbağanın kaç adım atması gerektiğini sorabilirsiniz.
                example_code: |
                    ```
                    cevap {is} {ask} Kaplumbağa kaç adım atsın?
                    {forward} cevap
                    ```
                story_text_2: |
                    Ayrıca, 1. seviyede kaplumbağa sadece sola veya sağa dönebiliyordu. Bu biraz sıkıcı!
                    2. seviyede burnunu her yöne çevirebilir.

                    Bir çeyrek tur döndürmek için 90 kullanın. Buna derece diyoruz. Tam dönüş 360 derecedir.

                    ### Alıştırma
                    Bu kodla bir şekil oluşturabilir misiniz? Belki bir üçgen ya da daire?
                example_code_2: |
                    ```
                    {print} Şekiller çizdirmek
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                start_code: |-
                    {print} Kaplumbağa yarışı!
                    açı {is} 90
                    {turn} açı
                    {forward} 25
            3:
                story_text: |
                    Bu seviyede, çizim kaplumbağamız ile `{at} {random}` kullanabilirsiniz. Rastgele bir seçim, kaplumbağanın her seferinde farklı bir yolda yürümesini sağlar.
                    Listeden bir değer seçmek için `{at} {random}` kullanın.
                    ### Alıştırma
                    Daha uzun rastgele bir yol oluşturmak için 2. ve 3. satırları kopyalayıp yapıştırabilir misiniz?
                example_code: |
                    ```
                    açılar {is} 10, 50, 90, 150, 250
                    {turn} açılar {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    açılar {is} 10, 50, 90, 150, 250
                    {turn} açılar {at} {random}
                    {forward} 25
            4:
                story_text: |
                    4. seviyede, `{print}` ve `{ask}` ile tırnak işareti kullanmanız gerekecek. Ayrıca çizim yaparken de!
                example_code: |
                    ```
                    {print} _ Çizim yapılıyor _
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Çizim yapılıyor'
                    açı {is} 90
                    {turn} açı
                    {forward} 25

                story_text_2: "Ayrıca `{color}` komutu ile çizgilerin rengini de değiştirebilirsiniz. Örneğe göz atın.\nAyrıca bunun yanında çizim alanımız beyaz olduğundan `{color} {white}` komutunu kullanarak 'görünmez' çizgiler çizebilirsiniz. Çizime başlamadan önce kaplumbağayı ekranda herhangi bir yere taşımak için bu beyaz çizgileri kullanabilirsiniz.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: |
                    5. seviyede, `{if}` ile bir seçim yapabilirsiniz. Örneğin farklı şekil türleri arasında.
                example_code: |
                    ```
                    {print} 'Çizim yapılıyor'
                    şekil {is} {ask} 'Kare mi yoksa üçgen mi istiyorsunuz?'
                    {if} şekil {is} üçgen açı {is} 120
                    {else} açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Çizim yapılıyor'
                    şekil {is} {ask} 'Kare mi yoksa üçgen mi istiyorsunuz?'
                    {if} şekil {is} üçgen açı {is} 120 {else} açı {is} 90
                    {turn} açı
                    {forward} 25
                story_text_2: "### Alıştırma\nBu kodun çalışmasını sağlamak için kodun içine doğru sayıları doldurun.\nBunu yaptıktan sonra, geriye doğru seçeneğini eklemeyi deneyebilirsiniz.\n\n**Ekleme** 'Sol' ve 'sağ' kullanmak yerine, programı Kuzey, Doğu, Güney ve Batı ile yeniden oluşturun.\nBu şekilde Kuzeydoğu ve Güneybatı gibi daha fazla yön ekleyebilirsiniz.\n"
                example_code_2: "```\nyön {is} {ask} 'Sola mı, sağa mı, yoksa düz mü gitmek istiyorsunuz?'\n{if} yön {is} sol {turn} _\n{if} yön {is} sağ {turn} _\n{forward} 100\n```\n"
            6:
                story_text: |
                    Bu seviyede, farklı şekiller çizmek için hesaplamaları kullanabilirsiniz.
                    Okulda tam bir daire çizmenin 360 derece olduğunu öğrenmiş olabilirsiniz. Eğer öğrenmediyseniz, artık biliyorsunuz!
                    Bu yüzden bir kare için 90 derece kullanırsınız. 360'ın 4'e bölümü 90'dır.
                    Artık Hedy ile matematik yapabildiğimize göre, istediğimiz tüm şekilleri çizebiliriz!

                example_code: |
                    ```
                    açılar = {ask} 'Kaç tane açı istiyorsun?'
                    açı = 360 / açılar
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    ```
                start_code: |-
                    {print} 'Şekiller çizmek'
            8:
                story_text: |
                    Artık birkaç satırı tekrarlayabildiğimize göre, şekilleri daha kolay oluşturabiliriz.
                    Açıyı yalnızca bir kez ayarlamamız ve ardından bu değişkeni `{repeat}` içinde kullanmamız gerekir.

                    ### Alıştırma 1
                    Örnek kod bir kare oluşturur. Kodu, üçgen veya altıgen gibi başka bir şekil oluşturacak şekilde değiştirin.
                    Bu, iki kod satırında değişiklik yapılmasını gerektirir.
                    İpucu: Bir dairenin tamamı 360 derecedir.

                    ### Alıştırma 2
                    Şimdi en az iki çokgenden oluşan bir çizim oluşturun.

                example_code: |
                    ```
                    açı = 90
                    {repeat} 4 {times}
                        {turn} açı
                        {forward} 50
                    ```
                story_text_2: |
                    **Ekleme** Artık farklı şekiller çizen programımızı geliştirebiliriz. Kodu tamamlayınca istediğiniz herhangi bir çokgeni çizebilirsiniz!

                example_code_2: |
                    ```
                    şekil = {ask} 'Kaç tane açı çizmeliyim?'
                    açı = 360 / şekil
                    {repeat} şekil {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    şekil = {ask} 'Kaç tane açı çizmeliyim?'
            9:
                story_text: "Artık bir `{repeat}` içinde bir `{repeat}` kullanabildiğimize göre, daha karmaşık şekiller oluşturabiliriz.\n\n### Alıştırma 1\nBu kod üç tane siyah üçgen oluşturur, bunu beş pembe kareye dönüştürün.\n\n **Ekleme** En az iki farklı şekil türünden oluşan kendi seçtiğiniz bir şekil oluşturun.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# kodunuzu buraya yazın'
    dishes:
        name: "Bulaşıklar mı?"
        description: "Bulaşıkları kimin yıkayacağını seçmek için bilgisayarı kullanın"
        default_save_name: "Bulaşıklar"
        levels:
            3:
                story_text: |
                    Bugün bulaşıkları kimin yıkayacağı ya da kedinin kum kabını kimin değiştireceği konusunda evde hep anlaşmazlığa mı düşüyorsunuz?
                    O zaman bilgisayarın çok adil bir şekilde seçim yapmasına izin verebilirsiniz. Bunu bu seviyede programlayabilirsiniz!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} kişiler {at} {random} bulaşığı yıkayacak
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bulaşık makinesi programının kendi çeşidinizi yapın. Öncelikle aile üyelerinizin bir listesini yapın.
                    Ardından yapılması gereken bir görev düşünün ve bilgisayarın `{at} {random}` komutuyla görevi kimin yapması gerektiğine karar vermesini sağlayın.

                    **Ekleme** Bulaşıkları kendiniz yıkamak istemiyor musunuz? Adınızı `{remove}` `{from}` komutuyla listeden kaldırarak programda hile yapın.
                start_code: "{print} Bulaşıkları kim yıkıyor?"
            4:
                story_text: |
                    Tırnak işaretleri ile bulaşık yıkama programınızı daha da iyi hale getirebilirsiniz.

                    ### Alıştırma
                    Öncelikle, bu örnek programı çalıştırmak için boşluklara doğru sembolleri veya komutları doldurun.
                    Anladınız mı? Harika! Şimdi, önceki seviyeden kendi kodunuzu kopyalayın ve doğru noktalara tırnak işaretleri ekleyerek bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} _ bulaşıkları yıkayacak olan _
                    {sleep}
                    {print} kişiler {at} _
                    ```
                start_code: "{print} 'Bulaşıkları kim yıkıyor?'"
            5:
                story_text: |
                    `{if}` ile artık programda seçim yaparak daha fazla eğlenebilirsiniz. Programınızın bilgisayarın yaptığı seçime yanıt vermesini sağlayabilirsiniz.
                    ### Alıştırma
                    Kodu, sıra size geldiğinde "çok kötü", aksi halde "evet!" yazdıracak şekilde tamamlayabilir misiniz?
                    Tırnakları unutmayın!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    bulaşıkçı {is} kişiler {at} {random}
                    _ bulaşıkçı {is} Ayşe {print} _ Bulaşıkları yıkamak zorunda olmam çok kötü. _
                    _ {print} 'Neyse ki bulaşık yok çünkü ' _ ' zaten yıkıyor'
                    ```
                start_code: "{print} 'Bulaşıkları kim yıkıyor?'"
            6:
                story_text: |
                    Herkes bulaşıkları ne sıklıkla yıkayacak? Bu adil mi? Bunu bu seviyede sayabilirsiniz.
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    ali_yıkadı = 0
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Bulaşıkçımız bugün ' bulaşıkçı
                    {if} bulaşıkçı {is} Ali ali_yıkadı = ali_yıkadı + 1
                    {print} 'Ali bu hafta bulaşıkları ' ali_yıkadı ' kere yıkadı'
                    ```

                    Şimdi 3'ten 5'e kadar olan satırları birkaç kez (örneğin tüm hafta için 7 kez) kopyalayarak tekrar tüm hafta için hesaplama yapabilirsiniz.
                    Bütün hafta için kod yazabilir misiniz?
                story_text_2: |
                    Eğer çok şanssızsanız, bir önceki program sizi tüm hafta boyunca bulaşıkları yıkamanız için seçebilir! Bu hiç adil değil!
                    Daha adil bir sistem oluşturmak için `{remove}` komutunu kullanarak seçilen kişiyi listeden çıkarabilirsiniz. Bu şekilde, herkes sırasını alana kadar bulaşıkları tekrar yıkamak zorunda kalmazsınız.

                    Pazartesi ve salı günleri sizin için hazır! Haftanın geri kalanını da ekleyebilir misiniz?
                    Ve... listenizin boşaldığı durum için bir çözüm bulabilir misiniz?
                example_code_2: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Pazartesi günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Salı günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    ```
                start_code: "{print} 'Bulaşıkları kim yıkıyor?'"
            7:
                story_text: |
                    `{repeat}` ile kod parçalarını tekrarlayabilirsiniz. Bunu, birden fazla gün boyunca bulaşıkları kimin yıkayacağını hesaplamak için kullanabilirsiniz!
                    ### Alıştırma
                    Bütün bir hafta boyunca bulaşıkları kimin yıkaması gerektiğine karar vermek için `{repeat}` komutunu kullanın. Her boşluğun bir komut veya sayı ile doldurulması gerekiyor!
                    **Ekleme** Evdeki diğer görevleri düşünebiliyor musunuz? Kodu üç ev işine karar verecek şekilde uyarlayın. Hangi görevlerle ilgili olduğunu yazdırmayı unutmayın!
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    {repeat} _ _ {print} 'Bugün bulaşıkçımız ' _ _ _
                    ```
                start_code: "{print} 'Bulaşıkları kim yıkıyor?'"
            10:
                story_text: |
                    Bu seviyede, kolay bir şekilde tüm hafta için bir program yapabilirsiniz!

                    ### Alıştırma
                    Süpürmek veya ortalığı toplamak gibi ikinci bir angarya iş ekleyin ve bunun da tüm haftaya bölündüğünden emin olun.
                    <br> **Ekleme** Program adil değil, şanssız olabilir ve tüm hafta boyunca temizlikçi olabilirsiniz. Programı nasıl daha adil hale getirebilirsiniz?
                example_code: |
                    ```
                    günler = Pazartesi, Salı, Çarşamba, Perşembe, Cuma, Cumartesi, Pazar
                    isimler = anne, baba, Ali, Ayşe
                    {for} gün {in} günler
                        {print} isimler {at} {random} ' bulaşıkları ' günler {at} {random} ' günü yıkayacak'
                    ```
                start_code: "# kodunuzu buraya yazın"
    dice:
        name: "Zar"
        description: "Kendi zarınızı yapın"
        default_save_name: "Zar"
        levels:
            3:
                story_text: |
                    Bu seviyede bir listeden seçim yapabiliriz. Bununla bilgisayarın zarın bir tarafını seçmesini sağlayabiliriz.
                    Evinizde dolabınızda bulunan oyunlara bir göz atın.
                    (Özel) bir zarı olan oyunlar var mı? Onları da bu kodla da kopyalayabilirsiniz.
                    Örneğin, üzerinde 1'den 5'e kadar sayılar ve bir solucan bulunan Solucan oyunu zarı.

                    ![üzerinde 1'den 5'e kadar sayılar ve solucan olan bir solucan zarı](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    {print} Attığın zar _ {at} {random}
                    ```
                start_code: "{print} Bu sefer zar kaçı gösterecek?"
                example_code_2: "```\nseçimler {is} _\n```\n"
                story_text_2: "### Alıştırma\nYukarıdaki örnekteki zarlar belirli bir oyun için zarlardır. Normal bir zar yapabilir misiniz?\nYa da farklı bir oyundaki diğer özel zarları?\n"
            4:
                story_text: |
                    Bu seviyede, ayrıca zar da oluşturabilirsiniz. Ancak bu sefer örnek bir kod olmadan kendiniz deneyebilirsiniz!

                    ### Alıştırma
                    Bu seviyede kendi zarınızı yapın.
                    İpucu: Nasıl zar atılacağı hakkında hiçbir fikriniz yoksa. Bir önceki seviyedeki zarlarınıza bir göz atın, ancak tırnak işareti eklemeyi unutmayın.
                start_code: "{print} 'Bu sefer zar kaçı gösterecek?'"
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |2

                                                            Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: "{print} 'What will the die indicate this time?'"
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: "# kodunuzu buraya yazın"
    rock:
        name: "Rock, paper, scissors"
        description: "Make your own rock, paper, scissors game"
        default_save_name: "Rock"
        levels:
            1:
                story_text: |
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                    Instead of using words, you could also use emojis of course: ✊✋✌
                start_code: "{print} Welcome to your own rock scissors paper!"
                story_text_2: "### Exercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!

                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
                start_code: "# kodunuzu buraya yazın"
            3:
                story_text: |
                    You can use the `{at} {random}` command to let the computer pick rock, paper or scissors!

                    ### Exercise
                    Finish the code by using the `{at} {random}` command.

                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
                story_text_2: "### Exercise\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
                start_code: "# kodunuzu buraya yazın"
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.

                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    Play until you beat the computer! But first, finish the example code...

                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
                start_code: "# kodunuzu buraya yazın"
    calculator:
        name: "Calculator"
        description: "Create a calculator"
        default_save_name: "Calculator"
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} correct_answer {print} 'good job!'
                    {else} {print} 'Wrong! It was ' correct_answer
                    ```
                story_text_2: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_2: |
                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```

                start_code: "{print} 'Welcome to this calculator!'"
                story_text_3: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
            9:
                story_text: |
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct_answer = number1 * number2
                        {print} 'What is ' number1 ' times ' number2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is' answer
                        {if} answer {is} correct_answer
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
                start_code: "{print} 'Welcome to this calculator!'"
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: "# kodunuzu buraya yazın"
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
                start_code: "# kodunuzu buraya yazın"
            14:
                story_text: |
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            11:
                story_text: "With a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                start_code: '# kodunuzu buraya yazın'
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
            13:
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                story_text: "\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
                start_code: '# Kodunuzu buraya yazın'
    restaurant:
        name: "Restaurant"
        description: "Create your own virtual restaurant"
        default_save_name: "Restaurant"
        levels:
            1:
                story_text: |
                    In level 1 you can make your own virtual restaurant and take your guests' orders.
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant 🍟
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
                story_text_2: |
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: "# kodunuzu buraya yazın"
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                start_code: "# kodunuzu buraya yazın"
                story_text_2: "### Exercise\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?

                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.

                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: "# kodunuzu buraya yazın"
            4:
                story_text: |
                    In this level you have to use quotation marks when using the `{print}` command.
                    Can you make your code from the previous levels work in this level too by adding the quotation marks?

                    Be careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!
                    So instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    {print} 'Today we are serving pizza or lasagna.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'Great choice! The ' food ' is my favorite!'
                    topping {is} {ask} 'Would you like meat or veggies on that?'
                    {print} food ' with ' topping ' is on its way!'
                    drinks {is} {ask} 'What would you like to drink with that?'
                    {print} 'Thank you for your order.'
                    {print} 'Your ' food ' and ' drinks ' will be right there!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.

                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.

                example_code: |
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: "# kodunuzu buraya yazın"
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                        {if} food {is} fries
                            price = price + 3
                            sauce = {ask} 'What kind of sauce would you like with your fries?'
                            {if} sauce {is} no
                                {print} 'no sauce'
                            {else}
                                price = price + 1
                                {print} 'with ' sauce
                        {if} food {is} pizza
                            price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
                start_code: "courses = appetizer, main course, dessert"
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'Order number ' i
                        food = {ask} 'What would you like to eat?'
                        {print} food
                        {if} food {is} fries
                            sauce = {ask} 'What kind of sauce would you like with that?'
                            {print} sauce
                        drinks = {ask} 'What would you like to drink?'
                        {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
                start_code: "# kodunuzu buraya yazın"
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: "# kodunuzu buraya yazın"
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.

                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything {else}?'
                    {print} 'Thank you!'
                    ```
                start_code: "# kodunuzu buraya yazın"
    fortune:
        name: "Fortune teller"
        description: "Let Hedy predict the future"
        default_save_name: "Fortune Teller"
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: "# kodunuzu buraya yazın"
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I’m Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: "# kodunuzu buraya yazın"
            4:
                story_text: |
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'
                    ```
                start_code: "# kodunuzu buraya yazın"
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.

                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: "# kodunuzu buraya yazın"
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: "# place your code here"
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: "# kodunuzu buraya yazın"
    haunted:
        name: "Haunted House"
        description: "Escape from the haunted house"
        default_save_name: "Haunted House"
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but {if} not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: "{print} How did I get here?"
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: "monster1 {is} _"
                story_text_2: "### Exercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                start_code: "# kodunuzu buraya yazın"
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```

                start_code: "# kodunuzu buraya yazın"
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```

                start_code: "# kodunuzu buraya yazın"
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# kodunuzu buraya yazın"
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# kodunuzu buraya yazın"
    piggybank:
        name: "Piggy Bank"
        description: "Count your pocketmoney!"
        default_save_name: "Piggy Bank"
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
                start_code: "# kodunuzu buraya yazın"
            14:
                story_text: |
                    In this level you can let Hedy tell you {if} you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: "# kodunuzu buraya yazın"
    quizmaster:
        name: "Quizmaster"
        description: "Make your own quiz!"
        default_save_name: "Quizmaster"
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: "# kodunuzu buraya yazın"
    language:
        name: "Language"
        description: "Practice words in a foreign language"
        default_save_name: "Language"
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: "# kodunuzu buraya yazın"
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# kodunuzu buraya yazın"
    secret:
        name: "SuperSpy"
        description: "Make your own spy code"
        default_save_name: "SuperSpy"
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    if name is 'Agent007'
                        a is 'Go to the airport '
                    else
                        a is 'Go to the trainstation '
                    password is ask 'What is the password?'
                    if password is 'TOPSECRET'
                        b is 'tomorrow at 02.00'
                    else
                        b is 'today at 10.00'
                    print a + b
                    ```
                start_code: "# kodunuzu buraya yazın"
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    password is ask 'What is your password?'
                    if name is 'Agent007' and password is 'TOPSECRET'
                        print 'Go to the airport at 02.00'
                    else
                        print 'Go to the trainstation at 10.00'
                     ```
                start_code: "# kodunuzu buraya yazın"
    blackjack:
        name: "Blackjack"
        description: "Try to get as close to 21 as you can"
        default_save_name: "Blackjack"
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: "# kodunuzu buraya yazın"
    tic:
        name: "Tic Tac Toe"
        description: "Play a game of Tic Tac Toe!"
        default_save_name: "Tic"
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: "# Kodunuzu buraya yazın"
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Tic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: "# kodunuzu buraya yazın"
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: "# kodunuzu buraya yazın"
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.

                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```

                start_code: "# kodunuzu buraya yazın"
    years:
        default_save_name: Yeni Yıl Geri Sayımı
        name: Yeni Yıl
        description: Yeni Yıl için Geri Sayım!
        levels:
            11:
                story_text: "Bu seviyede Yeni Yıl'a geri sayım yapmak için `{for}` sayı `{in}` `{range}` komutunu kullanabilirsiniz.\n\n### Alıştırma\nBoşlukları doldurun ve kodu çalışır hale getirin!\n"
                example_code: "```\n{for} sayı {in} {range} _ {to} _\n    {print} sayı\n{print} 'Yeni yılınız kutlu olsun!'\n```\n"
                start_code: '# kodunuzu buraya yazın'
    pressit:
        levels:
            7:
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                story_text: "Now that you have learned about `{repeat}`, we can press keys multiple times.\nYou can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.\nUse this code to draw something nice.\n"
                start_code: '# kodunuzu buraya yazın'
            9:
                start_code: '# kodunuzu buraya yazın'
                story_text: "Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.\n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n**(extra)** Clear the screen after each letter, and show the user how many points they have scored.\n"
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
            5:
                story_text: "In this level there is another new keyword: `{pressed}`!\nWith `{pressed}` you can use keys on your keyboard to control what lines are used.\n\n### Exercise\nLook at the example and add one more line of code that reacts to a key press.\n"
                story_text_2: "You can also link turtle commands to keys.\n\n### Exercise\nCopy the lines a few times so you can create a larger drawing.\n"
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
                start_code: '# kodunuzu buraya yazın'
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        name: Key presses
    repeat_command:
        name: "{repeat}"
        description: tekrarla komutu
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## Tekrarla! Tekrarla! Tekrarla!\nSeviye 7 de `{repeat}` komutunu ekliyoruz. `{repeat}` bir kod satırını birden çok kez çalıştırmak için kullanılabilir. Bunun gibi:\n\n### Alıştırma\nTekrarla komutu ile oynayın. Mutlu yıllar şarkısını şimdi 4 yerine sadece 3 satır kodla yapabilir misiniz?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy çok eğlenceli!'\n```\n"
                start_code: "{print} 'mutlu yıllar sana'\n{print} 'mutlu yıllar sana'\n{print} 'Mutlu yıllar sevgili Hedy'\n{print} 'mutlu yıllar sana'\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Herkese merhaba'\n    {print} 'Bu 5 kez yazdırılacaktır'"
                story_text: "### Tekrarla komutları ve girinti\nBu seviyede sadece 1 tekrar komutu ile birden fazla kod satırını tekrarlayabilirsiniz.\nBunu, tekrarlamak istediğiniz satırlardan bir blok oluşturarak yaparsınız.\nBu bloktaki satırların **girintiye** ihtiyacı olacaktır.\nBu, her satırın başına dört boşluk koymak anlamına geliyor. Sadece tek satırlık bir blok oluşturmak istediğinizde de girinti yapmanız gerekecektir.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Herkese merhaba'\n    {print} 'Bunların hepsi 5 kez tekrarlanır'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    yemek = {ask} 'Ne yemek istiyorsun?'\n    {if} yemek {is} pizza\n        {print} 'güzel!'\n    {else}\n        {print} 'pizza daha iyi olur'"
                story_text: "Bu seviyede sadece `{if}` ve `{repeat}` ile birden fazla satır kullanmakla kalmaz, aynı zamanda bunları bir araya da getirebilirsiniz!\nBu örnekte, bir `{repeat}` komutu içinde bir `{if}` komutu görüyorsunuz. Bunun tersine de izin verilir ve ayrıca bir `{if}` içinde bir `{if}` ve bir `{repeat}` içinde bir `{repeat}` komutu da kullanılabilir.\nBir deneyin bakalım!\n"
                example_code: "```\n{repeat} 3 {times}\n    yemek = {ask} 'Ne yemek istiyorsun?'\n    {if} yemek {is} pizza\n        {print} 'güzel!'\n    {else}\n        {print} 'pizza daha iyi olur'\n```\n"
    maths:
        levels:
            12:
                start_code: "{print} 'ondalık sayıların artık bir nokta kullanması gerekiyor'\n{print} 2.5 + 2.5"
                story_text: "**Ondalık sayılar**\nŞimdiye kadar Hedy, 1.5 gibi ondalık sayılara izin vermiyordu, ancak şimdi buna izin veriyoruz. Bilgisayarların ondalık sayılar için `.` (nokta) kullandığını unutmayın."
                example_code: "```\n{print} 'İki buçuk artı iki buçuk eder...'\n{print} 2.5 + 2.5\n```\n"
            6:
                start_code: "{print} '5 kere 5 eder ' 5 * 5"
                story_text: "## 1 + 1\nBu seviyede yeni bir şey öğreniyorsunuz: artık hesaplama da yapabileceksiniz.\n\nToplama kolaydır, matematikte olduğu gibi yazarsınız: Örneğin `5 + 5`. Çıkarma da iyi çalışır, `5 - 5` şeklindedir.\n\nÇarpma biraz farklıdır, çünkü klavyenizde çarpma simgesi yoktur. Arayın bakın, özel klavye değilse gerçekten yoktur!\nBu yüzden çarpmayı sayıların yanındaki yıldız işaretiyle yapıyoruz: `5 * 5`. Bunu \"5 çarpı 5\" olarak okuyun, en iyi şekilde böyle hatırlamanıza yardımcı olur.\n"
                example_code: "```\n{print} '5 artı 5 eder ' 5 + 5\n{print} '5 eksi 5 eder ' 5 - 5\n{print} '5 çarpı 5 eder ' 5 * 5\n```\n"
                story_text_2: "Ayrıca bir kelimeyi bir değişkende saklama konusunda da bir değişiklik yapıyoruz! Artık bir değişkende bir isim veya sayı sakladığımızda `{is}` yerine `=` kullanabilirsiniz, bunun gibi:\n"
                example_code_2: "```\nisim = Hedy\ncevap = 20 + 4\n```\n"
        name: matematik
        description: matematiğe giriş
        default_save_name: matematik
    and_or_command:
        name: "{and} & {or}"
        description: ve ile veya 'ya giriş
        default_save_name: ve veya
        levels:
            13:
                start_code: "isim = {ask} 'Adınız nedir?'\nyaş = {ask} 'Yaşınız kaç?'\n{if} isim {is} 'Hedy' {and} yaş {is} 2\n    {print} \"Sen gerçek Hedy'sin!\""
                story_text: "Şimdi `{and}` ve `{or}`'yı öğreneceğiz! İki ifadeyi birden kontrol etmek istiyorsanız, iki tane `{if}` kullanmak zorunda değilsiniz, bunun yerine `{and}` ve `{or}` kullanabilirsiniz.\n\nEğer `{and}` kullanırsanız, `{and}` nin sağındaki ve solundaki her iki ifadenin de doğru olması gerekir. Ayrıca `{or}` da kullanabiliriz. O zaman sadece bir ifadenin doğru olması gerekir."
                example_code: "```\nisim = {ask} 'adınız nedir?'\nyaş = {ask} 'yaşınız kaç?'\n{if} isim {is} 'Hedy' {and} yaş {is} 2\n    {print} \"Sen gerçek Hedy'sin!\"\n```\n"
    harry_potter:
        name: Harry Potter
        description: Harry Potter adventures
        default_save_name: Harry Potter
        levels:
            10:
                story_text: "### Exercise\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# kodunuzu buraya yazın'
    print_command:
        name: "{print}"
        description: yazdır komutuna giriş
        default_save_name: yazdır
        levels:
            1:
                story_text: "## yazdır komutu\n`{print}` komutunu kullanarak ekrana metin yazdırabilirsiniz.\n"
                story_text_2: "### Alıştırma\nHedy'de, her macerada alıştırmalar bulacaksınız. Bir alıştırma, yeni komutları ve kavramları uygulamanıza ve örnek kodlara kendi yorumunuzu katmanıza olanak tanır.\nBu alıştırmada pembe bir boşluk göreceksiniz. Kodun çalıştırılabilmesi için boş alanın yerine bir şey yazıp doldurmanız gerekiyor.\n\nBoş alana `{print}` komutunu girin ve ardından beş tane daha kod satırı ekleyin. Her satır bir `{print}` komutu ile başlamalıdır.\nİyi eğlenceler!\n"
                example_code: "```\n{print} Merhaba, programcı!\n{print} Hedy'ye hoş geldin!\n```\n"
                example_code_2: "```\n_ Merhaba!\n```\n"
                start_code: "{print} Hedy'ye hoş geldin!\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Önüm arkam sağım solum sobe, saklanmayan ebe!'"
                story_text: "Şimdi girintilemeyi biraz değiştireceğiz. Girintiye her ihtiyaç duyduğumuzda, girintiden önceki satırda `:` işaretine ihtiyacımız var.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Önüm arkam sağım solum sobe, saklanmayan ebe!'\n```\n"
            18:
                start_code: "isim = 'Hedy'\n{print}('Benim adım ', isim)"
                story_text: "Gerçek Python koduna ulaştık! Yani bu, bundan sonra `{print}` ve `{range}` ile beraber artık bir de parantez kullanmamız gerektiği anlamına geliyor.\nBu aynı zamanda İngilizce komutları kullandığınız sürece bu seviyedeki Hedy kodunu herhangi bir Python ortamında kullanabileceğiniz anlamına gelir. Şimdiye kadar kullanmadıysanız, bunu yapmak için komutlar menüsünden geçişi değiştirebilirsiniz."
                example_code: "```\n{print}('Merhaba!')\n{for} i {in} {range}(1, 10):\n    {print}('Bu, satır ', i)\n```\n"
                story_text_2: Birden fazla öğe yazdırmak istiyorsanız, bunları virgülle ayırmanız gerekir.
                example_code_2: "```\nsıcaklık = 25\n{print}('Hava dışarıda ', temperature, ' derece')\n```\n"
                story_text_3: Python kodunu elde etmek için yapmamız gereken son değişiklik `{ask}` ifadesini `{input}` olarak değiştirmektir.
                example_code_3: "```\n{print}('Benim adım Hedy!')\nisim = {input}('Senin adın ne?')\n{print}('Demek senin ismin ', name)\n```\n"
    ask_command:
        name: "{ask}"
        description: sor komutuna giriş
        default_save_name: ask_command
        levels:
            1:
                story_text: "## sor komutu\nArtık `{print}` komutunu kullanabildiğinize göre, bir sonraki komutu öğrenmeye hazırsınız: `{ask}`. `{ask}` komutunu kullanarak bir soru sorabilirsiniz. Şuna bir bakın:\n"
                example_code: "```\n{print} Merhaba!\n{ask} Senin adın ne?\n```\n"
                story_text_2: "## yankıla komutu \nEğer bilgisayarın cevabı size tekrar etmesini istiyorsanız, `{echo}` komutunu kullanabilirsiniz. Cevabın cümlenin sonunda yankılandığını unutmayın, yani bu örnek için merhaba'dan sonra.\n"
                story_text_3: "### Alıştırma\n`{ask}` ve `{echo}` komutlarını deneyin. İlk olarak, bu programı çalıştırmak için boşlukları doldurun.\nDaha sonra `{ask}` komutunu kullanarak 2 soru daha sorun, her `{ask}` komutundan sonra cevabı ekrana yazdırmak için bir `{echo}` kullanın.\n"
                example_code_2: "```\n{print} Merhaba!\n{ask} Senin adın ne?\n{echo} merhaba\n```\n"
                example_code_3: "```\n_ Nasılsın?\n_\n```\n"
                start_code: "{print} Merhaba!\n{ask} Senin adın ne?\n{echo} merhaba\n"
            2:
                story_text: "## sor komutu\nArtık kodlarımızda **değişkenleri** kullanabildiğimize göre, `{echo}` komutuna artık ihtiyacımız yok.\nSorularımızın cevaplarını saklamak için değişkenler kullanabiliriz ve bu şekilde kodlarımızda birden fazla sorunun cevabını kullanabiliriz.\nŞuna bir bakın:\n\nBu şekilde kodunuz etkileşimli hale geliyor!\n"
                example_code: "```\nisim {is} {ask} Senin adın ne?\n{print} Merhaba isim\nyaş {is} {ask} Kaç yaşındasın?\n{print} isim age yaşındadır.\n```\n"
                story_text_2: "### Alıştırma\nÖnceki sekmede `{is}` komutu ile değişkenleri ayarlama alıştırması yaptınız.\nEn az 3 değişken oluşturdunuz ve bunları bir yazdır komutu ile kullandınız.\nŞimdi, değişkenleri ayarlamak yerine, örneğimizde yaptığımız gibi değişkenleri etkileşimli hale getirmenizi istiyoruz.\n\nKodunuzu önceki sekmeden kopyalayın ve `{ask}` komutlarını kullanarak değişkenleri etkileşimli hale getirin.\n"
                example_code_2: "```\nfavori_hayvan {is} {ask} En sevdiğin hayvan hangisi?\n{print} En sevdiğim hayvan favori_hayvan\n```\n"
                start_code: "isim {is} {ask} Senin adın ne?\n{print} Merhaba isim\nyaş {is} {ask} Kaç yaşındasın?\n{print} name age yaşındadır."
    is_command:
        name: "{is}"
        description: eşit komutuna giriş
        default_save_name: is_command
        levels:
            2:
                story_text: "## Değişkenler\nBir kelimeyi `{is}` ile isimlendirebilirsiniz. Buna bir **değişken** denir. Bu örnekte isim adında bir değişken ile yaş adında bir değişken oluşturduk. Kodunuzun herhangi bir yerinde isim kelimesini kullanabilirsiniz ve Hedy bu kelimeyi değiştirilecektir, bunun gibi:\n"
                example_code: "```\nisim {is} Hedy\nyaş {is} 15\n{print} isim age yaşındadır\n```\n"
                story_text_2: "### Alıştırma\nKendi değişkenlerinizi oluşturma zamanı!\nÖrnek kodda `favori_hayvan` değişkeni ile bir örnek yaptık. Satır 1'de değişken ayarlandı ve satır 2'de değişkeni bir yazdır komutunda kullandık.\nÖncelikle, boşluklara en sevdiğiniz hayvanı doldurarak örneğimizi tamamlayın. Daha sonra bu kodlardan en az 3 tane daha kendiniz ekleyin. Bir değişken seçin ve bu değişkeni {is} komutu ile ayarlayın. Daha sonra tıpkı bizim yaptığımız gibi {print} komutu ile kullanın.\n"
                example_code_2: "```\nfavori_hayvan eşit _\n{print} En sevdiğim havyan favori_hayvan\n```\n"
                start_code: "isim {is} Hedy\nyaş {is} 15\n{print} name age yaşındadır"
            14:
                start_code: "yaş = {ask} 'Kaç yaşındasın?'\n{if} yaş < 13\n    {print} 'Sen benden daha gençsin!'\n{else}\n    {print} 'Sen benden daha yaşlısın!'"
                story_text: "Daha fazla yeni öğe öğrenmeye devam ediyoruz. Bunları matematikten zaten biliyor olabilirsiniz, `<` ve `>`.\n`<`, ilk sayının ikinciden küçük olup olmadığını kontrol eder, örneğin yaş `<` 12, yaşın 12'den küçük olup olmadığını kontrol eder.\nİlk sayının ikinciden küçük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `<=` kullanabilirsiniz, örneğin yaş `<=` 11.\n`>`, İlk sayının ikinciden büyük olup olmadığını kontrol eder, örneğin puan `>` 10, puan'ın 10'dan büyük olup olmadığını kontrol eder.\nİlk sayının ikinciden büyük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `>=` kullanabilirsiniz, örneğin puan `>=` 11.\nBu karşılaştırmaları aşağıdaki gibi bir `{if}` içinde kullanırsınız:\n"
                example_code: "```\nyaş = {ask} 'Kaç yaşındasın?'\n{if} yaş > 12\n    {print} 'Sen benden daha yaşlısın!'\n```\n"
                story_text_2: "Bu seviyeden itibaren, tam değer karşılaştırması istiyorsanız, iki eşit işareti kullanabilirsiniz. Çoğu programlama dili bunu yapar:\n"
                example_code_2: "```\nisim = {ask} 'Senin adın ne?'\n{if} isim == 'Hedy'\n    {print} 'Çok havalısın!'\n```\n"
                story_text_3: "Bir şeyin başka bir şeye eşit *olmadığını* `!=` kullanarak karşılaştırabilirsiniz:\n"
                example_code_3: "```\nisim = {ask} 'Senin adın ne?'\n{if} isim != 'Hedy'\n    {print} 'Sen Hedy değilsin.'\n```\n"
    random_command:
        name: "{random}"
        description: şurada rastgele komutuna giriş
        default_save_name: random_command
        levels:
            3:
                story_text: "## şurada rastgele\nBu seviyede `{is}` komutunu kullanarak bir liste oluşturabileceksiniz. Bilgisayarın bu listeden rastgele bir öğe seçmesine izin verebilirsiniz. Bunu `{at} {random}` ile yaparsınız.\n"
                example_code: "```\nhayvanlar {is} köpekler, kediler, kangurular\n{print} hayvanlar {at} {random}\n```\n"
                story_text_2: "`{at} {random}` komutunu cümle içinde de kullanabilirsiniz.\n"
                example_code_2: "```\nyemek {is} sandviç, bir dilim pizza, salata, dürüm\n{print} Öğle yemeğinde bir yemek {at} {random} yiyeceğim.\n```\n"
                start_code: "hayvanlar {is} köpek, kedi, kanguru\n{print} hayvanlar {at} {random}\n"
                story_text_3: "### Alıştırma\nBir kapı veya bir bavul seçtiğiniz ve içinde büyük bir ödül bulunan kendi oyun programınızı (televizyondakiler gibi) yapmak için `{at} {random}` komutunu deneyin!\nBunu yapabilir misiniz? İlk satırları sizin için örnek koda zaten koyduk.\n"
                example_code_3: "```\n{print} Büyük oyun gösterisi!\n{print} Önünüzde 3 bavul var...\nseçim {is} {ask} Hangi bavulu seçiyorsunuz?\nödüller {is} _\n_\n```\n"
            16:
                start_code: "meyve = ['elma', 'muz', 'kiraz']\n{print} meyve[rastgele]"
                story_text: "Şimdi Python yöntemiyle listeler yapacağız, bu listelerin etrafında köşeli parantezler olacak! Ayrıca önceki seviyelerde öğrendiğimiz gibi her öğenin etrafında tırnak işaretlerini koyuyoruz.\nKöşeli parantezleri listedeki bir yeri belirtmek için kullanırız. {at} {random} komutu bu bölümde artık kullanılamaz."
                example_code: "```\narkadaşlar = ['Ahmet', 'Betül', 'Ceyda']\nşanslı_sayılar = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} arkadaşlar[i] ' için şanslı sayı'\n    {print} şanslı_sayılar[i] ' sayısıdır' \n```\n"
    add_remove_command:
        name: "{add} {to} & {remove} {from}"
        description: ekle şuraya ve çıkar şuradan komutlarına giriş
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## ekle şuraya\nListeye `{add} {to}` komutu ile yeni öğeler ekleyebilirsiniz. Listeye bir öğe eklemek için sadece şunu yazın: `{add} penguen {to} hayvanlar` , ya da örnek koddaki gibi `{ask}` komutunu kullanabilirsiniz.\n"
                example_code: "```\nhayvanlar {is} köpek, kedi, kanguru\nsevilen {is} {ask} En sevdiğin hayvan hangisi?\n{add} sevilen {to_list} hayvanlar\n{print} Benim seçimim hayvanlar {at} {random}\n```\n"
                story_text_2: "## kaldır şuradan\nBir listeye öğe ekleyebiliyorsanız, elbette bunları listeden çıkarabilirsiniz de. Bu işlem `{remove} {from}` komutu ile yapılır.\n"
                example_code_2: "```\nhayvanlar {is} köpek, kedi, kanguru\nsevilmeyen {is} {ask} Hangi hayvanı sevmiyorsun?\n{remove} sevilmeyen {from} hayvanlar\n{print} Benim seçimim hayvanlar {at} {random}\n```\n"
                story_text_3: "### Alıştırma\nBu yeni komutları sanal restoranımızda deneyin. Oyuncunun istediği lezzeti listeye ekleyin ve alerjisi olduğu lezzetleri listeden çıkarın.\n"
                example_code_3: "```\n{print} Gizemli milkshake\nçeşitler {is} çilek, çikolata, vanilya\nbeklenti {is} {ask} Nasıl bir lezzet bekliyorsunuz?\n_\nalerjiler {is} {ask} Herhangi bir çeşide alerjiniz var mı?\n_\n{print} Size çeşitler {at} {random} milkshake hazırladık\n```\n"
                start_code: "hayvanlar {is} köpek, kedi, kanguru\nsevilen {is} {ask} En sevdiğin hayvan hangisi?\n{add} sevilen {to_list} hayvanlar\nsevilmeyen {is} {ask} Hangi hayvanı sevmiyorsun?\n{remove} sevilmeyen {from} hayvanlar\n{print} Benim seçtiğim bir hayvanlar {at} {random}"
    sleep_command:
        name: "{sleep}"
        description: uyku komutuna giriş
        default_save_name: sleep_command
        levels:
            2:
                story_text: "Bu seviyede kullanabileceğiniz bir diğer yeni komut, programınızı bir saniyeliğine duraklatan `{sleep}` komutudur. Eğer {sleep} komutunun arkasına bir sayı yazarsanız, program o kadar saniye duraklar.\n\n### Alıştırma\nBu yeni komutu, {sleep} komutunu en az 3 kez kullandığınız kendi kodunuzu oluşturarak uygulayın. Her {sleep} komutunda duraklama süresi farklı olsun.\n"
                example_code: "```\n{print} En sevdiğim renk...\n{sleep} 2\n{print} yeşil!\n```\n"
                start_code: "{print} En sevdiğim renk...\n{sleep} 2\n{print} yeşil!"
    if_command:
        name: "{if} & {else}"
        description: eğer komutuna giriş
        default_save_name: if_command
        levels:
            5:
                story_text: "## eğer... değilse....\n5. seviyede sizin için yeni bir şey var, `{if}`! `{if}` ile iki farklı seçenek arasında seçim yapabilirsiniz.\nBu kod, isim olarak Hedy girerseniz güzel, başka bir şey girerseniz böö! yazdırır.\n`{ask}` ve `{print}` hala 4. seviyede olduğu gibi çalışmaya devam ediyorlar.\n"
                example_code: "```\nisim {is} {ask} 'Senin adın ne?'\n{if} isim {is} Hedy {print} 'güzel' {else} {print} 'böö!'\n```\n"
                story_text_2: "Bazen `{if}` içeren kod gerçekten uzun olur ve satıra iyi sığmaz. <br> Ayrıca kodu iki satıra bölebilir, ikinci satırı `{else}` ile şu şekilde başlatabilirsiniz:\n"
                example_code_2: "```\nisim {is} {ask} 'senin adın ne?'\n{if} isim {is} Hedy {print} 'güzel'\n{else} {print} 'böö!'\n```\n"
                story_text_3: "### Alıştırma\n`{if}` ve `{else}` ile kendi kodunuzu oluşturmaya çalışın. İsterseniz örnek kodu kullanabilirsiniz.\n"
                example_code_3: "```\ncevap {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Harikasın!'\n_ _ 'Hayır, 2 + 2 = 4'\n```\n"
                start_code: "isim {is} {ask} 'senin adın ne?'\n{if} isim {is} Hedy {print} 'güzel'\n{else} {print} 'böö!'"
            8:
                start_code: "isim {is} {ask} 'Senin adın ne?'\n{if} isim {is} Hedy\n    {print} 'Hoşgeldin Hedy'\n    {print} 'Bilgisayarında oynayabilirsin!'\n"
                example_code: "```\nisim {is} {ask} 'Senin adın ne?'\n{if} isim {is} Hedy\n    {print} 'Hoşgeldin Hedy'\n    {print} 'Bilgisayarında oynayabilirsin!'\n```\n"
                story_text: "## eğer... değilse...\nBir `{repeat}` komutundan sonra bir kod satır bloğunu tekrarlamayı öğrendiniz.\nŞimdi artık bir {if} veya {else} komutundan sonra bloklar oluşturmak için girinti de kullanabilirsiniz.\nÖrnek koda göz atın.\n\n### Alıştırma\nÖrnek koda bir {else} komutu ekleyin. Girinti kullanarak bir satır bloğu oluşturun. Bunu her satırı 4 boşlukla başlatarak yaparsınız.\n"
    in_command:
        name: "{in}"
        description: içinde komutuna giriş
        default_save_name: in_command
        levels:
            5:
                story_text: "## Listeler\nBir şeyin bir listede olup olmadığını kontrol etmek istediğimizde, artık `{in}` komutunu kullanabiliriz.\nBu kod, yeşili veya sarıyı seçerseniz güzel, aksi takdirde eh işte yazdırır.\n"
                example_code: "```\ngüzel_renkler {is} yeşil, sarı\nfavori_renk {is} {ask} 'En sevdiğin renk nedir?'\n{if} favori_renk {in} güzel_renkler {print} 'güzel!'\n{else} {print} 'eh işte'\n```\n"
                story_text_2: "### Alıştırma\nBoşlukları öğrendiğiniz komutlarla doldurarak örnek kodu tamamlayın.\nKodu bitirdiğinizde, kendinize ait bir kod oluşturmaya çalışın ve kendi düşündüğünüz bir soruyu kullanın.\n"
                example_code_2: "```\nhayvanlar eşit köpek, inek, koyun\ncevap eşit sor 'En sevdiğin hayvan hangisi?'\n_ cevap _ hayvanlar _ 'Benimki de öyle!'\n_ _ 'En sevdiğim hayvanlar köpekler, inekler ve koyunlar'\n```\n"
                start_code: "güzel_renkler {is} yeşil, sarı\nfavori_renk {is} {ask} 'En sevdiğin renk nedir?'\n{if} favori_renk {in} güzel_renkler {print} 'güzel!'\n{else} {print} 'eh işte'"
    quotation_marks:
        name: "'tırnak işaretleri'"
        description: Tırnak işaretlerine giriş
        default_save_name: quotation_marks
        levels:
            4:
                story_text: "## 'Tırnak işaretleri'\n4. seviyede `{ask}` ve `{print}` artık biraz değişti.\nYazdırmak istediğiniz metni tırnak işaretleri arasına almalısınız.\nBu yararlıdır, çünkü artık istediğiniz tüm kelimeleri yazdırabilirsiniz. Ayrıca `{is}` ile bir şeyi saklamak için kullandığınız kelimeler de buna dahil.\nÇoğu programlama dilinde de yazdırırken tırnak işareti kullanılır, böylece gerçek programlamaya bir adım daha yaklaşmış oluruz!\n"
                story_text_2: "## Kısaltmalar\nÖnemli! Artık tırnak işareti kullandığımıza göre, Hedy'nin veya TC'de gibi kısaltmalar için kesme işareti kullandığınızda Hedy'nin kafasının karışacağını unutmayın.\nBu kesme işaretlerini kaldırdığınızdan ve yazım şeklini \"Hedy nin\" veya \"TC de\" olarak değiştirdiğinizden emin olun. (Tek tırnak için şimdilik başka çözümümüz yok).\nKesme işaretlerinin yanlış kullanım şeklini görmek için örnek koda göz atın.\n"
                example_code: "```\n{print} 'Şu andan itibaren tırnak işareti kullanmanız gerekiyor!'\ncevap {is} {ask} 'Bundan sonra ne kullanmamız gerekiyor?'\n{print} 'Kullanmamız gereken ' cevap\n```\n"
                example_code_2: "```\n_ Kesme işaretlerini kullanmanın yanlış yolu budur _\n{print} 'Ayşe'nin çocuklarına bakıyorum.'\n{print} 'Çocuklarla oyun'dan daha eğlenceli ne olabilir ki?'\n```\n"
                start_code: "{print} 'Şu andan itibaren tırnak işareti kullanmanız gerekiyor!'\ncevap {is} {ask} 'Bundan sonra ne kullanmamız gerekiyor?'\n{print} 'Kullanmamız gereken ' cevap"
            12:
                story_text: "**Tüm metinlerin tırnak içinde olması gerekir**\nBu seviyeden itibaren bir metni `=` ile kaydederken tırnak işaretlerini de kullanmanız gerekecektir:\n"
                example_code: "```\nisim = 'Robot Hedy'\n{print} 'Merhaba ' isim\n```\n"
                story_text_2: "**Listelerdeki tüm öğelerin de tırnak işaretine ihtiyacı vardır**\nListeler metindir, bu nedenle onlarında tırnak işaretlerine ihtiyaçları vardır. Listedeki her bir öğenin tırnak işaretine sahip olduğuna dikkat edin.\nBu, örneğin 'Iron Man' gibi iki kelimeyi listeye 1 öğe olarak kaydetmenizi sağlar.\n"
                example_code_2: "```\nsüperkahramanlar = 'Spiderman', 'Batman', 'Iron Man'\n{print} süperkahramanlar {at} {random}\n```\n"
                story_text_3: "**`{if}` karşılaştırmalarından sonraki tüm metinler de tırnak işaretine ihtiyaç duyar**\n"
                example_code_3: "```\nisim = {ask} 'Senin adın ne?'\n{if} isim = 'Robot Hedy'\n    {print} 'Merhaba!'\n```\n"
                story_text_4: "**Sayıların tırnak işaretine ihtiyacı yoktur**\nSayılar için `=` içinde tırnak işareti kullanmazsınız:\n"
                example_code_4: "```\npuan = 25\n{print} 'Puanın ' puan\n```\n"
                start_code: "isim = {ask} 'Senin adın ne?'\n{if} isim = 'Robot Hedy'\n    {print} 'Merhaba!'"
    repeat_command_2:
        name: "{repeat} 2"
        description: tekrarla komutu 2
        default_save_name: repeat_command_2
        levels:
            7:
                story_text: "## tekrarla ile diğer komutlar ve değişkenler\n`{print}` komutu ile birlikte `{repeat}` komutunu yeterince uyguladınız, ancak `{repeat}` ile başka komutlar da kullanabileceğinizi biliyor muydunuz?\nBu örnek kodda `{repeat}` komutunun bir `{ask}`, `{if}` veya `{else}` komutuyla da kullanılabileceğini görebilirsiniz.\n"
                story_text_2: "`{repeat}` komutuyla yapabileceğiniz bir başka ilginç şey de, bir şeyin kaç kez tekrarlanacağını ayarlamak için, değişkenler kullanmaktır. Örnek kodda ilk olarak kişiye kaç yaşında olduğunu sorduğumuzu görebilirsiniz.\nArdından, 3. satırda, bu soru 'yaş' kez tekrarlanır. Yani `{repeat}` komutu ile 'yaş' değişkenini kullandık.\n"
                example_code: "```\n{repeat} 2 {times} cevap = {ask} 'Bir soruyu birden fazla kez sorabileceğinizi biliyor muydunuz?'\n{if} cevap {is} evet {repeat} 2 {times} {print} 'Demek bunu zaten biliyordunuz!'\n{else} {repeat} 3 {times} {print} 'Yeni bir şey daha öğrendiniz!'\n```\n"
                example_code_2: "```\n{print} 'Yaşasın! Bugün senin doğum günün!'\nyaş = {ask} 'Şimdi kaç yaşındasın?'\n{repeat} yaş {times} {print} 'Hey Çok Yaşa!'\n```\n"
                start_code: "{repeat} 2 {times} cevap = {ask} 'Bir soruyu birden fazla kez sorabileceğinizi biliyor muydunuz?'\n{if} cevap {is} evet {repeat} 2 {times} {print} 'Demek bunu zaten biliyordunuz'\n{else} {repeat} 3 {times} {print} 'Artık yeni bir şey öğrendiniz!'"
            8:
                story_text: "### blok mu değil mi?\nBu seviyede, hangi kod satırlarının blokta yer alması ve hangilerinin yer almaması gerektiğini dikkatlice düşünmeniz gerekir.\nÖrneğin: Eğer *çörek adam* şarkısını söylemek isterseniz, sadece 'çörek adam' satırının iki kez tekrarlanmasını istersiniz.\nBu, son satırın bloğa ait olmadığı için girintiyle başlamaması gerektiği anlamına gelir.\nSon satıra girinti ile başlarsanız şarkı yanlış olur.\n\n## Alıştırma\nÖrnek koddaki her satır bir boşlukla başlar. Boşlukları kaldırın ve çörek adam şarkısını yapmak için hangi satırın girintiye ihtiyacı olduğunu ve hangisinin olmadığını bulmaya çalışın.\n"
                example_code: "```\n_ {print} 'Kim tanır çörek adamı?'\n_ {repeat} 2 {times}\n_ {print} 'çörek adamı'\n_ {print} 'kim tanır çörek adamı, nerede yaşıyor?'\n```\n"
                start_code: "{repeat} 3 {times}\n    {print} 'Bu satır tekrarlanacaktır...'\n    {print} 'Bu da öyle...'\n{print} 'ama bu değil!'"
    for_command:
        name: "{for}"
        description: için komutu
        default_save_name: for
        levels:
            10:
                start_code: "hayvanlar {is} köpek, kedi, balık\n{for} hayvan {in} hayvanlar\n    {print} 'Benim sevdiğim ' hayvan"
                story_text: "## için\nBu seviyede `{for}` adında yeni bir kod öğreniyoruz. `{for}` ile bir liste oluşturabilir ve onun tüm öğelerini kullanabilirsiniz.\n`{for}`, `{repeat}` ve `{if}` gibi bir blok oluşturur, bu nedenle bloktaki tüm satırların 4 boşlukla başlaması gerekir."
                example_code: "```\nhayvanlar {is} köpek, kedi, balık\n{for} hayvan {in} hayvanlar\n    {print} 'Benim sevdiğim ' hayvan\n```\n"
            11:
                start_code: "{for} sayaç {in} {range} 1 {to} 5\n    {print} sayaç"
                story_text: "Bu seviyede, `{for}` in yeni bir şeklini ekliyoruz. Daha önceki seviyelerde `{for}` i bir liste ile kullanmıştık, ancak `{for}` ni sayılarla da kullanabiliriz.\nBunu bir değişken adı ve ardından `{in}` `{range}` ekleyerek yaparız. Daha sonra ilk başlanacak sayıyı, ardından `{to}`, ve sonra bitecek sayıyı yazıyoruz.\n\nNe olduğunu görmek için örneği deneyin! Bu seviyede de yine, `{for}` ifadelerinin altındaki satırlarda girintiler kullanmanız gerekecektir."
                example_code: "```\n{for} sayaç {in} {range} 1 {to} 5\n    {print} sayaç\n```\n"
    while_command:
        name: "{while}"
        description: iken
        default_save_name: while_command
        levels:
            15:
                start_code: "cevap = 0\n{while} cevap != 25\n    cevap = {ask} '5 kere 5 kaç eder?'\n{print} 'Doğru cevap verilmiştir'"
                story_text: "Yeni bir döngü çeşidi öğreneceğiz, `{while}` döngüsü! Deyim doğru olduğu sürece döngüye devam ediyoruz.\nBu yüzden döngü içinde değeri değiştirmeyi unutmayın.\n\nÖrnek kodda, doğru bir cevap verilene kadar devam ediyoruz.\nDoğru cevap hiç verilmezse, döngü asla sona ermez!"
                example_code: "```\ncevap = 0\n{while} cevap != 25\n    cevap = {ask} '5 kere 5 kaç eder?'\n{print} 'Doğru cevap verilmiştir'\n```\n"
    elif_command:
        name: "{elif}"
        description: değileğer
        default_save_name: değileğer
        levels:
            17:
                story_text: "Bu seviyede yeni bir komutu daha kullanabilirsiniz: `{elif}`. `{elif}`, `{else}` `{if}` komutunun kısaltmasıdır ve 3 (veya daha fazla!) seçenek yapmak istediğinizde buna ihtiyaç duyarsınız.\nŞuna bir bakın!\n"
                example_code: "```\nödüller = ['1 milyon lira', 'bir elmalı turta', 'hiçbir şey']\nsenin_ödülün = ödüller[{random}]\n{print} 'Kazandığın ödül ' senin_ödülün\n{if} senin_ödülün == '1 milyon lira' :\n    {print} 'Evet! Sen artık zenginsin!'\n{elif} senin_ödülün == 'bir elmalı turta' :\n    {print} 'Çok güzel, bir elmalı turta!'\n{else}:\n    {print} 'Bir dahaki sefere iyi şanslar...'\n```\n"
                start_code: "ödüller = ['1 milyon lira', 'bir elmalı turta', 'hiçbir şey']\nsenin_ödülün = ödüller[{random}]\n{print} 'Kazandığın ödül ' senin_ödülün\n{if} senin_ödülün == '1 milyon lira' :\n    {print} 'Evet! Sen artık zenginsin!'\n{elif} senin_ödülün == 'bir elmalı turta' :\n    {print} 'Çok güzel, bir elmalı turta!'\n{else}:\n    {print} 'Bir dahaki sefere iyi şanslar...'"
    rock_2:
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
        levels:
            2:
                story_text: "Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!\n\n### Exercise\nMake the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# kodunuzu buraya yazın"
    clear_command:
        name: '{clear}'
        description: temizle komutu
        default_save_name: clear_command
        levels:
            4:
                start_code: "{print} '3'\n{sleep}\n{clear}\n{print} '2'\n{sleep}\n{clear}\n{print} '1'\n{sleep}\n{clear}\n{print} 'SÜRPRİZ!'\n"
                story_text: "Yeni bir komut zamanı! `{clear}` ile çıktı ekranınızdaki tüm metni temizleyebilirsiniz. Bu şekilde ekranınızın çok fazla metinle dolmasını önleyebilirsiniz.\nDikkat! Eğer bir `{clear}` komutu kullanıyorsanız, bunun yanında bir `{sleep}` kullanmayı unutmayın. Aksi takdirde Hedy size okumaya zaman bırakmadan ekranınızı temizleyecektir!\n"
                example_code: "```\n{print} '3'\n{sleep}\n{clear}\n{print} '2'\n{sleep}\n{clear}\n{print} '1'\n{sleep}\n{clear}\n{print} 'SÜRPRİZ!'\n```\n"
