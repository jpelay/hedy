adventures:
    default:
        name: "Introducción"
        description: "Explicación del nivel"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ¡Bienvenido a  Hedy! En el nivel 1 puede empezar imprimiendo una historia.

                    Prueba el código por ti mismo con el botón verde 'Ejecutar código' bajo el bloque de programación.

                    ¿Preparado? ¡Entonces ve a la siguiente pestaña para aprender tu primer comando!
                start_code: "{print} hola mundo!"
            2:
                story_text: |
                    ¡Enhorabuena! Has alcanzado el nivel 2. ¡Espero que ya hayas hecho algunos códigos increíbles!
                    Quizás te has dado cuenta en el primer nivel que el comando `{echo}` sólo puede guardar un bit de información cada vez.
                    Por ejemplo en la aventura del restaurante, puedes imprimir lo que el cliente quiere comer, o que quiere de beber, pero no ambas en una misma frase.
                start_code: "{print} hola mundo!"
                example_code: "```\n{print} Bienvenido a Hedy's\n{ask} ¿Qué le gustaría comer?\n{echo} Así que quiere\n{ask} ¿qué le gustaría beber?\n{echo} Así que quiere\n```\n"
                story_text_2: "Si el jugador escribe una hamburguesa y un refresco, no puedes decir \"así que quieres una hamburguesa y un refresco\", pero tendrás que hacerlo en dos líneas separadas.\nTambién, el comando `{echo}` sólo imprime la palabra al final de la frase. Así que no puedes decir \"¡tu hamburguesa viene enseguida!\".\n\nEsos cambios en el nivel 2. En el nivel 2 aprenderás a trabajar con variables, que te permiten guardar varias partes de información e imprimirlas donde quieras.\n¡Así que vayamos a la siguiente pestaña!\n"
            3:
                story_text: |
                    En el nivel anterior has aprendido lo que es una variable y como puedes usarla para hacer tus aventuras más interactivas.
                    Pero... ¡eso no es lo único que puedes hacer con las variables! También puedes usar variables para hacer listas.
                    Incluso puedes dejar que Hedy elija una palabra al azar de una lista, ¡lo que te permite hacer juegos de verdad!
                    ¡Echa un vistazo a la siguiente pestaña!
                start_code: "{print} hola mundo!"
            4:
                story_text: |
                    En los niveles anteriores has estado practicando con variables, pero puede que te hayas encontrado con un problema.
                    Quizás hayas intentado ejecutar un código como este:

                    Por supuesto que querías mostrar

                    `Mi nombre es Sofía`

                    pero Hedy mostró

                    `Mi Sofía es Sofía`.

                    En este nivel el problema se soluciona usando comillas.
                start_code: "{print} 'Hola mundo'"
                example_code: "```\nnombre {is} Sofia\n{print} Mi nombre es nombre\n```\n"
            5:
                start_code: |-
                    nombre {is} {ask} '¿Cómo te llamas?'
                    {if} nombre {is} Hedy {print} '¡genial!' {else} {print} 'meh'
                story_text: |
                    En los niveles anteriores ya has aprendido a usar `{at} {random}` lo que hizo tus juegos distintos cada vez que ejecutaste el código.
                    Pero no es muy interactivo, el jugador no tiene ningún efecto en lo que ocurre en el juego.

                    En este nivel aprenderás el comando `{if}` , que te permite dar respuestas distintas en tu programa. De esta manera, por ejemplo, puedes programa una contraseña secreta para tu ordenador.
                    ¡Así que vayamos a la siguiente pestaña para el nuevo comando!
                example_code: "```\ncontraseña {is} {ask} '¿Cuál es la contraseña correcta?'\n```\n"
            6:
                start_code: "# pon tu código aquí"
                story_text: |
                    En el nivel anterior has practicado con `{ask}` y `{if}`. Por ejemplo puedes preguntar a los clientes qué les gustaría comer.
                    Lo que todavía no puedes hacer, es calcular el precio de la cena de todos.

                    El siguiente nivel te permitirá usar la suma, resta y multiplicación en tus programas. De esta manera podrás calcular los precios en tu restaurante, pero también podrás añadir un código secreto para dar un descuento a tus amigos y familiares.
                    \vOtra opción en el siguiente nivel es programar tu propio juego de matemáticas, para que tus hermanos pequeños practiquen sus multiplicaciones.
                    ¡Ve a verlo por tí mismo!
                example_code: "```\nprecio_comida {is} 0\nprecio_bebida {is} 0\nprecio_total {is} 0\n{print} 'Bienvenido a McHedy'\npedido {is} {ask} '¿Qué le gustaría comer?'\n{if} pedido {is} precio_comida hamburguesa {is} 5\n{if} pedido {is} precio_comida patatas fritas {is} 2\nbebida {is} {ask} '¿Qué le gustaría beber?'\n{if} bebida {is} precio_bebida agua {is} 0\ndemás precio_bebida {is} 3\nprecio_total {is} precio_comida + precio_bebida\n{print} 'Serán ' precio_total ' dólares, por favor'\n```\n"
            7:
                start_code: "{print} 'cumpleaños feliz'\n{print} 'cumpleaños feliz'\n{print} 'cumpleaños feliz querido Hedy'\n{print} 'cumpleaños feliz'\n"
                story_text: |
                    ¡Gran trabajo! Has alcanzado el siguiente nivel, lo que significa que has practicado con `{if}` and `{else}`. Te habrás dado cuenta de que tus códigos son cada vez más extensos.
                    Por ejemplo, si quieres programar 'Feliz Cumpleaños'.

                    Eso es mucho trabajo para básicamente las mismas palabrar una y otra vez. Por fortuna, en la siguiente pestaña aprenderás una solución con el comando `{repeat}`, que te permitirá repetir una línea de código varias veces.
                example_code: |
                    ```
                    {print} 'cumpleaños feliz'
                    {print} 'cumpleaños feliz'
                    {print} 'cumpleaños feliz querido Hedy'
                    {print} 'cumpleaños feliz'
                    ```
            8:
                start_code: |-
                    {print} '¡Vayamos a la siguiente pestaña!'
                story_text: |
                    Ahora has aprendido a como repetir una única línea de código. Esto es útil, pero no siempre es suficiente. A veces quieres repetir varias líneas de una vez.
                    Este nivel te permite agrupar un par de líneas de código, ¡y repetir ese pequeño grupo de líneas de una vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} '¡En la siguiente pestaña puedes repetir varias líneas de código a la vez!'
                    ```
            9:
                start_code: "{print} ¡Vayamos a la siguiente pestaña!"
                story_text: "¡Buen trabajo! ¡Has alcanzado otro nuevo nivel! En el nivel anterior aprendiste a usar varias líneas de código en un comando {if} o {repeat}. Pero todavía no puedes combinar los dos...\n\\v¡Buenas noticias! En este nivel se te permitirá poner un {if} dentro de otro {if}, o dentro de un comando {repeat}.\n"
                example_code: "```\nrespuesta = {ask} '¿Estás preparado para aprender algo nuevo?'\n{if} respuesta {is} sí\n    {print} '¡Genial! !Puedes aprender a usar el comando repetir en el comando si!'\n    {print} '!Hurra!'\n    {print} '!Hurra!'\n    {print} '!Hurra!'\n{else}\n    {print} 'Tal vez deberías practicar un poco más en el nivel anterior'\n"
            10:
                story_text: "¡Lo estás haciendo genial! En el nivel anterior todavía nos encontramos con un pequeño problema. Has aprendido a repetir líneas, pero ¿y si quisieras cambiar ligeramente la línea?\nPor ejemplo, si quieres cantar la canción 'si eres feliz y lo sabes'. Se parecería a algo como esto:\n\n\\vSi también quisieras el siguiente verso 'pisa con los pies', y el siguiente, y el siguiente, tendrías que cambiar por completo tu código.\nEn este nivel aprenderás el comando `{for}`, que te permite hacer una lista de acciones y repetir el código con otra acción !cada vez!\n¡Échale un vistazo!\n"
                start_code: "{print} '!Vayamos a la siguiente pestaña!'"
                example_code: "```\n{repeat} 2 {times}\n    {print} 'si eres feliz y lo sabes aplaude con tus manos'\n{print} 'si eres feliz y lo sabes y realmente quieres mostrarlo'\n{print} 'si eres feliz y lo sabes aplaude con tus manos'\n```\n"
            11:
                start_code: "{print} '!Vayamos a la siguiente pestaña!'"
                story_text: 'Has alcanzado el nivel 10, ¡lo estás haciendo genial! En los niveles superiores, Hedy se centra más y más en enseñarte el lenguaje de programación Python.

                    En Python no hay comando `{repeat}`, pere hay un comando que funciona como {repeat}.\v¿Tienes curiosidad de saber cómo se llama `{repeat}` en el idioma Python? Averígualo rápidamente.

                    '
            12:
                start_code: "{print} '¡Vayamos a la siguiente pestaña!'"
                story_text: "Quizá hayas intentado usar números decimales en aventura del restaurante. Si lo hiciste, te habrás dado cuenta que Hedy no todavía los entendía y siempre los redondeaba.\nDesde este nivel en adelante puedes usar números decimales.\n"
                example_code: "```\nhamburguesa = 5\nbebida = 2\ntotal = hamburguesa + bebida\nprint 'Has pedido una hamburguesa y una bebida'\nprint 'Eso cuesta ' total ' dólares por favor'\n```\n"
            13:
                start_code: "{print} '¡Vayamos al siguiente nivel!'"
                story_text: "En los niveles anteriores aprendiste cómo poner dos comandos `{if}` uno dentro de otro. Esto funciona bien, pero resulta en códigos extensos e inmanejables como este:\n\nEn este sistema tienes que poner el nombre de usuario correcto y la contraseña correcta.\nEn este nivel aprenderas el comando `{and}` que hará este código !mucho más corto y más entendible!\n¡Compruébalo!\n"
                example_code: "```\nnombre_usuario = {ask} '¿Cúal es tu nombre de usuario?'\ncontraseña = {ask} '¿Cúal es tu contraseña?'\n{if} nombre_usuario {is} 'Hedy'\n    {if} contraseña {is} 'secret'\n        {print} '¡Bienvenido Hedy!'\n    {else}\n        {print} 'Accesso denegado'\n{else}\n    {print} '¡Accesso denegado!'\n```\n"
            14:
                start_code: "{print} 'Vayamos a la siguiente pestaña'"
                story_text: "Con el programa de abajo puedes calcular si has aprobado una asignatura en el colegio (por lo tanto, una nota de seis o superior).\nPuedes ver que este código es extremadamente ineficiente, debido al código tan largo en la línea 5.\nTodas las diferentes notas de 1 a 5 tuvieron que programarse por separado. Afortunadamente para tí, en este nivel aprenderás como hacer esto sin este código !extremadamente largo!\n"
                example_code: "```\nprimer_curso = {ask} '¿Qué nota conseguiste en tu primer examen?'\nsegundo_curso = {ask} '¿Qué nota conseguiste en tu segundo examen?'\nsuma = primer_curso + segundo_curso\nmedia_curso = suma / 2\n{if} media_curso = 1 {or} media_curso = 2 {or} media_curso = 3 {or} media_curso = 4 {or} media_curso = 5\n    {print} '¡Oh no! Has suspendido la asignatura...'\n{else}\n    {print} '¡Genial! ¡Has aprobado la asignatura!'\n```\n"
            15:
                start_code: "{print} '¡Vayamos al siguiente nivel!'"
                story_text: "En el juego de abajo, se ha preparado un código para asegurarse que el jugador pueda jugar tanto como quieran...\nPero el código es ineficiente y tarda mucho. Además, ¿y si el jugador quiere jugar 101 partidas en vez de 100?\n¿No puede jugar hasta el infinito?\n!En este nivel aprenderás un comando que hará todo esto mucho más fácil!\n"
                example_code: "```\njuego {is} 'iniciado'\n{for} i {in} {range} 1 {to} 100\n    {if} juego {is} 'iniciado'\n        respuesta = {ask} '¿Quieres continuar?'\n        {if} respuesta {is} 'no'\n            juego {is} 'finalizado'\n        {if} respuesta {is} 'si'\n            {print} 'Ok continuemos'\n```\n"
            16:
                start_code: "{print} '¡Vayamos a la siguiente pestaña!'"
                story_text: "En este nivel creceremos un poco más hacia código real de Python. También aprenderás como hacer que dos listas coincidan.\nAsí puedes programar un código en el que el animal correcto coincide con el sonido correcto.\nPorque los dos código de abajo... !Obciamente no tienen sentido!\n"
                example_code: "```\nanimales = 'gallina', 'caballo', 'vaca'\nsonidos = 'cacarear', 'relinchar', 'mugir'\n{for} animal {in} animales\n    {print} 'Un ' animal ' dice ' sonidos {at} {random}\n```\nTambien puedes intentar hacer que funcione de esta manera, pero....\n```\nanimales = 'gallina', 'caballo', 'vaca'\nsonidos = 'cacarear', 'relinchar', 'mugir'\n{for} animal {in} animales\n    {for} sonido {in} sonidos\n        {print} 'Un ' animal ' dice ' sound\n```\n"
            17:
                start_code: "{print} '¡Vayamos al siguiente nivel!'"
                story_text: "Ya casi has alcanzado el último nivel de Hedy, ¡bien hecho! En este nivel aprenderás una forma real de Python de usar `{print}`.\n"
            18:
                start_code: "{print} ('¡¡¡Gran trabajo!!!')"
                story_text: "¡Enhorabuena! Has alcanzado el último nivel de Hedy! El código que has creado aqui se puede copiar a entornos reales de Python como replit o PyCharm, ¡y puedes continuar aprendiendo allí!\nSin embargo ten en cuenta que Python sólo puede leer comando en inglés, así que si has estado usando otros idiomas, ahora los tendrás que cambiar a inglés.\n"
    story:
        name: "Una historia"
        description: "Una historia"
        default_save_name: "Historia"
        levels:
            1:
                story_text: |
                    En el nivel 1 puedes crear una historia con un protagonista que tú elijas.

                    En la primera línea, usa `{ask}` y pregunta quién es el personaje principal de tu historia.

                    A continuación, utiliza `{print}` si necesitas mostrar una frase por pantalla.
                    Utiliza `{echo}` si quieres que el nombre de tu personaje aparezca al final de la frase.
                example_code: |
                    ```
                    {ask} El protagonista de esta historia es
                    {print} El protagonista camina por un bosque
                    {echo} Está bastante asustado
                    {print} Por todos lados se oyen extraños ruidos
                    {print} Él tiene miedo de que éste sea un bosque encantado
                    ```

                start_code: "{print} Aquí comienza tu historia"
                story_text_2: "### ejercicio\nAhora crea tu propia historia de un minimo de 6 lineas de codigo.\nEsta historia no puede ser la misma que el codigo de ejemplo.\nUtiliza minimo un comando `{ask}` y un comando `{echo}`.\nLo puedes hacer sobre cualquier tema que quieras.\nSi no se te ocurre ningun tema, usa uno de estos: en el cine, un partido o un día en el zoologico.\n"
            2:
                story_text: |
                    En el nivel 2 puedes hacer tu historia más divertida. El nombre de tu protagonista ahora puede estar en cualquier posición de la frase.

                    Para eso debes realizar un poquito más de programación. Debes dar primero un nombre al protagonista de tu historia.

                    Puedes luego usar este nombre en las oraciones que siguen.
                example_code: |-
                    ```
                    nombre {is} {ask} Cómo se llama el protagonista?
                    {print} nombre está caminando por el bosque
                    {print} nombre está bastante asustado
                    {print} Por todos lados se oyen extraños ruidos
                    {sleep}
                    {print} nombre tiene miedo de que éste sea un bosque encantado
                    ```

                start_code: "{print} Aquí viene tu historia"
                story_text_2: "### Ejercicio\nAhora es momento de añadir variables a la historia que hiciste en el nivel anterior.\nVe a 'Mis Programas', busca tu historia del nivel 1 y copia el codigo. Pega el código en tu pantalla de entrada en este nivel.\n\nEste código no funcionará en este nivel, porque no has usado variables aún.\nCambia los comandos `{ask}` y `{echo}` en tu código a la forma correcta que aprendiste en este nivel.\n\n**Extra** añade un comando {sleep} a tu codigo para crear tensión en la historia.\n"
            7:
                story_text: |
                    En una historia, a veces es necesario repetir algo. Por ejemplo, si alguien pide ayuda, o si se canta una canción.
                    Eso lo puedes hacer ahora en el nivel 6 usando `{repeat}`.

                    ### Desafío
                    Añade repetición a tu propia historia. En tu carpeta de historias guardadas, abre la del Nivel 6, 
                    encuentra una línea que contenga `{print}` y repítela.
                example_code: |
                    ```
                    {print} 'La princesa grita pidiendo ayuda'
                    {repeat} 5 {times} {print} '¡Ayuda!'
                    {print} 'Por qué nadie viene en mi ayuda?'
                    ```

                start_code: "{repeat} 5 {times} {print} 'Ayuda!'"
            5:
                story_text: |
                    En este nivel puedes programar distintos finales, lo que hará que tu historia sea incluso más divertida.
                    En el código de ejemplo puedes ver como hacer 2 finales diferentes.

                    ### Ejercicio 1
                    Escribe una nueva breve historia con al menos 6 líneas de código, sobre un tema de tu elección.
                    ¿Sin inspiración? Escoge uno de estos temas: un superhéroe, un día aburrido en la escuela, perdido en una isla desierta.

                    Ahora dale al jugador la oportunidad de escoger una final bueno o malo, como en el código de ejemplo.
                    Programa ambos finales.

                    ### Ejercicio 2
                    Copia la historia que has creado para tu propia aventura en los niveles anteriores.
                    Encuentra una forma de añadir por lo menos 2 comandos `{if}` y `{else}` a tu historia.
                    Esto puede ser un final bueno o malo, pero puedes intentar buscar otras formas de incorporar los comandos.
                example_code: |
                    ```
                    nombre {is} {ask} '¿Quién camina por el bosque?'
                    {print} nombre ' camina por el bosque'
                    {print} nombre ' encuentra un monstruo'
                    fín {is} {ask} '¿Quieres un final bueno o malo?'
                    {if} final {is} bueno {print} nombre ' coge la espada y el monstruo huye rápidamente'
                    {else} {print} 'El monstruo se come' nombre
                    ```
                start_code: "{print} '¡Aquí viene tu historia!'"
            4:
                story_text: |
                    Quizá te hayas dado cuenta de que aún hay un problema en los niveles anteriores. ¿Has intentado mostrar por pantalla una frase que contenga la palabra nombre? por ejemplo `{print}` mi nombre es nombre.
                    Puedes solucionarlo en este nivel. Debes utilizar comillas para todo lo que quieras mostrar por pantalla.

                    ### Ejercicio
                    Copia el código de ejemplo y complétalo añadiendo comillas en los huecos de las líneas 1 y 2.
                    Los huecos en blanco en las líneas 3 y 4 no se deben reemplazar por comillas, sino por un comando `{sleep}` y un `{clear}`. ¿Puedes hacerlo funcionar?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el código de tu historia. Haz funcionar el código en este nivel añadiendo comillas en los lugares correctos.
                    Recuerda: Las variables en tu propia historia tienen que estar fuera de las comillas. Como en la segunda línea del código de ejemplo. En esa línea el nombre de la variable esta situado fuera de las comillas.
                example_code: |
                    ```
                    nombre {is}{ask} _ ¿Cuál es tu nombre? _
                    {print}  _ El protagonista de esta historia es _ nombre
                    _
                    _
                    {print} nombre  _ ahora está caminando por el bosque _
                    {print} nombre _ está un poco asustado _
                    animales {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Él escucha el ruido de un _ animales {at} {random}
                    {print} nombre _ teme que éste sea un bosque encantado _
                    ```
                start_code: "{print} '¡Aquí viene tu historia!'"
            3:
                story_text: |
                    En el nivel 3 puedes hacer tu historia más divertida. Puedes usar aleatoriedad para cualquier monstruo, animal, o cualquier otro obstáculo, como este:
                start_code: "{print} Aquí viene tu historia"
                example_code: |
                    ```
                    animales {is} 🦔, 🐿, 🦉, 🦇
                    {print} Él ahora escucha el ruido de un animales {at} {random}
                    ```
                story_text_2: |
                    El comando `{add}` puede ser útil en tu historia.

                example_code_2: |
                    ```
                    {print} El escucha un sonido
                    animales {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} ¿Qué piensas qué es?
                    {add} animal {to_list} animales
                    {print} fue un animales {at} {random}
                    ```
                story_text_3: |
                    Este es un ejemplo del comando `{remove}` en tu historia

                    ### Desafío
                    Copia tu historia the los niveles anteriores en este nivel.
                    En este nivel aprendiste tres nuevos comandos `{at} {random}` , `{add} {to}` y `{remove} {from}`.
                    Añade nuevas lineas de codigo a tu historia para que todos los nuevos comandos estén por lo menos una vez en tu codigo.
                example_code_3: |
                    ```
                    {print} Su mochila se hizo muy pesada.
                    {print} Dentro de ella había una botella de agua, una linterna y un ladrillo
                    bolso {is} agua, linterna, ladrillo
                    botar {is} {ask} ¿Que artículo debería botar él?
                    {remove} botar {from} bolso
                    ```
            9:
                story_text: "En este nivel puedes usar los comandos `{if}` y `{repeat}`  dentro de otros comandos `{if}` y `{repeat}`.\nEsto te da muchas opciones y te ayuda a hacer tu historia mas interactiva.\n\n### Ejercicio 1\nTermina el codigo de forma que `{if}` funcione correctamente.\n\n### Ejercicio 2\nAgrega un comando `{if}` y `{else}` en la parte que Robin va a casa tambien.\n\n### Ejercicio 3\nVuelve a tu historia del nivel 8 y usa por lo menos dos `{if}` dentro de otro`{if}`\n"
                example_code: "```\n{print} 'Robin está caminando hacia el centro de la ciudad'\nlugar = {ask} '¿Robin va a ir a una tienda, o va a ir a casa?'\n{if} lugar {is} tienda\n    {print} 'Ella entra en la tienda.'\n    {print} 'Robin ve un libro que luce interesante'\n    libro = {ask} '¿Compra el libro Robin?'\n    {if} libro {is} si\n        {print} 'Robin compra el libro y se va a casa'\n    {else}\n        {print} 'Robin deja la tienda y se va a casa'\n{else}\n    {print} 'Robin se va a casa'\n```\n"
                start_code: '# coloca tú código aquí'
            12:
                story_text: "En este nivel puedes usar las comillas para almacenar múltiples palabras en una variable.\n\n### Ejercicio\n\nEncuentra una historia de un nivel anterior, cualquier nivel esta bien. Ahora asegurate que las comillas estén en el lugar correcto."
                example_code: "```\nnombre = 'La Reina de Inglaterra'\n{print} nombre ' estaba comiendo un pedazo de pastel, cuando de pronto...'\n```\n"
                start_code: '# coloca tu código aquí'
            8:
                story_text: "En este nivel puedes usar varias líneas en tus comandos `{if}`, ¡de esta manera puedes mejorar tu final malo o bueno!\n\n### Ejercicio 1\nEl código de ejemplo muestra dos finales diferentes; uno donde los personajes usan una máquina del tiempo y otro en el que no.\nCompleta los espacios en blanco con al menos una frase por cada final. \n**Extra** Haz que la historia dure más. ¿Qué ocurre en la historia? Puedes también añadir un segundo `{ask}` con diferentes opciones.\n\n### Ejercicio 2\nVuelve a tus historias guardadas, escoge la historia del nivel 5. Escribe un final bueno y uno malo de al menos tres líneas cada uno.\n"
                example_code: "```\n{print} '¡OH NO! ¡El T-rex se está acercando!'\nfinal = {ask} '¿Quieres un final triste o feliz?'\n{if} final {is} feliz\n    {print} 'Justo a tiempo Richard salta de vuelta en la máquina del tiempo!'\n    {print} _\n{else}\n    {print} '¡Oh, no! Richard es demasiado lento...\n    {print} _\n```\n"
                start_code: '# coloca tu código aquí'
            15:
                story_text: "Usar un bucle `{while}` puede hacer que tus historias sean más interesantes. Por ejemplo, puedes usar `{while} game {is} 'on'` para seguir jugando hasta que termine.\nO puedes usar `{while} sword {is} 'lost'` para evitar que el jugador continúe el juego hasta que encuentre algo.\n"
                example_code: "```\nllaves = 'perdidas'\n{print} 'Estás en tu jardín y perdiste tus llaves.'\n{print} '¿En donde las quieres buscar?'\n{print} '¨Puedes escoger: árbol, lecho de flores, roca, buzón'\n{while} llaves == 'perdidas'\n    lugar = {ask} '¿En donde quieres buscar?'\n    {if} lugar == 'lecho de flores'\n        {print} '¡Aquí están!'\n        keys = 'encontradas'\n    {else}\n        {print} 'Nope, no están en ' lugar\n{print} '¡Ahora puedes entrar en la casa'\n```\n"
                start_code: '# coloca tú código aquí'
            13:
                example_code: "```\n{print} 'Nuestra heroína está caminando en el bosque'\n{print} 'El camino se divide en dos'\ncamino = {ask} '¿Que camino debería escoger ella?'\narma={ask} 'Que arma escoge ella?'\n{if} camino {is} 'derecha' {and} arma {is} 'espada'\n    _\n```\n"
                story_text: "Usando los comandos `{and}` y `{or}` puedes hacer tus historias mas versátiles. Puedes hacer dos preguntas y responder a la combinación de respuestas.\n\n### Ejercicio 1\nMira el codigo de ejemplo de este nivel y completalo. Luego añade por lo menos 2 `{if}` con `{and}` o `{or}`.\n\n### Ejercicio 2\nEncuentra una historia de un nivel anterior y añade un `{and}` o `{or}`.\n"
                start_code: '# coloca tu código aquí'
            10:
                story_text: "En este nivel puedes usar el comando {for} en tu historia. De esta manera puedes programar fácilmente el libro para niños 'oso pardo, oso pardo, ¿qué ves?'\n\n### Ejercicio\n\nMira en <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> la historia </a> si no la conoces, asegurate que este igual que el libro.\n"
                example_code: "```\nanimales = _ , _ , _ \n{print} 'Oso pardo, Oso pardo'\n{print} '¿Qué ves?'\n```\n"
                start_code: '# coloca tu código aquí'
            18:
                story_text: "Vamos a hacer otra historia, pero ahora usaremos brackets con `{print}`.\n\n### Ejercicio 1\nCrea una historia de minimo 5 oraciones. No tienes que usar 'nombre' aún.\n"
                story_text_2: "### Ejercicio 2\nYa preparamos un `{input}` para tí. Primero usa la variable `name` en tu historia.\nLuego añade un segundo `{ask}` y usa esa variable tambien.\nTip: Recuerda las comas en el `{print}` entre texto y variables\n"
                example_code: "```\n{print}('Bienvenido a esta historia!')\n```\n"
                example_code_2: "```\nnombre = {input}(\"Cual es tu nombre?\")\n{print}('Bienvenido a esta historia!')\n```\n"
                start_code: '# Pon tu codigo aquí'
    songs:
        name: "¡Canta una canción!"
        description: "Imprime una canción"
        default_save_name: "Canción"
        levels:
            8:
                story_text: |
                    En un nivel anterior programamos la canción de los elefantes. Pero sin el comando `{repeat}` tuvimos que copiar los versos muchas veces.
                    En este nivel puedes repetir la canción 99 veces, simplemente añadiendo una línea.

                    ### Desafío
                    Añade el comando correcto en los espacios en blanco y sangra el código correctamente.
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, pásalo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    ```

                start_code: "# pon tu código aquí"
            7:
                story_text: |
                    Las canciones suelen tener mucha repetición. Por ejemplo... ¡Baby Shark! Si la cantas, dirás una y otra vez lo mismo:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Desafío
                    Puedes acortar Baby Shark con un `{repeat}`. Acaba el código rellenando los espacios vacíos.
                    **Extra** Tras Baby Shark puedes, por supuesto, programar otras canciones. ¡Hay muchas con repetición!
                    ¿Puedes pensar en alguna y programarla también?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
                start_code: "{print} 'Baby Shark'"
            6:
                story_text: |
                    En las canciones hay a menudo mucha repetición. Algunas veces la repetición se basa también en contar.
                    Por ejemplo, en la canción el elefante se balancea en la tela de una araña. Puedes programar esta canción con un poco de matemáticas.

                    Consejo: ¡Utiliza la función de "leer en voz alta" para que Hedy te cante la canción!

                    ### Desafío
                    Puedes repetir las líneas 2 a 7 cuantas veces quieras copiando las líneas.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, pásalo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    {sleep}
                    ```

                start_code: "{print} '¡Vamos a cantar!'"
                example_code_2: "```\nnúmero = 6\nnúmero = número - 1\n{print} número 'pequeños monos saltando en la cama'\n{print} 'Uno se cayó y se golpeó la cabeza'\n{print} 'Mamá llamó al doctor y el doctor dijo'\n{print} '¡NO MÁS MONOS SALTANDO EN LA CAMA!'\n{sleep}\n```\n"
                story_text_2: "Esta canción de niños cuenta desde 5 monos hasta un mono.\n¡Si copias las líneas 2 a 7 debajo del código, puedes cantar toda la canción!\n"
            12:
                example_code: "```\n_ acciones = 'aplaude', 'mueve los pies así', '¡grita hurra!'\n_ {for} accion {in} acciones\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'si estás feliz y lo sabes'\n_ {print} accion\n_ {print} 'Si en verdad estas contento tu sonrisa es el reflejo'\n_ {print} 'si estás feliz y lo sabes'\n_ {print} accion\n```\n"
                story_text: "En esta canción podemos hacer aún más fácil programar 'si eres feliz y lo sabes, aplaude'. Porque podemos poner todas las acciones en una variable, compruébalo:\n\n### Ejercicio\n¿Puedes añadir la cantidad correcta de sangría a cada línea para que la canción se reproduzca correctamente?\nNota: No todas las líneas necesitan sangría\n"
                start_code: '# pon tu código aquí'
            11:
                story_text: "En este nivel, podrás usar el comando `{for}` con `{range}` para crear canciones que utilizan cuentas, como cinco pequeños monitos.\n\n### Ejercicio 1\n¡Rellena los espacios y haz que el código funcione! Si no recuerdas la letra de la canción, buscala!\n\n### Ejercicio 2\nLa ultima linea de la cancion es diferente de las demás. Escribe esta linea dentro de `{for}`, y usa `{if}` para hacer que funcione correctamente.\n"
                example_code: "```\n_monos _ _ _ 5 _ 1\n    {print} i ' pequeños monitos saltando en la cama'\n    _\n```\n"
                start_code: '# pon tu código aquí'
            10:
                story_text: "Con `{for}` puedes hacer la canción completa de baby shark (incluyendo a todos los tiburones de la familia) en solo 6 lineas!\n\n### Ejercicio 1\nPuedes hacer el codigo para baby shark aún mas corto usando un comando `{for}`? Termina el codigo de ejemplo.\n"
                example_code: "```\nfamilia = bebé, mamá, papá, abuela, abuelo\n_ _ _ _ \n  {print} _\n```\n"
                start_code: '# pon tu código aquí'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Ejercicio 2\nEscribe la canción Cinco monitos saltando en la cama. Mira el texto si no lo recuerdas.\n\n**Extra** Escribe la canción Old MacDonald tenía una granja, y asegúrate que todos los animales hagan sonidos diferentes usando `{if}`.\n"
            16:
                story_text: "En este nivel puedes programar una canción como la del Viejo McDonald incluso más rápido. Puedes conectar el animal con el sonido correcto simplemente poniéndolos en el mismo lugar en la lista.\nEl Marinero Borracho también se puede hacer rápidamente en este nivel. Solo necesitas 8 líneas de código para toda la canción, ¡mira!\n"
                start_code: '# pon tu código aquí'
                example_code: "```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
            18:
                start_code: '# pon tu codigo aqui'
                story_text: "En el nivel 16 hizimos canciones usando listas. Sin embargo estos programas no funcionan bien en este nivel. [colons] del nivel 17 y los [brackets] del nivel 18 aún tienen que ser añadidas.\n\n### Ejercicio 1\nSe da la canción del Marinero borracho como ejemplo, pero todavía no funciona.\n¿Puedes asegurarte de que todo funciona de nuevo? Para ayudarte, hemos puesto _ en los lugares _some_ errores.\n\n### Ejercicio 2\nAhora también busca tu canción de Old MacDonald del nivel 16, y corrígela.\n"
                example_code: "```\nlines = ['Que hacemos con el marinero borracho, 'Afeita su vientre con una navaja oxidada', 'Ponganlo en un barco hasta que este sobrio']\n{for} linea {in} lineas _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ linea_\n    {print} 'temprano en la mañana'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Ella se levanta de un camino de heno'\n    {print} 'temprano en la mañana'\n```\n"
    turtle:
        name: "La tortuga"
        description: "Haz tu propio dibujo"
        default_save_name: "Tortuga"
        levels:
            1:
                story_text: |
                    En nivel 1 también puedes usar Hedy para dibujar. Combinando giros y líneas, ¡puede hacer un cuadrado o una escalera!

                    Usando `{forward}` dibujas una línea hacia adelante. El numero detrás del comando determina qué tan lejos caminará la tortuga. `{turn} {right}` gira un cuarto de vuelta en el sentido de las agujas del reloj, `{turn} {left}` gira en sentido contrario a las agujas del reloj.

                    Si quieres ir hacia atrás, puedes utilizar el comando `{forward}` pero con un número negativo. Por ejemplo `{forward} -100`

                    ### Ejercicio
                    Este es el principio de una pequeña escalera, ¿Puedes hacer 5 escalones más?
                example_code: |
                    ```
                    {forward} 50
                    {turn} {right}
                    {forward} 50
                    {turn} {left}
                    {forward} 50
                    ```


                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: |
                    En este nivel puedes utilizar variables para hacer tu tortuga interactiva. Por ejemplo, puedes preguntar al jugador cuantos pasos dará la tortuga.
                example_code: |
                    ```
                    respuesta {is} {ask} ¿Cuántos pasos debería dar la tortuga?
                    {forward} respuesta
                    ```



                start_code: |-
                    {print} ¡Carrera de tortugas!
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                story_text_2: "Además, en el nivel 1 la tortuga solo podía girar a la derecha o a la izquierda. ¡Qué aburrido!\nEn el nivel 2 la tortuga puede apuntar su nariz en todas las direcciones.\n\nUtiliza 90 para girar un cuarto. Lo llamamos grados, un giro completo son 360 grados.\n\n### Ejercicio\n¿Puedes hacer una figura con este código? ¿Quizá un triangulo o un círculo?\n"
                example_code_2: "```\n{print} Dibujando figuras\nangulo {is} 90\n{turn} angulo\n{forward} 25\n{turn} angulo\n{forward} 25\n```\n"
            8:
                story_text: |
                    Ahora que podemos repetir varias lineas, podemos hacer figuras mas facil.
                    Solo tenemos que poner el angulo una vez y usar la variable `{repeat}`.

                    ### Ejercicio 1
                    El codigo de ejemplo crea un cuadrado. Cambia el codigo para que cree otra figura, como un triangulo o un hexagono.
                    Esto requiere cambiar dos lineas de codigo.
                    Tip:Un circulo completo son 360 grados.

                    ### Ejercicio 2
                    Ahora crea un dibujo que consista en minimo 2 polígónos
                example_code: |
                    ```
                    ángulo = 90
                    {repeat} 4 {times}
                        {turn} ángulo
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Podemos mejorar el programa que dibuja diferentes figuras. Completa el código y ¡puedes dibujar cualquier polígono que te guste!
                example_code_2: |
                    ```
                    ángulos = {ask} '¿Cuántos ángulos debo dibujar?'
                    ángulo = 360 / figura
                    {repeat} figura {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    figura = {ask} '¿Cuántos ángulos debo dibujar?'
            6:
                story_text: |
                    En nivel 5 puede usar cálculos para dibujar diferentes figuras.
                    Es posible que haya aprendido en la escuela que girar un círculo completo es de 360 grados. Si no, ¡ahora ya lo sabes!
                    Es por eso que también usas 90 grados para un cuadrado. 360 dividido por 4 es 90.
                    Ahora que podemos hacer matemáticas con Hedy, ¡podemos dibujar todas las figuras que queramos!
                example_code: |
                    ```
                    ángulos = {ask} '¿Cuántos ángulos quieres?'
                    ángulo = 360 / ángulos
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    ```
                start_code: |-
                    {print} 'Dibujando figuras'
            5:
                story_text: |
                    En nivel 5 puede elegir con `{if}`. Por ejemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¿Quieres un cuadrado o un triángulo?'
                    {if} figura {is} triángulo ángulo {is} 120
                    {else} ángulo {is} 90
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¿Quieres un cuadrado o un triángulo?'
                    {if} figura {is} triángulo ángulo {is} 120 {else} ángulo {is} 90
                    {turn} ángulo
                    {forward} 25
                story_text_2: "### Ejercicio\nPon los numeros correctos en este codigo para hacerlo funcionar.\nDespues de hacer eso, puedes intentar añadir la opción al reves.\n\n**Extra** En vez de usar 'derecha' e 'izquierda', haz el programa otra vez usando norte, sur, este, oeste.\nDe esta manera podrás agregar mas direcciones como suroeste, noroeste, etc.\n"
                example_code_2: "```\ndireccion {is} {ask} 'Quieres ir a la izquierda, a la derecha o seguir derecho?'\n{if} direccion {is} derecha {turn} _\n{if} direccion {is} izquierda {turn} _\n{forward} 100\n```\n"
            4:
                story_text: |
                    En nivel 3 tienes que usar comillas con `{print}` y `{ask}`. ¡También al dibujar!
                example_code: |
                    ```
                    {print} _ Dibujando figuras _
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```

                start_code: |-
                    {print} 'Dibujando figuras'
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25

                story_text_2: "También puedes cambiar los colores de las líneas con el comando `{color}`. Mira el ejemplo.\nPuedes utilizar el comando `{color} {white}` para hacer lineas \"invisibles\". Puedes usar estas líneas blancas para mover la tortuga done quieras en la pantalla antes de empezar a dibujar.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            3:
                story_text: |
                    En este nivel, puedes utilizar `{at} {random}` con la tortuga que dibuja. Una elección aleatoria hace que la tortuga camine por un camino diferente cada vez.
                    Utiliza `{at} {random}` para elegir un valor de una lista.
                    ### Ejercicio
                    ¿Puedes copiar y pegar las líneas 2 y 3 para crear un camino más largo?
                example_code: |
                    ```
                    ángulos {is} 10, 50, 90, 150, 250
                    {turn} ángulos {at} {random}
                    {forward} 25
                    ```

                start_code: |-
                    angulo {is} 10, 50, 90, 150, 250
                    {turn} angulo {at} {random}
                    {forward} 25
            9:
                story_text: "Ahora que podemos usar un `{repeat}` dentro de otro `{repeat}`, podemos crear figuras más complejas\n\n### Ejercicio 1\nEste código crea tres triángulos negros, cámbialo a cinco cuadrados rosados.\n\n **Extra** Crea una figura de tu elección que consista de al menos dos tipos diferentes de formas.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# pon tu codigo aquí'
    dishes:
        name: "¿Platos?"
        description: "Usa la computadora para ver quien ah de lavar los platos"
        default_save_name: "Platos"
        levels:
            7:
                story_text: |
                    Con `{repeat}` puedes repetir partes del código. Puedes usarlo para calcular quién va a lavar los platos por varios días!
                    ### Ejercicio
                    Usa el comando de `{repeat}` para decidir quien debe lavar los platos toda la semana. ¡Cada espacio en blanco debe rellenarse con un comando o numero!
                    **Extra** ¿Puedes pensar en otras tareas para la casa? Adapta el código para que decida sobre tres tareas domésticas. !No te olvides mostrar de que tareas se tratan!
                example_code: |
                    ```
                    people = mamá, papá, Emma, Sofía
                    {repeat} _ _ {print} 'el lavaplatos es ' _
                    ```
                start_code: "{print} '¿Quien lavará los platos esta semana?'"
            6:
                story_text: |
                    ¿Todo el mundo lava los platos por igual? ¿Te parece justo? Puedes contarlo en este nivel.
                example_code: |
                    ```
                    personas = mamá, papá, Genésis, María
                    genesis_lava = 0
                    lavaplatos = personas {at} {random}
                    {print} 'El lavaplatos es ' lavaplatos
                    {if} lavaplatos {is} Genésis genesis_lava = genesis_lava + 1
                    {print} 'Genésis va a hacer los platos hoy ' genesis_lava 'veces'
                    ```

                    Ahora puedes copiar las líneas 3 a 5 unas cuantas veces (por ejemplo, 7 para toda la semana) para calcular para toda la semana otra vez. 
                    ¿Puedes hacer el código para toda la semana?
                start_code: "{print} '¿Quién lavará los platos?'"
                story_text_2: "Si tienes muy mala suerte, ¡el programa anterior puede que te elija para lavar los platos toda la semana! ¡Eso no es justo!\nPara crear un sistema mas justo puedes utilizar el comando `{remove}` para eliminar la persona elegida de la lista. De esta forma no tendrás que lavar los platos hasta que todos hayan hecho un turno.\n\n¡Lunes y martes ya están añadidos! ¿Puedes añadir el resto de la semana?\nY ¿puedes dar con una solución para cuando la lista esté vacía?\n"
                example_code_2: "```\npersonas = mamá, papá, Emma, Sofía\nlavavajillas = personas {at} {random}\n{print} 'El lunes los platos serán lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\nlavavajillas = personas {at} {random}\n{print} 'El martes los platos serán lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\n```\n"
            5:
                story_text: |
                    Usando el comando `{if}` ahora puedes hacer tu programa todavía más divertido. Ahora tu programa puede reaccionar de acuerdo a la elección de quien lavará los platos.
                    ### Ejercicio
                    ¿Puede hacer que tu programa imprima 'oh no' si es tu turno de lavar los platos, y '¡sí!' en caso contrario?
                    ¡No olvides las comillas!
                example_code: |
                    ```
                    personas {is} mamá, papá, Emma, Sofía
                    lavavajillas {is} personas {at} {random}
                    lavavajillas {is} Sofía {print} _ lástima que tengo que lavar los platos _
                    {print} 'afortunadamente no hay platos porque' _ 'ya los está lavando'
                    ```
                start_code: "{print} '¿Quien lavará los platos hoy?'"
            4:
                story_text: |
                    Usando comillas puedes hacer más interesante tu programa.

                    ### Ejercicio
                    Primero, rellena los espacios con los simbolos o comandos correctos para hacer que el programa de ejemplo funcione.
                    Lo entendiste? Increíble! Ahora copia tu codigo del nivel anterior y haz que funcione en este nivel añadiendo comillas en el lugar correcto.
                start_code: "{print} '¿Quien lavará los platos hoy?'"
                example_code: "```\npersonas {is} mamá, papá, Genésis, María\n{print} _ los platos serán hechos por _\n{sleep}\n{print} personas {at} _\n```\n"
            3:
                story_text: |
                    ¿Tienes en tu casa discusiones interminables sobre quien ha de lavar los platos hoy, o quien tiene que limpiar la caja del gato?
                    Ahora puedes dejar que la computadora elija honestamente a quien debe hacerlo. ¡Puedes programar esto ahora en este nivel!
                example_code: |
                    ```
                    personas {is} mamá, papá, Emma, Sofía
                    {print} personas {at} {random} tiene que lavar los platos
                    ```
                start_code: "{print} ¿Quien lavará los platos hoy?"
                story_text_2: "### Ejercicio\nHaz tu propia version del programa. Primero haz una lista de los miembros de tu familia.\nLuego piensa en una tarea que tenga que ser hecha, y deja que la computadora decida quien debe hacer la tarea con el comando `{at} {random}`.\n\n**Extra** ¿No quieres lavar los platos por ti mismo? Hackea el programa quitando tu nombre de la lista con `{remove}``{from}`.\n"
            10:
                example_code: "```\ndías = Lunes, Martes, Miércoles, Jueves, Viernes, Sábado, Domingo\nnombres = mamá, papá, Emma, Sofía\n{for} día {in} días\n    {print} nombres {at} {random} ' Hará los platos el ' día\n```\n"
                story_text: "En este nivel puedes hacer un horario de lavado de platos de forma fácil.\n\n### Ejercicio\nAgrega una tarea secundaria, como aspirar o planchar, y asegúrate que también esté dividida para toda la semana.\n<br>**Extra** El programa no es justo, puedes tener mala suerte y lavar toda la semana. ¿Como puedes hacer el programa más justo?\n"
                start_code: '# pon tu código aquí'
    dice:
        name: "Dados"
        description: "Crea tu propio juego de dados"
        default_save_name: "Dados"
        levels:
            7:
                story_text: |
                    Puedes hacer un dado otra vez en este nivel. Con el código `{repeat}` puedes tirar fácilmente una mano entera de dados.

                    ### Ejercicio
                    ¡Intenta terminar el código de ejemplo!  **Extra** Piensa en un juego que conozcas que tenga un dado y prográmalo usando `{repeat}`.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: "{print} '¿Qué indicará el dado esta vez?'"
            6:
                story_text: |
                    Puedes hacer un dado de gusanito otra vez en este nivel, pero ahora también puedes calcular cuantos puntos han sido tirados.
                    Puedes saber que el gusano cuenta como cinco puntos para los gusanitos. Ahora cada vez que lances el dado puedes calcular inmediatamente cuantos puntos haz tirado.
                    Este es código para calcular los puntos para un dado:

                    ### Ejercicio
                    ¿Puedes hacer que el código obtenga la puntuación total por 8 dados? Para hacer eso tienes que cortar y copiar algunas líneas de código.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, lombriz
                    puntos = 0
                    tirada = opciones {at} {random}
                    {print} 'tú lanzaste ' tirada
                    {if} tirada {is} lombriz puntos = puntos + 5 {else} puntos = puntos + tirada
                    {print} 'esos son ' puntos ' puntos'
                    ```

                start_code: "{print} '¿Qué salió esta vez?'"
                example_code_2: "\n    ¿Pudiste calcular la puntuación para 8 dados? Eso necesitó que copiaras y pegaras mucho, ¿verdad? ¡Vamos a hacerlo más fácil en el nivel 7!\n"
            5:
                story_text: |
                    Vamos a añadir los comandos `{if}` y `{else}` a nuestros dados!

                    ### Ejercicio
                    Completa el codigo de ejemplo para que diga "Ya puedes dejar de lanzar" una vez que lanzes un gusano. Debería decir "Debes lanzarlo otra vez" si no has lanzado nada mas.
                    **Extra** Tal vez quieras recrear una muerte de un juego totalmente diferente. Tambien esta bien! Luego haz tu propia reacción, por ejemplo, 'Si!' para 6 y 'Lastima!' para algo mas.
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, lombriz
                    tirada {is} opciones {at}{random}
                    {print} 'haz tirado ' opciones
                    _ lanzar{is} lombriz {print} 'Puedes dejar de tirar los dados' 
                    _ {print} '!Debes tirar los dados otra vez!'
                    ```

                start_code: "{print} '¿Qué salió esta vez?'"
            4:
                story_text: |
                    En este nivel podemos crear dados. Pero en esta ocasión puedes intentarlo por ti mismo, sin un codigo de ejemplo!

                    ### Ejercicio
                    Haz tu propio dado en este nivel.
                    Nota: Si no tienes idea de como hacer dados. Mira tus dados del nivel anterior, pero no olvides las comillas.
                start_code: "{print} '¿Qué salió esta vez?'"
            3:
                story_text: |
                    En el nivel 2 puedes elegir elementos de una lista. De esa manera podemos hacer que se tiren los dados.
                    Dale una mirada a los juegos de mesa que tienes en tu casa.
                    Hay en tu casa juegos que usen un dado normal (¿o un dado especial)? Puedes crear los mismos dados con el siguiente programa.
                    Por ejemplo, los dados del juego Gusanitos, que tienen los números del 1 al 5, y en lugar de 6, un gusanito.

                    ![Dado con números del 1 al 5 y un gusanito en lugar del 6](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    {print} tu lanzas_ {at} {random}
                    ```

                start_code: "{print} ¿Qué salió esta vez?"
                example_code_2: "```\nopciones {is} _\n```\n"
                story_text_2: "### Ejercicio\nLos dados en el ejemplo de arriba son dados para un juego en específico. ¿Puedes hacer un dado normal?\n¿U otro dado especial para un juego diferente?\n"
            15:
                story_text: "En este juego tienes que tirar un 6 en el menor número de intentos posibles.\n"
                example_code: "```\nopciones = 1, 2, 3, 4, 5, 6\n{print} '¡Lanza un 6 lo más rápido que puedas!'\nlanzado = 0\nintentos = 0\n{while} lanzado != 6\n    lanzado = opciones {at} {random}\n    {print} 'Lanzaste un ' lanzado\n    intentos = intentos + 1\n{print} '¡Sí! Lanzaste un 6 en ' intentos ' intentos.'\n```\n"
                start_code: '# pon tú código aquí'
            10:
                story_text: "### Ejercicio\n¿Todo el mundo tarda mucho lanzando el dado? ¡En este nivel puedes dejar que Hedy lance todos los dados a la vez!\nCambia los nombres por nombres de tus amigos o familia, y completa el código para que cada uno pueda lanzarlos.\n"
                example_code: "```\njugadores = Ana, Juan, Pedro\nopciones = 1, 2, 3, 4, 5, 6\n_ _ _ _\n    {print} jugador ' tiró un ' opciones {at} {random}\n    {sleep}\n```\n"
                start_code: '# Coloca tu código aquí'
    pressit:
        name: Presiónalo
        description: ¡Intenta vincular una tecla del teclado a un comando!
        default_save_name: Presionado
        levels:
            5:
                story_text: |
                    ¡En este nivel hay otra nueva palabra clave: `{pressed}`!
                    Con `{pressed}` puedes usar las teclas de tu teclado para controlar qué líneas se usarán.

                    ### Desafío
                    Mira el ejemplo y agrega una línea más de código que reaccione al presionar una tecla.

                example_code: |
                    ```
                    {print} '¿Quieres un final bueno (g) o malo (b)?'
                    {if} g {is} {pressed} {print} 'Vivieron felices para siempre ❤'
                    {else} {print} 'El príncipe fue comido por un hipopótamo 😭'
                    ```
                story_text_2: |
                    También puedes enlazar los comandos de la tortuga a teclas del teclado.

                    ### Desafío
                    Copia las líneas varias veces para que así puedas hacer un dibujo más grande.

                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: "# pon tu código aquí"
            7:
                story_text: |
                    Ahora que ya has aprendido acerca de `{repeat}`, podemos presionar las teclas múltiples veces.
                    Puedes usarlo para hacer que la tortuga camine hacia adelante y gire.

                    ### Ejercicio
                    El código que viste en el nivel 5 solamente comprueba la tecla una sola vez. Copia el código de ejemplo y agregále un `{repeat}`, así podrás presionar la tecla múltiples veces.
                    Usa este código para dibujar algo bonito.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: "# pon tu código aquí"
            9:
                story_text: |
                    Ahora que sabes como combinar sentencias, puedes crear una herramienta de mecanografía con `{pressed}`

                    ### Ejercicio
                    Completa el código. Cada vez se elegirá una letra al azar, que deberás pulsar. Obtienes un punto cuando presionas la tecla correcta, y una deducción de dos puntos cuando presionas una tecla equivocada.
                    **Extra** Limpia la pantalla tras cada letra, y muestra al usuario cuántos puntos han obtenido.
                example_code: |
                    ```
                    puntos = 0
                    letras = a, b, c, d, e
                    {repeat} 10 {times}
                        letra = _ _ _
                        {print} 'Presiona la letra ' letra
                        {if} letra {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: "# place your code here"
    rock:
        name: "Piedra, papel o tijera"
        description: "Crea tu propio juego de piedra, papel y tijera"
        default_save_name: "Piedra_2"
        levels:
            1:
                story_text: |
                    En el nivel 1 comenzamos el juego de piedra, papel o tijera.

                    Con `{ask}` puedes tomar una opción, y con `{echo}` puedes repetir la opción elegida.
                example_code: |
                    ```
                    {print} ¿Qué eliges?
                    {ask} elige piedra, papel o tijera
                    {echo} has elegido:
                    ```

                start_code: "{print} ¡Bienvenide a tu propio piedra, papel o tijera!\n{ask} ?Que escoges?\n"
                story_text_2: "### Ejercicio\nEn lugar de usar palabras, puedes también usar emojis: ✊✋✌\n¿Puedes hacer el código usando emojis?\n"
                example_code_2: "```\n{print} ¿Qué escoges?\n{ask} escoge _\n{echo} tu elección fue\n```\n"
            5:
                story_text: |
                    En este nivel podemos determinar si es un empate o no. Para ello necesitas el nuevo código `{if}`.

                    ### Ejercicio
                    Completa el código rellenando los huecos en blanco:
                    * Deja que el ordenador elija un opción al azar
                    * Pregunta al jugador qué quieren elegir
                    * Rellena las variables correctas en las líneas 4 y 5
                    * Completa la línea 6 para que Hedy pueda comprobar si es un empate o no.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijeras
                    opción_ordenador {is} _
                    opción {is} _
                    {print} 'Elegiste ' _
                    {print} 'El ordenador eligió ' _
                    {if} _ {is} _ {print} '¡empate!' {else} {print} 'no hay empate'
                    ```

                    Rellena el código correcto en los huecos en blanco para ver si es un empate.

                start_code: "{print} 'Bienvenide a tu propio piedra, papel o tijera!'"
            4:
                story_text: |
                    En este nivel podemos programar el juego de piedra, papel, tijera. Pero si quieres añadir texto, aquí también tienes que usar comillas.
                    ### Ejercicio
                    Copia el código del nivel anterior y haz que funcione usando comillas después de cada comando `{print}` o `{ask}`.
                start_code: "{print} 'Bienvenide a tu propio piedra, papel o tijera!'"
            3:
                story_text: |
                    ¡Puedes usar el comando `{at} {random}` para dejar que el ordenador elija piedra, papel o tijeras!

                    ### Ejercicio
                    Completa el código usando el comando `{at} {random}`.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} opciones _
                    ```


                start_code: "{print} ¡Bienvenide a tu propio piedra papel o tijera!"
                story_text_2: "**Extra** Haz un juego de dos jugadores. Lo primero, pregunta a los dos jugadores que pongan sus nombres. Después, deja que el ordenador elija aleatoriamente sus opciones.\n"
                example_code_2: "```\nopciones {is} piedra, papel o tijera\njugador_1 {is} {ask} Nombre del jugador 1:\n_\n```\n"
            10:
                story_text: "### Ejercicio\nEn los niveles anteriores hiciste tu propio juego de piedra, papel, tijeras. ¿Puedes completar el código y usar el comando {for} adecuadamente para hacer que el juego funcione?\n"
                example_code: "```\nopciones = _\njugadores = _\n{for} _\n```\n"
                start_code: '# pon tu código aquí'
            2:
                story_text: "En este nivel puedes practicar usando las variables, ¡así puedes hacer un juego de piedra, papel o tijeras en el próximo nivel!\n### Ejercicio\nCompleta el código poniendo la **variable** en los huecos en blanco.\nEste juego no es muy interactivo, ¡pero no te preocupes! !En la siguiente pestaña aprenderás como usar las variables con el comando `{ask}` para hacer tu juego interactivo!\n"
                example_code: "```\nopción es piedra\n{print} Yo elijo _\n```\n"
                start_code: '# pon tu codigo aquí'
            15:
                story_text: "¡Juega hazta que le ganes a la computadora! Pero primero termina el código de ejemplo...\n"
                example_code: "```\nganó = 'no'\nopciones = 'piedra', 'papel', 'tijeras'\n{while} ganó == 'no'\n    tu_opcion = {ask} '¿Que escoges?'\n    opcion_computadora = opciones {at} {random}\n    {print} 'Escogiste ' tu_opcion\n    {print} 'La computadora escogió ' opcion_computadora\n    {if} opcion_computadora == tu_opcion\n        {print} '¡Empate!'\n    {if} opcion_computadora == 'roca' {and} tu_opcion == 'tijera'\n        {print} '¡Perdiste!'\n    {if} opcion_computadora == 'roca' {and} tu_opcion == 'papel'\n        {print} '¡Ganaste!'\n        ganó = 'sí'\n_\n```\n"
                start_code: '# pon tu código aquí'
            9:
                story_text: "En este nivel puedes programar el juego completo de piedra, papel, tijeras anidando los comandos `{if}`. \n\n### Ejercicio\n¿Puedes completar el código? El programa debe decir quien ha ganado para cada combinación.\n\n**Extra** ¿Quieres jugar más de una partida? Amplia el código para que puedas jugar varias rondas. Incluso puedes usar un `{ask}` para preguntar al usuario cuantas rondas quieren jugar.\n"
                example_code: "```\nopciones {is} piedra, papel, tijera\ntu_opción {is} {ask} '¿Que escoges?'\n{print} 'Escogiste ' tu_opción\nopción_computadora {is} opciones {at} {random}\n{print} 'La computadora escogió ' opción_computadora\n{if} opción_computadora {is} tu_opción\n    {print} 'Empate'\n{if} opción_computadora {is} piedra\n    {if} tu_opción {is} papel\n        {print} '¡Ganaste!'\n    {if} tu_opción {is} tijera\n        {print} '¡Perdiste!'\n# termina este código\n```\n"
                start_code: '# pon tu código aquí'
            13:
                example_code: "```\nopciones = 'piedra', 'papel', 'tijera'\ntu_opcion = {ask} '¿Qué quieres escoger?'\nopcion_computadora = opciones {at} {random}\n{print} 'Escogiste ' tu_opcion\n{print} 'La computadora escoge ' opcion_computadora\n{if} opcion_computadora {is} tu_opcion\n    {print} 'Empate'\n{if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'papel'\n    {print} 'You win!'\n{if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'tijera'\n    {print} '¡La computadora ganó!'\n_\n```\n"
                story_text: "¡Con el comando `{and}` puedes reducir tu código del juego de piedra, papel o tijera! Mira el ejemplo de abajo e intenta terminarlo.\n\n### Ejercicio\nCompleta tu código de manera que siempre se elija un ganador. Ejecuta tu código un par de veces para verificar que siempre se muestra un ganador.\n"
                start_code: '# pon tú código aquí'
    calculator:
        name: "Calculadora"
        description: "Haz una calculadora"
        default_save_name: "Calculadora"
        levels:
            9:
                story_text: |
                    En el nivel 6 creaste una calculadora, en este nivel puedes ampliar el código para que haga varias preguntas.

                    ### Ejercicio 1
                    ¿Puedes completar la línea 1' para hacer que el programa funcione?

                    ### Ejercicio 2
                    Dale al jugador información cuando introduzcan una pregunta acertada o errónea. Para conseguir eso, amplía tu programa con un `{else}`.
                example_code: |
                    ```
                    puntuación = 0
                    {repeat} 10 {times}
                        números = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        número1 = números {at} {random}
                        número2 = números {at} {random}
                        respuesta_correcta = numero1 * numero2
                        {print} '¿Cuánto es 'número1' multiplicado por 'número2'?'
                        respuesta = {ask} 'Escriba su respuesta aquí...'
                        {print} 'Tu respuesta es' respuesta
                        {if}_{is}_ 
                            puntuación = puntuación + 1
                    {print} '¡Buen trabajo! Tu puntuación es... 'puntuación' sobre 10!'
                    ```
                start_code: "{print} '¡Bienvenido a esta calculadora!'"
            6:
                story_text: |
                    Ahora que puedes calcular, ¡puedes hacer una calculadora!
                example_code: |
                    ```
                    numero_1 {is} {ask} 'Llena el primer número:'
                    numero_2 {is} {ask} 'Llena el segundo número:'
                    respuesta_correcta = numero_1 * numero_2
                    {print} numero_1 ' por ' numero_2 ' is ' respuesta_correcta
                    ```
                story_text_2: |
                    ### Ejercicio
                    La calcula va a ser capaz de calcular las respuestas por ti, pero también puedes hacer un programa para probar tus propias habilidades matemáticas, así:
                    ¡Rellena los espacios para completar el código!
                example_code_2: |
                    ```
                    respuesta_correcta = 11 * 27
                    respuesta = {ask} '¿Cuanto es 11 por 27?'
                    {if} respuesta {is} _ {print} '¡Buen trabajo!'
                    {else} {print} '¡Incorrecto! Era ' _
                    ```
                start_code: "{print} '¡Bienvenide a tu propia calculadora!'"
                story_text_3: "\n    **Extra** También puedes dejar que el ordenador haga sumas aleatorias por sí mismo usando random.\n\n    Así es como eliges un número de tablas para practicar, y desde ahí siempre consigues una suma diferente:\n"
            14:
                story_text: "En este nivel puedes programar el juego 'Adivina el número'\n"
                example_code: "```\n{print} 'Adivina el número'\nnúmeros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnúmero = números {at} {random}\njuego = 'en marcha'\n{for} i {in} {range} 1 {to} 10\n    {if} juego == 'en marcha'\n        intento = {ask} '¿Que número piensas que es?'\n        {if} intento > número\n            {print} '¡Muy alto!'\n        {if} intento < número\n            {print} '!Muy bajo!'\n        {if} intento == número\n            {print} '¡Ganaste!'\n            juego = 'terminó'\n```\n"
                start_code: '# pon tú código aquí'
            12:
                story_text: "En este nivel puedes hacer una calculadora que funcione para números decimales.\n\n### Ejercicio 1\nRellena los huecos en blanco para completar la calculadora. Recuerda usar un punto y no una coma para los números decimales.\n\n### Ejercicio 2\nCrea un nuevo programa de práctica de matemáticas, pero ahora usa números decimales.\nCrea una lista de números, elige dos a multiplicar y deja que el jugador responda.\n¡Y por supuesto tienes que validar la respuesta! **Extra** Aumenta la dificultad añadiendo vidas: Un jugador pierde una vida por cada respuesta incorrecta y tras fallar tres respuestas el juego termina.\n"
                example_code: "```\nnúmero1 = {ask} '¿Cuál es el primer número?'\nnúmero2 = {ask} '¿Cuál es el segundo número?'\nrespuesta = _\n{print} número1 ' más ' número2 ' es ' respuesta\n```\n"
                start_code: '# pon tu código aquí'
            10:
                story_text: "¡Este juego de cálculo te ayuda a practicar las tablas de multiplicar!\n### Ejercicio\n¿Puedes añadir más números a la lista para practicar las tablas de multiplicar hasta el 10?\n"
                example_code: "```\nnúmeros = 1, 2, 3\n{for} número1 {in} números\n    {for} número2 {in} números\n        respuesta = {ask} '¿Cuánto es ' número2 ' por ' número1 '?'\n        correcta = número1 * número2\n        {if} respuesta {is} correcta\n            {print} '¡Muy bien!'\n        {else}\n            {print} 'Te equivocas. La respuesta correcta es ' correcta\n```\n"
                start_code: '# pon tu código aquí'
            15:
                story_text: "Puedes agregar el bucle `{while}` al jugo de la calculadora que aprendiste a hacer en el nivel anterior.\nEsto asegura que el jugador no pueda continuar a la siguiente pregunta si se responde incorrectamente.\n"
                example_code: "```\npuntaje = 0\n{for} i {in} {range} 0 {to} 9\n    números = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    número1 = números {at} {random}\n    número2 = números {at} {random}\n    correcta = número1 * número2\n    respuesta = 0\n    {while} respuesta != correcta\n        {print} '¿Cuánto es ' número1 ' por ' número2 '?'\n        respuesta = {ask} 'Escribe tu respuesta:'\n        {print} 'Tu respuesta es ' respuesta\n    {print} '¡Buen trabajo!'\n{print} '¡Ganaste!'\n```\n"
                start_code: '# pon tu código aquí'
            11:
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 a 10\n    {print} i * number\n```\n"
                story_text: "Con `{for}` puedes simplificar programas de practica de las tablas de multiplicación.\n\n### Ejercicio 1\nMejora el codigo de ejemplo para que\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                start_code: '# pon tu codigo aquí'
            13:
                story_text: |2

                    ### Ejercicio 1
                    Hagamos el programa de practica un poco mas difícil. El jugador tiene que responder dos preguntas correctamente. Llena los espacios en blanco para completar el programa.

                    ### Ejercicio 2 Extra
                    A veces las calculadoras tienen múltiples respuestas correctas. Por ejemplo, 10 se puede dividir por 5 y 2. Entonces la pregunta '¿Qué numero divide el 10?' se puede responder con 2 y con 5.
                    Pide un cálculo que tenga múltiples respuestas correctas, pídele al jugador que lo responda y determine si es correcto usando`{or}`.
                    Vacía el campo de programación y crea tu propia solución.
                example_code: "```\nrespuesta1 = {ask} 'Cuanto es 10 por 7?'\nrespuesta2 = {ask} 'Cuanto es 6 por 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Escribe tu codigo aqui'
    restaurant:
        name: "Restaurante"
        description: "Crea tu propio restaurante virtual"
        default_save_name: "Restaurante"
        levels:
            1:
                story_text: |
                    En nivel 1 puedes hacer tu propio restaurante virtual y tomar los pedidos de tus invitados.
                example_code: |
                    ```
                    {print} Bienvenido al restaurante Hedy's
                    _ ¿Qué te gustaría pedir?
                    {echo} Así que te gustaría ordenar
                    {print} ¡Gracias por su pedido!
                    {print} ¡Está en camino!
                    ```
                start_code: "# pon tu código aquí"
                story_text_2: "### Ejercicio\nCopia el código de ejemplo en tu entrada en pantalla haciendo clic en el botón amarillo.\nPrimero, completa el comando correcto en los huecos en blanco para hacer que tu código funcione correctamente.\nDespués añade al menos 4 líneas más de código al programa del restaurante.\nPregunta a los clientes qué les gustaría beber y pregunta si quieren pagar en efectivo o con tarjeta.\nPor último, piensa una manera adecuada de despedirte de tus clientes.\n"
            2:
                story_text: |
                    En el nivel 2 puedes ampliar su restaurante usando variables. En el nivel 1 Hedy sólo podía `{echo}` la orden una vez y sólo podía recordar lo último que se le pidió.
                    ¡Ahora puedes usar variables y Hedy puede recordar tanto la comida como los ingredientes!

                start_code: "# pon tu código aquí"
                example_code: "```\n{print} ¡Bienvenido al restaurante Hedy's!\n{print} Hoy estamos sirviendo pizza o lasaña.\ncomida {is} {ask} ¿Qué te gustaría comer?\n{print} ¡Muy buena elección! ¡La comida es mi favorita!\ncobertura {is} {ask} ¿Te gustaría carne o verduras en eso?\n{print} ¡La comida con cobertura está en camino!\n```\n"
                story_text_2: "### Ejercicio\nCopia tu propio código del restaurante del nivel anterior a la pantalla de entrada de abajo.\nCorrige el código reemplazando los comandos `{ask}` y  `{echo}` y usando variables, como las que has aprendido en este nivel.\n\nAhora que tu código funciona otra vez, es hora de añadir más cosas.\nObserva la última línea de código del ejemplo: ¡Marchando la comida `{print}` con cobertura!\nEn esta línea se han usado 2 variables para crear un resumen de tu pedido.\nAhora añade tu propio resumen de la comida y las bebidas pedidas por el cliente.\n\n**Extra** Ahora que has aprendido a usar variables, puedes usar tantas variables como quieras en una línea de código. ¿Puedes añadir más variables a tu código, como comer aquí o para llevar, efectivo o tarjeta, con o sin pajita etc.?\n"
            11:
                story_text: |
                    Podemos usar el `{for}` con `{range}` para imprimir los pedidos de varios clientes de manera ordenada.

                    ### Ejercicio
                    Completa el código del restaurante, así podrás preguntar el pedido a varias personas. Imprime el número de pedido cada vez: 'Pedido 1', 'Pedido 2', etc.
                    ¿Estás seguro como va esto? Echa un vistazo a tu código del nivel 8.

                    **Extra** En el nivel 9 el restaurante también usó precios. ¡También puedes añadir eso aquí!
                start_code: "# pon tu código aquí"
                example_code: "```\n{print} '¡Bienvenido al restaurante Hedy!'\npersonas = {ask} '¿Para cuanta gente le gustaría pedir?'\n{print} 'Así que quieres pedir para ' personas ' personas.'\n{print} \"¡Vamos!\"\n```\n"
            10:
                story_text: |
                    Ene ste nivel aprenderás cómo preguntar los pedidos fácilmente para los diferentes platos.

                    ### Ejercicio 1
                    Completa el código con un `{ask}` en los espacios en blanco para que se le pregunte al cliente qué quieren comer en cada plato.
                start_code: "platos = apertivo, plato principal, postre"
                story_text_2: "### Ejercicio\nPor supuesto, ¡también puedes pedir para varias personas!\n¿Puedes agregar la cantidad correcta de sangría a cada línea para hacer funcionar el código correctamente?\nConsejo: algunas líneas no necesita tener sangría.\n"
                example_code: "```\nplatos = aperitivo, principal, postre\n{for} plato {in} platos\n    {print} '¿Cuál es su pedido de ' platos '?'\n    _ \n    _\n```\n"
                example_code_2: "```\n_ platos = apertivo, plato principal, postre\n_ nombres = Jesús, Génesis\n_ {for} nombre {in} nombres\n_ {for} plato {in} platos\n_ comida = {ask} '¿Que te gustaría ordenar como tu ' plato '?'\n_ {print} nombre ' ordenó ' comida ' como su ' plato\n```\n"
            7:
                story_text: |
                    En este nivel aprendiste a usar el comando `{repeat}` para repetir una línea de código un número de veces
                    Puedes usar eso en tu restaurante para `{ask}` a varias personas qué les gustaría ver.

                    ### Ejercicio
                    ¿Puedes acabar el código? Hedy necesita repetir esta pregunta tantas veces como gente haya. Así que si hay 5 personas, tiene que hacer la pregunta 5 veces.
                    **Extra** Amplía tu código con mas preguntas, por ejemplo sobre bebidas o salsas.

                start_code: "# pon tú código aquí"
                example_code: "```\n{print} '¡Bienvenido al restaurante Hedys!'\npersonas = {ask} '¿Cuántas personas se unen a nosotros hoy?'\n```\n"
            6:
                story_text: |
                    En este nivel puedes usar las matemáticas para calcular el precio total del pedido de tus clientes, que puede hacer tu restaurante virtual más realista.
                    Pero también puedes añadir más cosas a tu restaurante virtual, por ejemplo más platos.

                    ### Ejercicio
                    Puedes añadir más cosas a tu restaurante virtual. Por ejemplo, puedes...
                    - ¿preguntar cuanta gente va a venir y multiplicar el precio por esa cantidad?
                    - ¿añadir otro plato?
                    - ¿hacer un descuento cuando introduzcan un cupón de descuento (secreto)?
                    - ¿añadir un menú infantil?
                    - ¿piensa en otras cosas divertidas para añadir?

                start_code: "# pon tú código aquí"
                example_code: "Puedes hacer un código de restaurante simple, como este:\n```\n{print} 'Bienvenido al restaurante Casa Hedy'\n{print} 'Aquí está nuestro menú:'\n{print} 'Nuestros platos principales son pizza, lasaña o espaguetis'\nplato_principal = {ask} '¿Qué plato principal te gustaría?'\nprecio = 0\n{if} plato_principal {is} pizza precio = 10\n{if} plato_principal {is} lasaña precio = 12\n{if} plato_principal {is} espaguetis precio = 8\n{print} 'Has pedido ' plato_principal\n{print} 'Eso será ' precio ' dólares, por favor'\n{print} '¡Gracias, que aproveche!'\n```\n"
            5:
                story_text: |
                    ### Ejercicio
                    El código de ejemplo te enseña como podrías programar que te has quedado sin una opción del menú en tu restaurante.
                    Copia tu propio código del restaurante de los niveles anteriores. Crea un problema en tu restaurante y añade el código, como el código de ejemplo que hiciste.
                    Por ejemplo, también puedes quedarte sin una opción del menú, o no aceptar tarjetas de crédito, o que la máquina del helado esté rota.

                    **Extra** ¿Has programado el problema y las respuestas apropiadas? Entonces intenta añadir más comandos `{if}` y `{else}` a tu código.
                    ¡Intenta añadir un `{if}` tras cada comando`{ask}` en tu código para hacer el código tan interactivo como sea posible!

                start_code: "# pon tu código aquí"
                example_code: "```\nbebidas_disponibles {is} agua, limonada, refresco de cola, zumo de naranja\nbebida {is} {ask} '¿Qué quieres beber?'\n{if} bebida {in} bebidas_disponibles {print} '¡Una ' bebida 'de camino!'\n{else} {print} 'Lo siento, no servimos eso'\n```\n"
            4:
                story_text: |
                    En este nivel tienes que usar comillas cuando uses los comandos `{print}` o `{ask}`.

                    ### Ejercicio
                    ¡Añade las comillas a este código para hacerlo funcionar! Ten cuidado: las variables no deben ir entre comillas.
                    Después, usa el comando `{clear}` para sólo mostrar una línea cada vez en tu pantalla de salida.

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el código de tu restaurante. Haz que el código funcione en este nivel añadiendo comillas en el lugar correcto y añade varios comandos `{clear}`.
                start_code: "# pon tu código aquí"
                example_code: "```\n_ Agrega comillas a este código_\n{print} ¡Bienvenido al restaurante Hedys!\n{print} Hoy estamos sirviendo pizza o lasaña\ncomida {is} {ask} ¿Que te gustaría comer?\n{print} ¡Gran elección! ¡La comida es mi favorita!\ncobertura {is} {ask} ¿Te gustaría carne o vegetales encima de eso?\n{print} comida con cobertura está en camino!\nbebidas {is} {ask} ¿Que te gustaría para beber?\n{print} Gracias por tu orden.\n{print} Tu comida y bebidas ya van a estar!\n```\n"
            3:
                story_text: |
                    ¿Tienes problemas para decidir qué quieres cenar? ¡Puedes dejar que Hedy elija por ti!
                    Simplemente agregue listas de sus favoritos (o menos favorito) comidas y Hedy puede elegir al azar su cena.
                    También puedes divertirte un poco, ¡dejando que Hedy elija el precio de su cena también! ¿Qué vas a conseguir?
                start_code: "# pon tu código aquí"
                example_code: "```\nplatos {is} espaguetis, coles de Bruselas, hamburguesas\n{print} ¡Te servirán platos {at} {random} esta noche!\nprecio {is} 1 euro, 10 euros, 100 euros\n{print} Serán precio {at} {random} por favor.\n```\n"
                story_text_2: "### Ejercicio\nAhora haz tu propia versión del restaurante al azar.\nHaz tú mismo una lista de entrantes, platos principales, postres, bebidas y precios.\nDespués usa los comandos `{print}` y `{at} {random}` para decirle los clientes qué habrá en su menú esta noche.\n"
                example_code_2: "```\n{print} ¡Bienvenido a tu propio restaurante aleatorio!\nentrantes {is} _\nplatos principales {is} _\npostres {is} _\nbebidas {is} _\nprecios {is} _\n_\n```\n"
            8:
                story_text: "En este nivel puedes hacer tu restaurant más complejo repitiendo múltiples líneas de código. Así:\n"
                example_code: "```\n{print} '¡Bienvenido al restaurante Casa Hedy!'\npersonas = {ask} '¿Cuántas personas serán hoy?'\n{print} '¡Genial!'\n{repeat} personas {times}\n    comida = {ask} '¿Que les gustaría pedir?'\n    {print} comida\n{print} '¡Gracias por pedir!'\n{print} '¡Disfruten su comida!'\n```\n"
                start_code: '# pon tú código aquí'
                story_text_2: "### Ejercicio\nEste código puede ampliarse con más cosas en el menú, por ejemplo ofreciendo bebidas, y/o varios platos o postres. Añade al menos una cosa más.\n**Extra** Añade incluso más cosas, ¡tantas opciones como quieras!\n"
            12:
                story_text: "A partir de este nivel puedes usar números decimales para hacer que tu menú sa más realista.\n\n### Ejercicio\n¿Puedes pensar en un código para darle a tus amigos y familiares un 15% de descuento?\n"
                example_code: "```\nprecio = 0.0\ncomida = {ask} '¿Qué te gustaría pedir?'\nbebida = {ask} '¿Que te gustaría beber?'\n{if} comida {is} 'hamburguesa'\n    precio = precio + 6.50\n{if} comida {is} 'pizza'\n    precio = precio + 5.75\n{if} bebida {is} 'agua'\n    precio = precio + 1.20\n{if} bebida {is} 'refresco'\n    precio = precio + 2.35\n{print} 'Serán ' precio ' dólares, por favor'\n```\n"
                start_code: '# pon tu código aquí'
            9:
                story_text: "¡En este nivel puedes usar anidación para hacer tu restaurant más realista y divertido!\n\n### Ejercicio\nSe ha eliminado la sangría en el código de ejemplo. \n¿Puedes averiguar cuánta sangría necesita cada línea para que el código funcione correctamente?\nSi el cliente pide pizza, Hedy no debería preguntarle al cliente qué salsa quiere.\n\n**Extra** Un restaurante no almacena todas las salsas. Haz una lista de las salsas disponibles y da una respuesta con cada pedido si lo vendes. <br>\n**Extra** Las pizzas tienen ingredientes. Pregunta al cliente cuál quieren.<br>\n**Extra** ¿Los clientes quieren una bebida? ¡Pregúntaselo también! <br>\n"
                example_code: "```\n{print} '¡Bienvenido al restaurante Casa Hedy!'\npersonas = {ask} '¿Cuántas personas se nos van a unir hoy?'\n{print} '¡Genial!'\nprecio = 0\n{repeat} persona {times}\n_ comida = {ask} '¿Que le gustaría pedir?'\n_ {print} comida\n_ {if} comida {is} patatas fritas\n_ precio = precio + 3\n_ salsa = {ask} '¿Qué salsa le gustaría con sus patatas fritas?'\n_ {if} salsa {is} no\n_ {print} 'sin salsa'\n_ {else}\n_ precio = precio + 1\n_ {print} 'con ' salsa\n_ {if} comida {is} pizza\n_ precio = precio + 4\n{print} 'Serán ' precio ' dólares'\n{print} '¡Disfruta tu comida!'\n```\n"
                start_code: '# pon tu código aquí'
            15:
                example_code: "```\n{print} 'Bienvenido a McHedy'\nmás = 'sí'\n{while} más == 'sí'\n    pedido = {ask} '¿Qué te gustaría ordenar?'\n    {print} pedido\n    más = {ask} '¿Te gustaría pedir algo más?'\n{print} '¡Gracias!'\n```\n"
                story_text: "Con el comando `{while}` puedes asegurarte que tus clientes sigan agregando ordenes hasta que gusten.\n"
                start_code: '# pon tu código'
            13:
                story_text: "En este nivel aprenderás nuevos comandos para ampliar tu código mucho más.\n\n### Ejercicio 1\nColoca un `{and}` y un `{or}` en la parte lógica del programa.\n\n### Ejercicio 2\nAmplia tu restaurante con al menos un `{and}` y un `{or}` más.\nPor ejemplo, crea un cupón de descuento especial que sólo se aplique a la pizza, o dale una bebida gratis a tu cliente\ncon sus patatas y tortitas. ¡O por supuesto algo completamente diferente!\n"
                example_code: "```\n    {print} 'Ese es nuestro menú de descuentos'\n    precio = precio - 3\n{if} bebidas {is} 'agua' _ bebidas {is} 'zumo'\n    {print} 'Esa es una opción sana'\n{print} 'Serán ' precio ' dólares'\n```\n"
                start_code: '# pon tú código aquí'
    fortune:
        name: "El adivino"
        description: "Deja que Hedy prediga el futuro"
        default_save_name: "El adivino"
        levels:
            1:
                story_text: |
                    ¿Alguna vez has estado en un carnaval y un adivino ha predecido tu futuro? ¿O alguna vez has jugado con una bola mágica de ocho?
                    Entonces probablemente sepas que realmente no pueden predecir tu futuro, ¡pero sigue siendo divertido jugar!

                    ¡En los próximos niveles puedes aprender a crear tu propia máquina de la fortuna!
                    En el nivel 1 puedes comenzar fácil dejando que Hedy se presente como adivina y dejes que haga `{echo}` de las respuestas de los jugadores.
                    Así:

                start_code: "# pon tu código aquí"
                example_code: "```\n_ ¡Hola, soy Hedy la adivina!\n_ ¿Quién es usted?\n_ Déjame mirar en mi bola de cristal\n_ Veo... Veo...\n_ Tu nombre es\n```\n"
                story_text_2: "### Ejercicio\nCopia el código de ejemplo en tu pantalla de entrada y rellena los espacios en blanco para hacer que tu código funcione.\n**Extra** Cambia el código y deja que el adivino no sólo prediga tu nomber, sino tambien tu edad, tu equipo favorito de deporte o cualquier otra cosa sobre tí mismo.\n"
            3:
                story_text: |
                    En los niveles anteriores has creado tu primera máquina de la fortuna, pero Hedy realmente no podía predecir nada, sólo `{echo}`.
                    En este nivel puedes utilizar una variable y el comando `{at} {random}` para dejar que Hedy escoja una respuesta para tí. Mira este código, por ejemplo:
                start_code: "# pon tu código aquí"
                example_code: "```\n{print} ¡Soy Hedy el adivino!\npregunta {is} {ask} ¿Qué quieres saber?\n{print} Esto es lo que quieres saber: pregunta\nrespuestas {is} sí, no, quizás\n{print} Mi bola de cristal dice...\n{sleep} 2\n{print} respuestas {at} {random}\n```\n"
                story_text_2: "### Ejercicio\nAhora Hedy sólo puede responder si, no o quizás. ¿Puedes darle más opciones a Hedy, como 'sin duda' o 'pregunta de nuevo'.\n"
            12:
                story_text: "Desde el nivel 12, tendrás que usar comillas en las listas, antes y después de cada elemento.\n\n### Ejercicio \nAñade dos predicciones a la lista"
                example_code: "```\nfortuna = 'te resbalarás con una cáscara de plátano', _\n{print} 'Echaré un vistazo en mi bola de cristal para tu futuro'.\n{print} 'Veo... Veo...'\n{sleep}\n{print} 'Fortuna' {at} {random}\n```\n"
                start_code: '# pon tu código aquí'
            10:
                story_text: "En este nivel aprenderás a programar el juego MACC (mansión, apartamento, cabaña, casa). En este juego puedes predecir para todos los jugadores a la vez, cuál será su futuro.\n\n### Ejercicio\nLlena los huecos en blanco usando el nuevo comando que has aprendido en este nivel.\n"
                example_code: "```\ncasas = mansión, apartmento, cabaña, casa\nama = nadie, alguien de la realeza, su vecino, su verdadero amor\nmascotas = perro, gato, elefante\nnombres = Jenna, Ryan, Jim\n_\n    {print} nombre ' vive en una ' casas {at} {random}\n    {print} nombre ' se casará con ' ama {at} {random}\n    {print} nombre ' tendrá un ' mascotas {at} {random} ' como su mascota.'\n    {sleep}\n```\n"
                start_code: '# pon tú código aquí'
            6:
                story_text: "En este nivel puedes usar matemáticas para en tus predicciones de adivino. Esto te permite crear fórmulas (bobas) para calcular el futuro.\nPor ejemplo, puedes calcular cuán rico vas a ser o cuantos niños vas a tener cuando crezcas.\n\n\n\n### Ejercicio\n¿Puedes pensar en tu (boba) máquina adivina?\n"
                example_code: "```\n{print} '¡Soy Hedy el adivino!'\n{print} '¡Puedo predecir cuántos hijos tendrás cuando crezcas!'\nedad = {ask} '¿Cuántos años tienes?'\nhermanos = {ask} '¿Cuántos hermanos tienes?'\naltura = {ask} '¿Qué altura tienes en centímetros?'\nniños = altura / edad\nniños = niños - hermanos\n{print} 'Tendrás...'\n{sleep}\n{print} niños ' niños!'\n```\n"
                start_code: '# pon tu código aquí'
            5:
                story_text: "### Ejercicio\nEn este código de ejemplo verás como hacer un programa adivino que te permita inclinar las posibilidades a tu favor. Este programa de trampas siempre te dice que vas a ganar la lotería, pero tus amigos nunca ganarán.\n\nUsa esto para hacer tu propio programa, ¡sé creativo! Por ejemplo puedes crear un código que prediga que:\n* ¡tu equipo favorito vencerá a todos sus rivales!\n* ¡se elegirá tu película favorita para la película de la noche!\n* ¡ganas entrada para tu espectáculo favorito!\n* eres el más hermoso de todos, como el espejo mágico de Blancanieves.\n¡Deja que tu imaginación haga el trabajo!\n\nTu programa tiene que ser de al menos 10 líneas de código y tiene que tener al menos un comando `{if}` y `{else}`.\n"
                example_code: "```\namigos {is} Jordan, Lucía, David\n{print} '¡Puedo predecir si ganarás mañana la lotería!'\npersona {is} {ask} '¿Quién eres?'\nrespuesta_buena {is} ¡Hurra! ¡Ganaste!, ¡Seguro que ganarás!, ¡Tenemos un ganador!\nrespuesta_mala {is} ¡Mala suerte! ¡Inténtalo de nuevo!, ¡Otra persona ganará, Tú perderás!\n{if} persona {in} amigos {print} respuesta_buena {at} {random}\n{else} {print} respuesta_mala {at} {random}\n```\n"
                start_code: '# pon tu código aquí'
            4:
                example_code: "```\n_ Agrega las comillas a este código _\n{print} ¡Soy Hedy la adivina!\npregunta {is} {ask} ¿Qué quieres saber?\n{print} Esta es tu pregunta:  pregunta\nrespuesta {is} sí, no, quizás\n{print} Mi bola de cristal dice...\n{sleep} 2\n{print} respuesta {at} {random}\n```\n"
                story_text: "Este nivel no tiene funciones nuevas, pero te permite practicar usando las comillas.\nPuedes rehacer tu código del nivel 3, ¡y asegurarte de añadir las comillas en los lugares correctos!\n\nTen en cuenta que en el nivel 3 no podíamos usar la palabra 'pregunta' como el nombre de la variable y una palabra normal que podía ser mostrada en pantalla.\n¡Las comillas en el nivel 4 hacen que eso sea posible!\n\n### Ejercicio\nHemos eliminado todas las comiilas del código de ejemplo, ¿puedes añadirlas en todos los lugares correctos?\n\n### Ejercicio 2\nVuelve al nivel anterior y copia tu código del adivino. Haz que el código funcione en este nivel añadiendo comillas en los puntos correctos.\n"
                start_code: '# pon tu código aquí'
            8:
                story_text: "!En el siguiente ejemplo puedes hacer que tu adivino haga varias preguntas y también que las imprima!\n\n### Ejercicio\n¿Puedes poner los comandos correctos en los huecos en blanco?\n"
                example_code: "```\n{print} '¡Soy Hedy la adivina!'\n{print} 'Puedes hacerme 3 preguntas'\nrespuestas = sí, no, quizás\n_ _ _\n   pregunta = {ask} '¿Que quieres saber?'\n   {print} pregunta\n   {sleep}\n   {print} 'Mi bola de cristal dice...' respuestas {at} {random}\n```\n"
                start_code: '#pon tu código aquí'
            7:
                story_text: "### Ejercicio\nCompleta este programa que te dice si tu romance te quiere o no.\n"
                example_code: "```\n{print} 'Tengo una flor con pétalos mágicos'\n{print} 'Si coges los pétalos la flor te dirá si tu amor también te querrá'\ncantidad = {ask} '¿Cuántos pétalos quieres coger?'\nopciones = te quiere, no te quiere\n_ _ _ _ opciones {at} {random}\n```\n"
                start_code: '# pon tu código aquí'
    parrot:
        name: Loro
        levels:
            2:
                story_text: "En el nivel anterior has hecho un loro que repetirá todo después de ti. En este nivel harás que el loro interactivo usando una variable y el comando `{ask}`.\nTambién haremos el loro más realista añadiendo comandos `{sleep}` después de que diga algo.\n"
                example_code: "```\n{print} Soy Hedy el loro\nnombre _ _ ¡cómo te llamas?\n{print} nombre\n_\n{print} graznido\n_\n{print} nombre\n```\n"
                start_code: '{print} ¡Soy Hedy la lora!'
                story_text_2: "### Ejercicio\nLo primero de todo, acaba la línea 2 con un comando `{is}` y un `{ask}`.\nDespués pon un comando `{sleep}` en la línea 4 y 6 para dejar al loro tranquilo durante un rato.\n\n**Extra** ¿Puedes hacer que el loro pregunte algo más que tu nombre añadiendo más líneas de código?\n"
            1:
                story_text: "¡Crea tu propia mascota online, un loro que copiará lo que digas!\n"
                example_code: "```\n{print} Soy Hedy la lora\n{ask} ¿Cuál es tu nombre?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Soy Hedy la lora

                    {ask} Cómo te llamas?

                    {echo}

                    {echo}

                    '
                story_text_2: "### Desafío\nCopia el codigo de ejemplo pantalla de entrada dandole click al botón amarillo.\nHaz que el pajaro pregunte una pregunta diferente. Llena los espacios en el ejemplo!\n**Extra** Tambien puedes hacer que el pajaro hagas mas de una pregunta . Haz mas lineas de codigo al lado de tu propio codigo.\n"
                example_code_2: "```\n{print} Soy Hedy la lora\n{ask} _\n{echo}\n{echo}\n"
            5:
                example_code: "```\npalabras {is} squawk, Hedy\n{print} '¡Entrena a tu lora'\nnueva_palabra {is} {ask} '¿Que palabra le quieres enseñar?'\n{add} nueva_palabra {to_list} palabras\npalabra_dicha {is} palabras {at} {random}\n{print} '🧒 Say ' nueva_palabra ', Hedy!'\n{print} '🦜 ' palabra_dicha\n_ palabra_dicha {is} nueva_palabra _ '🧒 ¡Gran trabajo, Hedy!🍪'\n_ _ '🧒 No, Hedy, di ' nueva_palabra\n```\n"
                story_text: "¡Recompensa tu loro si dice la ¡palabra correcta!\n\n### Ejercicio\nFinaliza el código llenando los 4 comandos que faltan.\n"
                start_code: '# pon tu código aquí'
            3:
                story_text: "Enseña a tu loro una nueva palabra con `{add}`.\n### Ejercicio\n¿Puedes añadir el comando`{add} {to}` para hacer que el código funcione?\n"
                example_code: "```\npalabras {is} graznido, Hedy\n{print} ¡Entrena a tu loro!\nnueva_palabra {is} {ask} ¿Que palabra le quieres enseñar?\n_ nueva_palabra _ palabras\n{print} 🧒 Di nueva_palabra, Hedy!\n{print} 🦜 palabras {at} {random}\n```\n"
                start_code: '# pon tu código aquí'
            4:
                start_code: '# Escribe tu código aquí'
                story_text: "En este nivel, tenemos que usar comillas con los comandos `{ask}` y`{print}`.\n### Ejercicio\nCompleta el codigo poniendo comillas en los espacios.\n"
                example_code: "```\npalabras {is} croac, Hedy\n{print} _ ¡Entrena a tu loro! _\nnueva_palabra {is} {ask} _ ¿Qué palabra le quieres enseñar? _\n{add} nueva_palabra {to_list} palabras\n{print} _ 🧒 ¡Di _ new_word _, Hedy!_\n{print} _ 🦜 _ palabras {at} {random}\n```\n"
        description: ¡Crea tu propia mascota loro que copiará lo que digas!
        default_save_name: Loro
    haunted:
        levels:
            14:
                story_text: "En este nivel puedes usar los símbolos `<` y `>`  para introducir vidas a tu juego.\n"
                example_code: "```\n{print} 'Escape de la Casa Embrujada'\nvidas = 3\npuertas = 1, 2, 3\nmonstruos = 'la bruja malvada', 'un zombie', 'un perro de 3 cabezas durmiendo'\n{for} i {in} {range} 1 {to} 10\n    {if} vidas > 0\n        puerta_buena = puertas {at} {random}\n        monstruo = monstruos {at} {random}\n        puerta_escogida = {ask} '¿Que puerta escoges?'\n        {if} puerta_buena == puerta_escogida\n            {print} 'Has escogido la puerta correcta'\n        {else}\n            {print} 'Ves un...' monstruo\n            {if} monstruo == 'un perro de 3 cabezas durmiendo'\n                {print} 'Fiiiuuuuu.... Esta durmiendo'\n            {else}\n                {print} 'Pierdes una vida'\n                vidas = vidas -1\n    {else}\n        {print} 'JUEGO TERMINADO'\n```\n"
                start_code: '# pon tu código aquí'
            4:
                story_text: "En este nivel vas a aprender como usar comillas en tus juegos.\n\n### Ejercicio\n¿Puedes hacer que tu Casa Encantada resistente al nivel 4?\n\n### Ejercicio 2\nVuelve al nivel anterior y copia el código de tu casa embrujada. Haz que el código funcione en este nivel añadiendo comillas en los lugares adecuados.\n"
                start_code: '# pon tú código aquí'
                example_code: "```\n_ Añade comillas a este código _\n{print} ¡Escapa de la casa encantada!\n{print} Hay 3 puertas delante de tí...\nelección {is} {ask} ¿Qué puerta eliges?\n{print} Escogiste ... elección\nmonstruo {is} un zombi, un vampiro, NADA DE LO QUE HAYAS ESCAPADO\n{print} Ves...\n{sleep}\n{print} monstruo {at} {random}\n ```\n"
            16:
                story_text: "Este juego de la casa embrujada usa la conexión entre las listas que aprendiste a usr en este nivel.\nPor ejemplo: todas las características que pertenecen al primer zombie están todas en las listas, la segunda para la bruja y la tercera para el vampiro.\n¡Échale un vistazo al códgio!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mansion'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# pon tu código aquí'
            1:
                story_text: "En esta aventura vas a a empezar a hacer un juego en el cual necesitas escapar de una casa embrujada escogiendo la puerta correcta.\nSi escoges la puerta correcta vas a sobrevivir, pero sino un terrible monstruo podría...\n\nEn el nivel 1 vamos a empezar nuestro juego de la casa embrujada haciendo una historia de terror y preguntando al jugador que ven en la casa embrujada.\n"
                example_code: "```\n{print} ¿Cómo llegué aquí?\n{print} Recuerdo que mi amigo me estaba diciendo que fuéramos a la mansión...\n{print} y de repente todo se volvio negro.\n{print} ¿Pero como termine en el suelo...?\n{print} ¡Mi cabeza me duele como si me hubieran golpeado con un bate de baseball!\n{print} ¿Qué es ese sonido?\n{print} Oh no! ¡Siento que no estoy solo en esta casa!\n{print} ¡Necesito salir de aquí!\n{print} Hay 3 puertas...\n{ask} ¿Cual puerta debería escoger?\n{echo} Escogo la puerta\n{print} ...?\n```\n"
                start_code: '{print} ¿Cómo llegue aquí?'
                story_text_2: "### Ejercicio\nCopia el código de ejemplo a tu entrada de pantalla haciendo clic en el botón amarillo.\nAhora completa la historia añadiendo al menos 5 líneas de código.\nRecuerda que cada línea de código empiece con un comando `{print}` .\n"
            2:
                story_text: "En esta casa embrujada puedes escoger tus monstruos con emojis. Claro que también puedes usar palabras.\n"
                start_code: monstruo1 {is} _
                example_code: "```\nmonstruo_1 {is} 👻\nmonstruo_2 {is} 🤡\nmonstruo_3 {is} 👶\n{print} Entras en la casa embrujada.\n{print} De repende ves al monstruo_1\n{print} Vas al otro cuarto...\n{print} Pero ves que el monstruo_2 ¡te está esperando allí!\n{print} ¡Oh no! Rápido, ve a la cocina.\n{print} ¡Pero tan pronto entras allí el monstruo_3 te ataca!\n```\n"
                story_text_2: "### Ejercicio\nEn el ejemplo de arriba los monstruos están predeterminados. De forma que cada vez que ejecutas tu código, el resultado es el mismo.\n¿Puedes agregar un comando `{ask}` para hacer que interactiva la casa embrujada y dejar que los jugadores escojan que monstruos se encuentran?\n"
                example_code_2: "```\nmonstruo_1 {is} _\nmonstruo_2 {is} _\nmonstruo_3 {is} _\n{print} Entras en la casa embrujada.\n{print} De repende ves al monstruo_1\n{print} Vas al otro cuarto...\n{print} Pero ves que el monstruo_2 ¡te está esperando allí!\n{print} ¡Oh no! Rápido, ve a la cocina.\n{print} ¡Pero tan pronto entras allí el monstruo_3 te ataca!\n```\n"
            11:
                story_text: "En este nivel hemos cambiado el comando `{for}` para que podamos decirle al jugador donde están. \n\n### Ejercicio 1\nCompleta el programa para que el jugador sepa en qué habitación están.\n\n### Ejercicio 2\nConvierte el programa en una aventura siguiendo estos pasos:\n\n1. Haz una lista de opciones (como: pelear o volar)\n2. Asegúrate que el jugador puede elegir una opción con `{ask}`\n3. ¿Es la respuesta correcta? Entonces pueden pasar al siguiente monstruo. ¿Dieron una respuesta incorrecta? Házselo saber con un `{print}`. \n\n**Extra** Si haces una opción incorrecta, ¡se sigue mostrando un monstruo! ¿Cómo cambiarías eso?\n"
                example_code: "```\n{print} '¡Escapa de la Casa Encantada!'\nmonstruos = zombi, vampiro, araña gigante\n_\n    {print} '¡Habitación ' i\n    monstruo = monstruos {at} {random}\n```\n"
                start_code: "{print} '¡Escapa de la casa encantada!'"
            9:
                story_text: "En este nivel puedes usar anidaciones, ¡lo que te permite hacer tu casa encantada incluso más interactiva!\n\n### Ejercicio\nAhora este juego es muy dificil de vencer, ¿lo puedes hacer más fácil de ganar?\n¿Cambias tu código para que sólo tenga una puerta incorrecta y dos correctas en vez de una correcta y dos incorrectas?\nConsejo: Esto significa cambiar tu variable puerta_correcta a puerta_incorrecta, y cambiar el código `{if}` y `{else}` .\nY claro que puedes cambiar la historia y hacerla a tu manera. ¡Cambia los monstruos o conviértelo en un concurso donde recibirás un regalo!\n"
                example_code: "```\n{print} 'Escape de la Casa Embrujada!'\njugador = vivo\npuertas = 1, 2, 3\nmonstruos = zombie, vampiro, araña gigante\n{repeat} 3 {times}\n    {if} jugador {is} vivo\n        puerta_correcta {is} puertas {at} {random}\n        {print} 'Hay 3 puertas...'\n        puerta_escogida = {ask} '¿Qué puerta quieres escoger?'\n        {if} puerta_escogida {is} puerta_correcta\n            {print} '¡No hay monstruos aquí!'\n        {else}\n            {print} 'Te comió un ' monstruos {at} {random}\n            jugador = muerto\n    {else}\n        {print} 'JUEGO TERMINADO'\n{if} jugador {is} vivo\n    {print} '¡Genial! ¡Sobreviviste!'\n```\n"
                start_code: "{print} '¡Escapa de la casa encantada!'"
            5:
                story_text: "Hasta este nivel el juego de la casa encantada siempre preguntaba al jugador que eligiera una puerta, pero como puede que te hayas dado cuenta los jugadores no necesitaban responder correctamente.\nSi el jugador respondía algo aleatorio, el juego funcionaría igual y el jugador ¡puede que hasta ganase! (pese a que no eligiese una puerta).\nEn este nivel, solo podrás ganar el juego si eliges la puerta que Hedy eligió de forma aleatoria.\n\n### Ejercicio\n¿Puedes encontrar las cuatro palabras faltantes para completar el código?\n"
                example_code: "```\n{print} '¡Escapa de la casa encantada!'\n{print} 'Hay tres puertas frente a ti...'\npuertas {is} 1, 2, 3\nmonstruos {is} hombre lobo, momia, vampiro, zombie\npuerta_elegida {is} {ask} '¿Qué puerta eliges?'\n{print} 'Has elegido la puerta...' puerta_elegida\n{sleep}\npuerta_correcta {is} puertas {at} {random}\n_ _ _ _ {print} '¡Genial! ¡Has escapado!'\n{else} {print} '¡O no! The ha comido un...' monstruos {at} {random}\n```\n"
                start_code: '# pon tu código aquí'
            3:
                story_text: "En los niveles anteriores hiciste la introducción al juego de la casa embrujada, pero como te habrás dado cuenta, la historia siempre termina en un final tenebroso.\nEn este nivel puedes hacer que tu historia sea más interactiva cambiando el resultado del juego; ¡algunas veces te comerán, otras veces escaparás!\n¡Deja que Hedy decida aleatoriamente!\n\n### Ejercicio\nCopia los códigos de ejemplo y rellena los espacios ¡para hacerlo funcionar!\n\n**Extra** Esta historia es bastante sencilla, tal vez puedes asustarla más añadiendo una historia más emocionante.\nAdemás ahora mismo tienes finales muy limitados, sólo hay 3 opciones sobre que hay detrás de las puertas. ¡Quizá puede pensar en más monstruos para añadir a la lista!\n"
                start_code: '# pon tu código aquí'
                example_code: "```\n_ ¡Escapa de la casa embrujada!\n_ Hay 3 puertas delante de tí...\n_ _ _ ¡Qué puerta eliges?\n_ Elegiste ... opción\nmonstruos _ a zombi, a vampiro, NADA DE LO QUE HAYAS ESCAPADO\n_ Mira...\n{sleep}\n_ _ _ _\n```\n"
        name: La Casa Embrujada
        description: Escapa de la casa embrujada
        default_save_name: La Casa Embrujada
    piggybank:
        levels:
            12:
                story_text: "En esta aventura aprenderás como hacer una hucha virtual.\n\n### Ejercicio\nTermina el código para calcular cuánto dinero tienes y cuando tiempo debes ahorrar ¡para comprar lo que quieres!\n**Extra** ¿Quizás ya hayas ahorrado algo de dinero? Réstalo de la cantidad que tendrás que ahorrar.\n"
                example_code: "```\n{print} '¡La hucha virtual!'\ndeseo = {ask} '¿Qué quieres comprar?'\nprecio = {ask} '¿Cuánto cuesta?'\nahorrado = {ask} '¿Cuánto dinero tienes ahorrado?'\npaga = {ask} '¿Cuánto dinero obtienes por semana?'\na_ahorrar = precio - ahorrado\nsemanas = a_ahorrar / paga\n{print} 'Podrás comprar un ' _ ' en ' _ ' semanas.'\n```\n"
                start_code: '# pon tu código aquí'
            14:
                example_code: "```\ndinero = {ask} '¿Cuánto dinero has ahorrado?'\ndeseo = {ask} '¿Cuánto dinero necesitas?'\nprestación = {ask} '¿Cuánto dinero de bolsillo tienes cada semana?'\nahorro = deseo - dinero\nsemanas = ahorro/prestación\n{if} deseo > dinero\n    {print} '¡Tienes que ahorrar más!'\n    {print} 'Necesitarás ' semanas ' más semanas.'\n{else}\n    {print} '¡Genial! Ya tienes suficiente'\n    {print} '¡Vamos a comprar!'\n```\n"
                story_text: "¡En este nivel puedes hacer que Hedy te diga si has ahorrado suficiente dinero!\n"
                start_code: '# pon tu código aquí'
        name: Hucha de cerdito
        description: ¡Cuenta tu dinero!
        default_save_name: Cerdito hucha
    quizmaster:
        name: Presentador
        description: ¡Haz tu propio cuestionario!
        default_save_name: Presentador
        levels:
            14:
                story_text: "¡En esta aventura puedes hacer tu propio cuestionario! Llena los espacios vacíos, ¡añade más preguntas y disfruta!\nPuedes hacer un cuestionario sobre lo que quieras: una afición, tu animal favorito, tu libro favorito o ¡cualquier otra idea que tengas!\n"
                example_code: "```\n{print} 'Haz tu propio cuestionario'\npuntos_a = 0\npuntos_b = 0\n{print} 'Pregunta'\n{print} 'Respuesta Opción A'\n{print} 'Respuesta Opción A'\nrespuesta = {ask} '¿Cual es la respuesta?'\n{if} respuesta == 'A'\n    puntos_a = puntos_a + 1\n{if} respuesta == 'B'\n    puntos_b = puntos_b + 1\n{print} '¡Terminó el cuestionario!'\n{print} '¡Veamos los resultados!'\n{if} puntos_a > puntos_b\n    {print} '¡Perteneces al club A!'\n{if} puntos_b > puntos_a\n    {print} '¡Perteneces al club B!'\n```\n"
                start_code: '# pon tu código aquí'
    language:
        levels:
            16:
                story_text: "Crea tu propio programa para practicar tu vocabulario en un idioma nuevo.\n"
                example_code: "```\npalabras_francesas = ['bonjour', 'ordinateur', 'pomme de terre']\ntraducción = ['hola', 'computadora', 'papa']\npuntuación = 0\n{for} i {in} {range} 1 {to} 3\n    respuesta = {ask} '¿Qué signfica ' palabras_francesas[i] '?'\n    correcta = traducción[i]\n    {if} respuesta == correcta\n        {print} '¡Correcto!'\n        puntuación = puntuación + 1\n    {else}\n        {print} 'No, ' palabras_francesas[i] ' significa ' traducción[i]\n{print} 'Tuviste ' puntuación ' respuestas correctas.'\n```\n"
                start_code: '# pon tu código aquí'
            5:
                story_text: "Haz tu propio programa para practicar tu vocabulario en un nuevo idioma.\n\n### Ejercicio\nHaz tu código más largo añadiendo al menos 3 palabras más para que las aprenda el jugador.\n**Extra** Por supuesto, puedes elegir un idioma distinto al francés. Puedes cambiar tu código a cualquier idioma que te gustaría aprender.\n"
                start_code: '# pon tu código aquí'
                example_code: "```\n{print} '¡Aprende Francés!'\ngato {is} {ask} '🐱'\n{if} gato {is} chat {print} '¡Muy bien!'\n{else} {print} 'No, gato es chat'\nrana {is} {ask} '🐸'\n{if} rana {is} grenouille {print} '¡Wow! ¡Genial!'\n{else} {print} 'No, rana es grenouille'\n```\n"
        name: Idioma
        description: Practica palabras en otro idioma
        default_save_name: Idioma
    secret:
        levels:
            12:
                story_text: "En esta aventura podrás crear tu propio código secreto. Codifica un mensaje que solo la persona correcta podrá descifrar.\nSi el enemigo intenta descifrar el código, obtendrán un mensaje falso para hacerles perder el tiempo.\n\n### Ejercicio 1\nCrea tu propio código secrete para tu super espía. ¿Puedes hacer que use aún más variables?\n\n### Ejercicio 2\nAñade un tercer componente al código, como una prenda de ropa o un objeto.\n"
                example_code: "```\nnombre {is} {ask} '¿Cuál es tu nombre?'\nif nombre {is} '_'\n    a {is} 'Ve al aeropuerto '\n{else}\n    a {is} 'Ve a la estación de trenes '\ncontraseña {is} {ask} '¿Cuál es la contraseña?'\n{if} contraseña {is} _\n    b {is} 'mañana a las 02.00'\n{else}\n    b {is} 'hoy a las 10.00'\n{print} _ _ _\n```\n"
                start_code: '# pon tu código aquí'
            13:
                story_text: "Podemos simplificar el código superespía con `{and}`, entonces sólo necesitamos un `{if}`.\n\n### Ejercicio 1\nCompleta el cógido rellenando el comando correcto en el hueco en blanco. Consejo:El superespía tiene que responder a AMBAS preguntas correctamente, ¡antes de que consigan la información confidencial!\n\n### Ejercicio 2\n¡Queremos confundir aún más al enemigo! Crea una lista con respuestas falsas y selecciona una al azar cuando den una respuesta incorrecta.\n"
                example_code: "```\nnombre {is} {ask} '¿Cuál es tu nombre?'\ncontraseña {is} {ask} '¿Cuál es tu contraseña?'\n{if} nombre {is} 'Agente007' _ contraseña {is} 'SUPERSECRETO'\n    {print} 'Ve al aeropuerto a las 02.00'\n{else}\n    {print} 'Ve a la estación de tren a las 10.00'\n ```\n"
                start_code: '# pon tu código aquí'
        name: Super espía
        description: Haz tu propio código espía
        default_save_name: Super Espía
    tic:
        name: Tres en raya
        description: ¡Juega al Tres en raya!
        default_save_name: Tres en raya
        levels:
            14:
                story_text: "En los niveles anteriores has hecho un juego de tres en raya. Ahora hemos aprendido como usar los símbolos =, == y !=.\nPuedes usar este nuevo conocimiento en tu juego así:\n"
                start_code: '# pon tu código aquí'
                example_code: "```\nsímbolo = 'x'\ncasillas_disponibles = 1, 2, 3, 4, 5, 6, 7, 8, 9\njuego = 'en marcha'\ncasilla_1 = '.'\ncasilla_2 = '.'\ncasilla_3 = '.'\ncasilla_4 = '.'\ncasilla_5 = '.'\ncasilla_6 = '.'\ncasilla_7 = '.'\ncasilla_8 = '.'\ncasilla_9 = '.'\n{print} '¡Tres en raya!'\n{print} casilla_1 casilla_2 casilla_3\n{print} casilla_4 casilla_5 casilla_6\n{print} casilla_7 casilla_8 casilla_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} juego != 'terminado'\n        elección = {ask} 'Jugador ' símbolo ', ¿cuál casilla quieres tomar?'\n        {if} elección {in} casillas_disponibles\n            {remove} elección {from} casillas_disponibles\n            {if} elección == 1\n                casilla_1 = símbolo\n            {if} elección == 2\n                casilla_2 = símbolo\n            {if} elección == 3\n                casilla_3 = símbolo\n            {if} elección == 4\n                casilla_4 = símbolo\n            {if} elección == 5\n                casilla_5 = símbolo\n            {if} elección == 6\n                casilla_6 = símbolo\n            {if} elección == 7\n                casilla_7 = símbolo\n            {if} elección == 8\n                casilla_8 = símbolo\n            {if} elección == 9\n                casilla_9 = símbolo\n        {else}\n            {print} 'Esa casilla ya está tomada'\n        {print} casilla_1 casilla_2 casilla_3\n        {print} casilla_4 casilla_5 casilla_6\n        {print} casilla_7 casilla_8 casilla_9\n        {print} ' '\n        ganador = {ask} '¿Ganaste?'\n        {if} ganador == 'yes'\n            {print} '¡Bien hecho, jugador ' símbolo '!'\n            juego = 'terminado'\n        {else}\n            {if} símbolo == 'x'\n                símbolo = 'o'\n            {else}\n                símbolo = 'x'\n```\n"
            15:
                story_text: "En este nivel puedes mejorar tu juego de tres en raya con el bucle {while}. Con este bucle puedes combinar el juego `{if} game != 'over'` y el `{for} i {in} {range} 1 {to} 9` en una sola línea.\nCompruébalo:\n"
                start_code: '# pon tu código aquí'
                example_code: "```\nsímbolo = 'x'\ncasillas_disponibles = 1, 2, 3, 4, 5, 6, 7, 8, 9\njuego = 'en marcha'\ncasilla_1 = '.'\ncasilla_2 = '.'\ncasilla_3 = '.'\ncasilla_4 = '.'\ncasilla_5 = '.'\ncasilla_6 = '.'\ncasilla_7 = '.'\ncasilla_8 = '.'\ncasilla_9 = '.'\n{print} '¡Tres en raya!'\n{print} casilla_1 casilla_2 casilla_3\n{print} casilla_4 casilla_5 casilla_6\n{print} casilla_7 casilla_8 casilla_9\n{print} ' '\n{while} juego != 'terminado'\n    elección = {ask} 'Jugador ' símbolo ', ¿cuál casilla quieres tomar?'\n    {if} elección {in} casillas_disponibles\n        {remove} elección {from} casillas_disponibles\n        {if} elección == 1\n            casilla_1 = símbolo\n        {if} elección == 2\n            casilla_2 = símbolo\n        {if} elección == 3\n            casilla_3 = símbolo\n        {if} elección == 4\n            casilla_4 = símbolo\n        {if} elección == 5\n            casilla_5 = símbolo\n        {if} elección == 6\n            casilla_6 = símbolo\n        {if} elección == 7\n            casilla_7 = símbolo\n        {if} elección == 8\n            casilla_8 = símbolo\n        {if} elección == 9\n            casilla_9 = símbolo\n    {else}\n        {print} 'Esa casilla ya está tomada'\n    {print} casilla_1 casilla_2 casilla_3\n    {print} casilla_4 casilla_5 casilla_6\n    {print} casilla_7 casilla_8 casilla_9\n    {print} ' '\n    ganador = {ask} '¿Ganaste?'\n    {if} ganador == 'yes'\n        {print} '¡Bien hecho, jugador ' símbolo '!'\n        juego = 'terminado'\n    {else}\n        {if} símbolo == 'x'\n            símbolo = 'o'\n        {else}\n            símbolo = 'x'\n```\n"
            17:
                start_code: '# pon tu código aquí'
                story_text: "En los niveles anteriores el juego Tres en raya tenía un comportamiento algo molesto. Después de cada movimiento, tenías que decidir tú mismo si habías ganado o no.\nDe esta forma se podía jugar, pero era algo lento. En este nivel hemos aprendido el comando `{elif}`, que podemos utilizarlo para solucionar el problema.\nUsar el {elif} para que Hedy pueda comprobar si el jugador ha ganado o no es divertido, pero también requiere unas cuantas líneas de código extra.\n\nEn el código de ejemplo verás que hemos añadido los requisitos para ganar (3 casillas en línea, en horizontal, vertical o diagonal).\nPuedes encontrarlas en las líneas 46 a 69. Puedes comprobar que cada vez que se cumple el requisito el jugador a ganado y la variable juego se actualiza a 'fin'.\nEso significa que el bucle `{while}` terminará y el juego se acabará.\n"
                example_code: "```\nsímbolo = 'x'\ncasillas_disponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9]\njuego = 'en marcha'\ncasilla_1 = '.'\ncasilla_2 = '.'\ncasilla_3 = '.'\ncasilla_4 = '.'\ncasilla_5 = '.'\ncasilla_6 = '.'\ncasilla_7 = '.'\ncasilla_8 = '.'\ncasilla_9 = '.'\n{print} '¡Tres en raya!'\n{print} casilla_1 casilla_2 casilla_3\n{print} casilla_4 casilla_5 casilla_6\n{print} casilla_7 casilla_8 casilla_9\n{print} ' '\n{while} juego != 'terminado':\n    elección = {ask} 'Jugador ' símbolo ', ¿cuál casilla quieres tomar?'\n    {if} elección {in} casillas_disponibles:\n        {remove} elección {from} casillas_disponibles\n        {if} elección == 1:\n            casilla_1 = símbolo\n        {if} elección == 2:\n            casilla_2 = símbolo\n        {if} elección == 3:\n            casilla_3 = símbolo\n        {if} elección == 4:\n            casilla_4 = símbolo\n        {if} elección == 5:\n            casilla_5 = símbolo\n        {if} elección == 6:\n            casilla_6 = símbolo\n        {if} elección == 7:\n            casilla_7 = símbolo\n        {if} elección == 8:\n            casilla_8 = símbolo\n        {if} elección == 9:\n            casilla_9 = símbolo\n    {else}:\n        {print} 'Esa casilla ya está tomada'\n    {print} casilla_1 casilla_2 casilla_3\n    {print} casilla_4 casilla_5 casilla_6\n    {print} casilla_7 casilla_8 casilla_9\n    {print} ' '\n    {if} casilla_1 == casilla_2 {and} casilla_2 == casilla_3 {and} casilla_1 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_4 == casilla_5 {and} casilla_5 == casilla_6 {and} casilla_4 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_7 == casilla_8 {and} casilla_8 == casilla_9 {and} casilla_7 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_1 == casilla_4 {and} casilla_4 == casilla_7 {and} casilla_1 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_2 == casilla_5 {and} casilla_5 == casilla_8 {and} casilla_2 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_3 == casilla_6 {and} casilla_6 == casilla_9 {and} casilla_3 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_1 == casilla_5 {and} casilla_5 == casilla_9 {and} casilla_1 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {elif} casilla_3 == casilla_5 {and} casilla_5 == casilla_7 {and} casilla_3 != '.':\n        {print} '¡Jugador ' símbolo ' gana!'\n        juego = 'terminado'\n    {else}:\n        {if} símbolo == 'x':\n            símbolo = 'o'\n        {else}:\n            símbolo = 'x'\n```\n"
            13:
                story_text: "En esta aventura podrás programar el juego Tres en Raya. Puedes jugar con dos personas. En turnos, eliges un número (1-9) del sitio donde quieres poner tu señal (x u o).\n¡El primer jugador que obtenga tres en línea (horizontal, vertical o en diagonal) gana!\n\n### Ejercicio 1\nEl juego funciona, pero tiene algunos errores. Por ejemplo, cualquier jugador puede elegir cualquier casilla, ¡incluso si ya estaba elegida! Usa un `{if}` allá donde la casilla esté tomada, y si lo está, avisa al jugador.\n\n### Ejercicio 2\nEl juego tampoco decide quién ha ganado. Tienes que añadir ésto comprobando si las 3 casilla en fila tienen el mismo símbolo.\n\n### Ejercicio 3 Extra\nNo siempre tienes un amigo con el que jugar. ¿Puedes crear un rival informático?\n"
                example_code: "```\njugador = 'x'\ncasilla = '.', '.', '.', '.', '.', '.', '.', '.', '.'\n\n{for} i {in} {range} 1 {to} 9\n    opción = {ask} 'Jugador ' jugador ' ¿qué casillas eliges?'\n    casilla {at} opción = jugador\n    {clear}\n    print casilla {at} 1 casilla {at} 2 casilla {at} 3\n    print casilla {at} 4 casilla {at} 5 casilla {at} 6\n    print casilla {at} 7 casilla {at} 8 casilla {at} 9\n    {if} jugador = 'x'\n        jugador = 'o'\n    {else}\n        jugador = 'x'\n```\n"
                start_code: '# pon tu código aquí'
    blackjack:
        name: Blackjack
        description: Intenta acercarte lo máximo posible a 21
        default_save_name: Blackjack
        levels:
            17:
                story_text: "Blackjack es un juego simple de cartas en el cual debes acercarte lo máximo posible a 21. Recibes dos cartas. El valor de cada carta es el número que llevan, la Jota, Reina y Rey valen 10 puntos.\nEl As vale 1 o 11 puntos (puedes elegir). El repartidor, tu oponente, también obtiene dos cartas.\nSi quieres, puedes obtener otra carta, y sus puntos se sumarán al total. El repartidor también puede obtener otra carta.\nPero ten mucho cuidado de no pasarte de 21 puntos, porque si lo haces, ¡Pierdes!\n¡El jugador que se acerque mas a 21 sin pasarse gana!\n\n¡Buena suerte!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncartas = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jota', 'Reina', 'Rey', 'As']\npuntos = 0\npuntos_repartidor = 0\ncarta_1 = cartas[{random}]\ncarta_2 = cartas[{random}]\ncarta_3 = cartas [{random}]\ncarta_repartidor_1 = cartas[{random}]\ncarta_repartidor_2 = cartas[{random}]\ncarta_repartidor_3 = cartas[{random}]\n# Puntos por carta 1\n{if} carta_1 == 'Jota' {or} carta_1 == 'Reina' {or} carta_1 == 'Rey':\n    puntos = puntos + 10\n{elif} carta_1 == 'As':\n    puntos = puntos + 11\n{else}:\n    puntos = puntos + carta_1\n# Puntos por carta 2\n{if} carta_2 == 'Jota' {or} carta_2 == 'Reina' {or} carta_2 == 'Rey':\n    puntos = puntos + 10\n{elif} carta_2 == 'As':\n    puntos = puntos + 11\n{else}:\n    puntos = puntos + carta_2\n# Puntos para el repartidor por la carta 1\n{if} carta_repartidor_1 == 'Jota' {or} carta_repartidor_1 == 'Reina' {or} carta_repartidor_1 == 'Rey':\n    puntos_repartidor = puntos_repartidor + 10\n{elif} carta_repartidor_1 == 'As':\n    puntos_repartidor = puntos_repartidor + 11\n{else}:\n    puntos_repartidor = puntos_repartidor + carta_repartidor_1\n# Puntos del repartidor por la carta 2\n{if} carta_repartidor_2 == 'Jota' {or} carta_repartidor_2 == 'Reina' {or} carta_repartidor_2 == 'Rey':\n    puntos_repartidor = puntos_repartidor + 10\n{elif} carta_repartidor_2 == 'As':\n    puntos_repartidor = puntos_repartidor + 11\n{else}:\n    puntos_repartidor = puntos_repartidor + carta_repartidor_2\n# Dos ases\n{if} carta_1 == 'As' {and} carta_2 == 'As':\n    puntos = 12\n{if} carta_repartidor_1 == 'As' {and} carta_repartidor_2 == 'As':\n    puntos_repartidor = 12\n# Marcador\n{print} 'Tienes un ' carta_1 ' y un ' carta_2 ' (' puntos ' puntos)'\n{print} 'El repartidor tiene un ' carta_repartidor_1 ' y un ' carta_repartidor_2 ' (' puntos_repartidor ' puntos)'\n# Carta extra para el repartidor\nvisita = {ask} '¿Quieres una carta extra?'\n{if} visita == 'si':\n    {if} carta_3 == 'Jota' {or} carta_3 == 'Reina' {or} carta_3 == 'Rey':\n        puntos = puntos + 10\n    {elif} carta_3 == 'As':\n        {if} puntos > 11:\n            puntos = puntos + 11\n        {else}:\n            puntos = puntos + 1\n    {else}:\n        puntos = puntos + carta_3\n    {print} 'Tienes un' carta_3 ' extra (' puntos ' puntos)'\n{else}:\n    {print} 'Sin cartas extra'\n# Ganador\n{if} puntos > 21 {or} puntos_repartidor > puntos {or} puntos_repartidor == 21:\n    {print} 'Perdiste'\n{elif} puntos_repartidor < 17:\n    {print} 'El repartidor toma una carta extra. Es un... ' carta_repartidor_3\n    {if} carta_repartidor_3 == 'Jota' {or} carta_repartidor_3 == 'Reina' {or} carta_repartidor_3 == 'Rey':\n        puntos_repartidor = puntos_repartidor + 10\n    {elif} carta_repartidor_3 == 'As':\n        {if} puntos_repartidor < 11:\n            puntos_repartidor = puntos_repartidor + 11\n        {else}:\n            puntos_repartidor = puntos_repartidor + 1\n    {else}:\n        puntos_repartidor = puntos_repartidor + carta_repartidor_3\n    {print} 'El repartidor tiene ' puntos_repartidor ' puntos ahora'\n    {if} puntos_repartidor < 21 {and} puntos_repartidor > puntos:\n        {print} 'Pierdes'\n    {else}:\n        {print} 'Ganas'\n{elif} puntos > puntos_repartidor {and} puntos < 21:\n    {print} '¡Ganaste!'\n```\n"
                start_code: '# pon tu código aquí'
    years:
        name: Año Nuevo
        description: ¡Cuenta regresiva para el año nuevo!
        default_save_name: Cuenta atrás para el Año Nuevo
        levels:
            11:
                story_text: "En este nivel puedes usar el comando `{for}` numero `{in}` `{range}` para la cuenta regresiva al año nuevo.\n\n### Ejercicio\n¡Rellena los espacios en blanco y haz que el código funcione!\n"
                example_code: "```\n{for} numero {in}{range}_{to}_\n         {print} numero\n{print} 'Feliz año nuevo!\n```\n"
                start_code: '# ponga su código aquí'
#    next:
#        name: ¿Qué es lo siguiente?
#        description: ¿Qué es lo siguiente?
#        default_save_name: next
#        levels:
#            2:
#                story_text: "## ¿Qué es lo siguiente?\nEn este nivel aprendiste qué es una variable y como la puedes usar para hacer tus aventuras más interactivas.\nPero... ¡esa no es la única cosa que puedes hacer con variables! También puedes usar variables para hacer listas.\n¡Incluso puedes dejar que Hedy escoja una palabra aleatoria de una lista, lo que te permite hacer juegos reales!\n¡Echa un vistazo rápido del próximo nivel!\n"
#                start_code: "{print} ¡Vamos al próximo nivel!"
#            13:
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                story_text: "## ¿Qué es lo siguiente?\nCon el programa de abajo puedes calcular si pasaste una materia en la escuela (entonces, la nota es de seis o mayor).\nPuedes ver que este código es muy ineficiente debido a que hay la línea de código muy larga en la línea 5.\nTodas las distintas notas desde 1 hasta 5 tenían que ser programadas por separado. Por suerte para ti, en el próximo nivel vas a aprender a reducir la longitud de este código larguísimo.\n"
#                example_code: "```\nprimera_nota = {ask} '¿Que nota tuviste en el primer examen?'\nsegunda_nota = {ask} '¿Que nota tuviste en la segunda nota?'\ntotal {is} primera_nota + segunda_nota\nnota_promedio {is} total / 2\n{if} nota_promedio = 1 {or} nota_promedio = 2 {or} nota_promedio = 3 {or} nota_promedio = 4 {or} nota_promedio = 5\n    {print} '¡Oh no! Reprobaste la materia...'\n{else}\n    {print} '¡Genial! ¡Aprobaste la materia!'\n```\n"
#            4:
#                start_code: "{print} '¡Vamos al siguiente nivel!'"
#                story_text: "En los niveles anteriores, ya aprendiste a usar `{at} {random}`, lo que hizo que tus juegos fueran diferentes cada vez que ejecutabas el código.\nPero no es realmente interactivo, el jugador no tiene ninguna influencia en lo que sucede en el juego.\n\nEn el siguiente nivel aprenderá el comando `{if}`, que le permite dar diferentes respuestas en su programa. De esta manera, puede programar una contraseña secreta para su computadora, por ejemplo.\n¡Así que vamos a echar un vistazo!\n\n```\ncontraseña {is} {ask} '¿Cuál es la contraseña correcta?'\n```\n"
#            9:
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                story_text: "¡Lo estás haciendo genial! En este nivel nos enfrentamos con un pequeño problema. Aprendiste a repetir líneas, pero ¿que tal si solo quieres cambiar la línea un poquito?:\nPor ejemplo, si quieres cantar la canción 'if you're happy and you know it'. Luciría así:\n\nSi también quieres decir el verso 'stomp your feet', y el siguiente, y el siguiente, tendrías que cambiar el código por completo.\nEn en el siguiente nivel aprenderás el comando `{for}` ¡que te permitirá hacer una lista de acciones y repetir el código con otra acción cada vez!\n¡Por favor, échale un vistazo!\n"
#                example_code: "```\n{repeat} 2 {times}\n    {print} 'si eres feliz y lo sabes, aplaude así'\n    {print} 'si eres muy feliz y lo quieres compartir'\n    {print} 'si eres muy feliz y lo quieres compartir, aplaude así '\n```\n"
#            14:
#                story_text: "## ¿Qué es lo siguiente?\nEn el juego de abajo el código pregunta se asegura que el jugador pueda jugar tanto como quiera...\nPero el código es muy largo y poco efectivo. También, ¿qué tal si el jugador quiere jugar 101 juegos en lugar de 100?\n¿No puedes jugar infinitamente?\n¡En el próximo juegos vas a aprender un comando que hace todo esto más fácil!\n"
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                example_code: "```\njuego {is} 'en marcha'\n{for} i {in} {range} 1 {to} 100\n    {if} juego {is} 'en marcha'\n        respuesta = {ask} '¿Quieres continuar?'\n        {if} respuesta {is} 'no'\n            juego {is} 'terminado'\n        {if} respuesta {is} 'sí'\n            {print} 'Ok vamos a continuar'\n```\n"
#            1:
#                story_text: "## ¿Qué es lo siguiente?\n¡Felicidades! Terminaste el nivel. Seguro ya hiciste algunos programas increíbles, pero aún falta mucho que descubrir de Hedy.\n\nQuizás te diste cuenta que en el primer nivel el comando `{echo}` puede solo guardar un poco de información al mismo tiempo.\nPor ejemplo, en la aventura del restaurant, podías repetir lo que el cliente quería comer, o lo que querían beber, pero no en una sola oración.\n"
#                start_code: "{print} ¡Vamos!"
#                story_text_2: "Si el jugador escribe hamburguesa y refresco, no puedes decir \"entonces te gustaría una hamburgeusa y un refresco\", pero lo tienes que hacer en dos líneas separadas. \nTambién, el comando`{echo}` solamente repite la palabra al final de la oración. Entonces no puedes decir \"¡Tu hamburguesa viene en camino!\".\n\nEse cambia en el nivel 2. En el nivel 2 vas a aprender a trabajar con variables, esto te permitirá guardar múltiples pedazos de información y mostrarlos por pantalla en cualquier lugar que quieras.\n¡Entonces vamos al próximo nivel!\n"
#                example_code: "```\n{print} Bienvenido a Hedy's\n{ask} ¿Qué te gustaría comer?\n{echo} Entonces quieres \n{ask} ¿Qué te gustaría beber?\n{echo} Entonces quieres \n```\n"
#            3:
#                story_text: "En este nivel has estado practicando con las variables, pero quizás te has encontrado con este error.\n\nIntenta ejecutar este código:\n```\nnombre {is} Sophie\n{print} Mi nombre es nombre\n```\nPor supuesto que querías imprimir `My name is Sophie` pero Hedy imprime `My Sophie is Sophie`.\nEn el siguiente nivel este problema se soluciona utilizando comillas.\n"
#                start_code: "{print} ¡Vamos al próximo nivel!"
#            5:
#                story_text: "## ¿Qué es lo siguiente?\nAhora que has llegado al final de este nivel has aprendido a usar `{ask}` y `{if}`. Por ejemplo le puedes preguntar a tus invitados qué les gustaría comer.\nLo que aún no puedes hacer, es calcular el precio de la cena de todos.\n\nEl siguiente nivel permite sumar, restar y multiplicar en tus programas. De esta manera puedes calcular los precios de tu restaurante, pero también puedes agregar un código secreto para darle a tu familia y amigos un descuento.\nOtra opción en el siguiente nivel es programar tu propio juego de matemáticas, para que tu hermano o hermana menor pueda practicar las tablas de multiplicar.\n¡Velo por ti mismo en el siguiente nivel!\n"
#                start_code: "{print} '¡Al próximo nivel!'"
#                example_code: "```\n{print} 'Bienvenido a McHedy'\norden {is} {ask} '¿Qué te gustaría comer?'\n{print} 'Te gustaría comer ' orden\n{if} orden {is} hamburguesa precio {is} 5\n{if} orden {is} papas fritas precio {is} 2\nbebidas {is} {ask} '¿Qué te gustaría beber?'\n{print} 'Te gustaría ' bebidas\n{print} 'Serán ' precio ' dólares por tu ' orden ' por favor'\n{print} 'Las bebidas son gratis en este nivel porque Hedy no puede calcular el precio aún...'\n```\n"
#            6:
#                story_text: "## ¿Qué es lo siguiente?\n ¡Gran trabajo! Llegaste al final de este nivel, lo que significa que has practicado con `{if}` y `{else}`. Seguro te diste cuenta que tus programas se están haciendo cada vez más largos.\nPor ejemplo, si quieres programar '¡Feliz cumpleaños!'\n\nEso es mucho código para esencialmente las mismas palabras una y otra vez. Por suerte el próximo nivel tiene una solución con el comando `{repeat}`, que te permite repetir una línea de código varias veces.\n"
#                start_code: "{print} '¡Al siguiente nivel!'"
#                example_code: "```\n {print} 'Cumpleaños feliz'\n {print} 'Cumpleaños feliz'\n {print} 'Feliz cumpleaños Hedy'\n {print} 'Cumpleaños feliz'\n ```\n"
#            8:
#                story_text: "¡Gran trabajo! ¡Ya llegaste al final de otro nivel! En este nivel aprendiste a usar varias líneas de código dentro de un comando {if} o {repeat}. Pero aún no puedes combinar ambos...\n¡Buenas noticias! En el próximo nivel se puede poner un {if} dentro de un {if}, o dentro de un comando {repeat}\n"
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                example_code: "```\nrespuesta = {ask} '¿Te gustaría ir al siguiente nivel?'\n{if} respuesta {is} sí\n    {print} '¡Genial! Puedes usar el comando {repeat} dentro del comando {if}!'\n    {print} '¡Hurra!'\n    {print} '¡Hurra!'\n    {print} '¡Hurra!'\n{else}\n    {print} 'Okay,¡puedes esperar un poco más!'\n```\n"
#            11:
#                story_text: "## ¿Qué es lo siguiente?\nQuizás has tratado de usar números decimales en tu aventura del restaurant. Si lo hiciste, probablemente te diste cuenta que Hedy aún no los entiende y siempre los redondea.\nA partir del próximo nivel puedes usar números decimales.\n"
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                example_code: "```\nhamburguesa {is} 5\nbebida {is} 2\ntotal {is} hamburguesa + bebida\nprint 'Haz ordenado una hamburguesa y una bebida'\nprint 'Eso cuesta ' total ' dólares por favor'\n```\nEl código de arriba funciona, porque la hamburguesa cuesta 5 dólares y la bebida 2 dólares. Pero si quieres cobrar 50 centavos más, ¡el programa no va a funcionar! Como el código de abajo:\n```\nhamburguesa {is} 5.50\nbebida {is} 2.30\ntotal {is} hamburguesa + bebida\nprint 'Haz ordenado una hamburguesa y una bebida'\nprint 'Eso cuesta ' total ' dólares por favor'\n```\n¡Ve al próximo nivel para hacer que este código funcione!\n"
#            12:
#                story_text: "En los niveles anteriores, aprendiste cómo colocar dos comandos `{if}` uno dentro del otro. Esto funciona bien, pero te da códigos muy largos y poco prácticos como este:\n\nEn este sistema, debe proporcionar tanto el nombre de usuario correcto como la contraseña correcta.\nEn el siguiente nivel, aprenderá el comando `{and}` que hará que este código sea mucho más breve y comprensible.\n¡Échale un vistazo!\n"
#                start_code: "{print} '¡Vamos al siguiente nivel!'"
#                example_code: "```\nnombre_de_usuario {is} {ask} '¿Cuál es tu nombre de usuario?'\ncontraseña {is} {ask} '¿Cuál es tu contraseña?'\n{if} nombre_de_usuario {is} 'Hedy'\n    {if} contraseña {is} 'secreto'\n        {print} '¡Bienvenida, Hedy!'\n    {else}\n        {print} '¡Acceso denegado!'\n{else}\n    {print} '¡Acceso denegado!'\n```\n"
#            18:
#                story_text: "## ¿Qué es lo siguiente?\n¡Felicitaciones! ¡Llegaste al nivel final de Hedy! El código que has creado hasta aquí puede ser copiado a entornos de programación de Python reales como replit o PyCharm, y ¡puedes continuar aprendiendo a partir de ahí!\nSin embargo, ten en cuenta que Python solo puede leer comandos en inglés, por lo que si has estado programando en español tendrás que empezar a usar inglés.\n"
#                start_code: "{print} ('¡¡¡Gran trabajo!!!')"
#            15:
#                story_text: "## ¿Qué es lo siguiente?\nEn el siguiente nivel nos estamos acercando un poco más a código de Python real. También vas a aprender a unir dos listas.\nDe esta manera puedes programar código en el que el animal está emparejado al sonido correcto.\nPorque los dos programas de abajo, ¡no tienen sentido!\n"
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                example_code: "```\nanimales = 'pollo', 'caballo', 'vaca'\nsonidos = 'cacarear', 'relinchar', 'muu'\n{for} animal {in} animales\n    {print} 'Un ' animal ' dice ' suena {in} {at} {random}\n```\nTambién podrías intentar que funcione de esta manera, pero...\n```\nanimales = 'pollo', 'caballo', 'vaca'\nsonidos = 'cacarear', 'relinchar', 'muu'\n{for} animal {in} animales\n    {for} sonido {in} sonidos\n        {print} 'Un 'animal' dice 'sonido'\n```\n"
#            16:
#                story_text: "## ¿Qué es lo siguiente?\nEn el próximo nivel es momento de un nuevo comando. Quizás te hayas dado cuenta que en los niveles `{if}` y `{else}` algunas veces no son suficientes.\nPor ejemplo en este programa:\n"
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                example_code: "```\n{print} '¿Que hay para comer hoy?'\nopciones = ['pizza', 'broccoli', 'lentejas']\nelección = opciones {at} {random}\n{if} elección = 'pizza'\n    {print} '¡Rico! ¡Pizza!'\n{else}\n    {print} 'No me gusta...'\n```\n"
#                story_text_2: En este código sería genial tener 2 `{else}` seguidos, así tienes una opción para el brócoli y otra para las lentejas. ¡El siguiente nivel viene con el nuevo comando `{elif}` que hace esto posible! ¡Ve a al próximo nivel para usarlo ahora!
#            7:
#                story_text: "Ahora has aprendido a repetir una línea de código. Esto es útil, pero no siempre es suficiente. Algunas veces quieres repetir varias líneas de código a la vez.\nEl próximo nivel te permite agrupar varias líneas de código, ¡y repetir ese pequeño grupo de líneas a la vez!\n"
#                start_code: "{print} '¡Vamos al siguiente nivel!'"
#                example_code: "```\n{repeat} 5 {times} {print} '¡En el próximo nivel puedes repetir varias líneas de código a la vez!'\n```\n"
#            10:
#                start_code: "{print} '¡Vamos al próximo nivel!'"
#                story_text: "## ¿Qué es lo siguiente?\nHas llegado al final de este nivel, ¡lo estás haciendo muy bien! Estás a punto de ir al próximo nivel. En los niveles superiores, Hedy se va a enfocar más y más en enseñarte el lenguaje de programación Python.\nEn Python no hay comando `{repeat}`, pero si hay un comando que funciona como el {repeat}. ¿Tienes curiosidad de como decir `{repeat}` en el lenguaje Python? ¡Ya lo vamos a descubrir!\n"
#            17:
#                start_code: "{print} '¡Vamos al siguiente nivel!'"
#                story_text: "## ¿Qué es lo siguiente?\nEn el siguiente nivel vas a aprender la manera en que Python usa `{print}`.\n"
    print_command:
        levels:
            18:
                example_code_2: "```\ntemperatura = 25\n{print}('Hay ', temperatura, ' grados fuera')\n```\n"
                story_text_3: El último cambio que tenemos que hacer para conseguir el código en Python es cambiar `{ask}` por `{input}`.
                example_code_3: "```\n{print}('¡Mi nombre es Hedy!')\nnombre = {input}('¿Cómo te llamas?')\n{print}('Así que te llamas ', nombre)\n```\n"
                start_code: "nombre = 'Hedy'\n{print}('Mi nombre es ', nombre)"
                story_text: "¡Hemos llegado a código real de Python! Eso significa que tendremos que usar paréntesis con `{print}` y `{range}` de ahora en adelante.\nTambién significa que puedes usar el código de Hedy desde este nivel en cualquier entorno de Python mientras uses comandos en inglés. Si hasta ahora no lo has hecho, puedes cambiar el interruptor en el menú de comandos para hacerlo."
                example_code: "```\n{print}('¡Hola!')\n{for} i {in} {range}(1, 10):\n    {print}('Esta es la línea ', i)\n```\n"
                story_text_2: Si quieres imprimir más de una línea, tienes que separarla por comas.
            1:
                story_text: "## El comando print\nPuedes imprimir texto por pantalla usando el comando `{print}`.\n"
                story_text_2: "### Ejercicio\nEn Hedy puedes encontrar ejercicios en cada aventura. Un ejercicio te permite practicar los nuevos comandos y conceptos, y te permite darle tu propio toque a los códigos de ejemplo.\nEn este ejercicio verás un espacio en blanco rosa. Tienes que rellenar algo en el lugar del espacio en blanco antes de que se pueda ejecutar tu código.\n\nRellena el comando `{print}` en el espacio en blanco y después añade cinco líneas de código. Cada línea tiene que empezar con un comando `{print}`.\n¡Diviértete!\n"
                example_code: "```\n{print} ¡Hola, programador!\n{print} ¡Bienvenido a Hedy!\n```\n"
                example_code_2: "```\n_ ¡Hola!\n```\n"
                start_code: "{print} ¡Bienvenido a Hedy!\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} '¡Preparado o no, allá voy!'"
                story_text: "Ahora vamos a cambiar la sangría un poco. Cada vez que necesitemos una sangría, necesitamos `:` en la línea antes de la sangría.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} '¡Preparado o no, allá voy!'\n```\n"
        name: "{print}"
        description: Introducción al comando print
        default_save_name: print
    is_command:
        name: "{is}"
        description: introducción al comando es
        default_save_name: comando_es
        levels:
            2:
                story_text: "## Variables\nPuedes nombrar una palabra con `{is}`. A esto se le llama **variable**. En este ejemplo creamos una variable llamada nombre y una variable llamada edad. Puedes usar la palabra nombre en cualquier parte de tu código y será reemplazada por Hedy, tal que así:\n"
                example_code: "```\nnombre {is} Hedy\nedad {is} 15\n{print} nombre tiene edad años\n```\n"
                story_text_2: "### Ejercicio\n¡Hora de crear tus propias variables!\nEn el código de ejemplo hicimos un ejemplo de la variable `favorite_animals`. En la línea 1 se crea la variable, y en la línea 2 usamos la variable en un comando de impresión.\nLo primero de todo, termina nuestro ejemplo rellenando tu animal favorito en el hueco en blanco. Después haz 3 códigos como estos por tí mismo. Elige una variable, y establece la variable con el comando {is}. Entonces úsala con un comando {print}, como hicimos.\n"
                example_code_2: "```\nanimales_favoritos es _\n{print} me gusta animales_favoritos\n```\n"
                start_code: "nombre {is} Hedy\nedad {is} 15\n{print} nombre tiene edad años"
            14:
                start_code: "edad = {ask} '¿Cúantos años tienes?'\n{if} edad < 13\n    {print} '¡Eres más jóven que yo!'\n{else}\n    {print} '¡Eres mayor que yo!'"
                story_text: "Vamos a aprender más cosas nuevas. Quizá ya las conozcas de matemáticas, el `<` y `>`.\nEl `<` comprueba si el primer número es menor que el segundo, por ejemplo edad `<` 12 comprueba si edad es menor que 12.\nSi queieres comprobar si el primer número es menor o igual que el segundo, puedes usar `<=`, por ejemplo edad `<=` 11.\nEl `>` comprueba si el primer número es mayor que el segundo, por ejemplo puntos `>` 10 comprueba si puntos es mayor que 10.\nSi quieres comprobar si el primer número es mayor o igual que el segundo, puedes usar `>=`, por ejemplo puntos `>=` 11.\nUsa estas comparaciones en un `{if}`, tal que así:\n"
                example_code: "```\nedad = {ask} '¿Cúantos años tienes?'\n{if} edad > 12\n    {print} '¡Eres mayor que yo!'\n```\n"
                story_text_2: "A partir de este nivel, si quieres comparar exactamente, puedes usar dos signos de igualdad. Esto es lo que hacen la mayoría de los lenguajes de programación:\n"
                example_code_2: "```\nnombre = {ask} '¿Cómo te llamas?'\n{if} nombre == 'Hedy'\n    {print} '¡Cómo molas!'\n```\n"
                story_text_3: "También puedes comparar si algo *no* es igual a otra cosa usando `!=` tal que así:\n"
                example_code_3: "```\nnombre = {ask} '¿Cómo te llamas?'\n{if} nombre != 'Hedy'\n    {print} 'Tu no eres Hedy'\n```\n"
    add_remove_command:
        levels:
            3:
                story_text_3: "### Exercise\nPrueba los nuevos comandos en este restaurante virtual. Añade el sabor que el jugador está esperando a la lista y elimina los sabores a los que es alérgico.\n"
                story_text: "## Add to\nPuedes añadir objetos a la lista con el comando `{add} {to}`. Para añadir un objecto a una lista puedes escribir: `{add} penguin {to} animals` o puedes usar el comando `{ask}` como en el código de ejemplo.\n"
                example_code: "```\nanimales {is} perro, gato, canguro\ngusta {is} {ask} ¿Cúal es tu animal preferido?\n{add} gusta {to_list} animales\n{print} Yo elijo animales {at} {random}\n```\n"
                story_text_2: "## Remove from\nSi puedes añadir objetos a una lista, por supuesto que también puedes quitarlos. Esto se hace con el comando `{remove} {from}`.\n"
                example_code_2: "```\nanimales {is} perro, gato, canguro\nno_gustar {is} {ask} ¿Qué animal no te gusta?\n{remove} no_gustar {from} animales\n{print} Elijo animales {at} {random}\n```\n"
                example_code_3: "```\n{print} Batido misterioso\nsabores {is} fresa, chocolate, vainilla\nespera {is} {ask} ¿Qué sabor estás esperando?\n_\nalergias {is} {ask} ¿Eres alégico a cualquiera de los sabores?\n_\n{print} Recibe un batido de sabores {at} {random}\n```\n"
                start_code: "animales {is} perro, gato, canguro\ngustar {is} {ask} ¿Cúal es tu animal preferido?\n{add} gustar {to_list} animales\nno_gustar {is} {ask} ¿Qué animal no te gusta?\n{remove} no_gustar {from} animales\n{print} Elijo animales {at} {random}"
        name: "{add} {to} & {remove} {from}"
        description: introducción a add to y remove from
        default_save_name: add_remove_command
    sleep_command:
        name: "{sleep}"
        description: introducción al comando sleep
        default_save_name: sleep_command
        levels:
            2:
                story_text: "Otro comando nuevo en este nivel es `{sleep}`, el cual pausa tu programa durante un segundo. Si escribes un número despues del comando {sleep}, el programa se pausa por esa cantidad de segundos.\n\n### Ejercicio\nPractica este nuevo comando haciendo un código por tí mismo en que uses el comando {sleep} al menos 3 veces. En cada comando {sleep} el tiempo de pausa debe ser diferente.\n"
                example_code: "```\n{print} Mi color favorito es...\n{sleep} 2\n{print} ¡verde!\n```\n"
                start_code: "{print} Mi color favorito es...\n{sleep} 2\n{print} ¡verde!"
    if_command:
        name: "{if} & {else}"
        description: Introducción al comando if
        default_save_name: if_command
        levels:
            5:
                story_text: "## If... else....\nEn el nivel 4 hay algo nuevo, !`{if}`! Con `{if}` puedes elegir entre dos opciones diferentes.\nEste código imprime genial si pones Hedy como nombre, y boo! si pones cualquier otra cosa.\n`{ask}` y `{print}` todavía funcionan como hicieron en el nivel 4.\n"
                example_code: "```\nnombre {is} {ask} '¿cómo te llamas?'\n{if} nombre {is} Hedy {print} 'genial' {else} {print} 'boo!'\n```\n"
                story_text_2: "A veces el código con un `{if}` se alarga mucho y no encaja bien en una linea. <br> también puedes dividir el código en dos líneas, empezando la segunda línea en el `{else}` tal que así:\n"
                example_code_2: "```\nnombre {is} {ask} '¿cúal es tu nombre?'\n{if} nombre {is} Hedy {print} 'genial'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### Ejercicio\nIntenta crear tu propio código con `{if}` y `{else}`. Si quieres puedes usar el código de ejemplo.\n"
                example_code_3: "```\nrespuesta {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ '¡Gran trabajo!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                start_code: "nombre {is} {ask} '¡cúal es tu nombre?'\n{if} nombre {is} Hedy {print} 'genial'\n{else} {print} 'boo!'"
            8:
                start_code: "nombre {is} {ask} '¿Cómo te llamas?'\n{if} nombre {is} Hedy\n    {print} 'Bienvenido Hedy'\n    {print} '¡Puedes jugar en tu ordenador!'\n"
                example_code: "```\nnombre {is} {ask} '¿Cómo te llamas?'\n{if} nombre {is} Hedy\n    {print} 'Bienvenido Hedy'\n    {print} '¡Puedes jugar en tu ordenador!'\n```\n"
                story_text: "## If... Else...\nHas aprendido a repetir un bloque de líneas de código tras un comando `{repeat}`.\nAhora puedes usar la sangría para hacer bloques tras un comando {if} o {else}.\nComprueba el código de ejemplo.\n\n### Ejercicio\nAñade un comando {else} al código de ejemplo. Haz un bloque de línea usando sangría. Haz esto empezand cada línea con 4 espacios.\n"
    repeat_command:
        name: "{repeat}"
        description: comando repeat
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## Repeat! Repeat! Repeat!\nEl nivel 7 añade el comando `{repeat}`.  `{repeat}` se puede usar para ejecutar una línea de código varias veces. Tal que así:\n\n### Ejercicio\nJuega con el comando repeat. ¿Puedes ahora hacer la canción de cumpleaños feliz en sólo 3 líneas de código en vez de en 4?\n"
                example_code: "```\n{repeat} 3 {times} {print} '¡Hedy es divertido!'\n```\n"
                start_code: "{print} 'cumpleaños feliz'\n{print} 'cumpleaños feliz'\n{print} 'cumpleaños feliz querido Hedy'\n{print} 'cumpleaños feliz'\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hola a todos'\n    {print} 'Esto se imprimirá 5 veces'"
                story_text: "### Repetir comandos y sangría\nEn este nivel puede repetir varias líneas de código con sólo 1 comando repeat.\nHaz esto haciendo un bloque de líneas que quieras repetir.\nLas líneas en este bloque necesitarán **sangría** .\nEso significa poner cuatro espacios al inicio de cada línea. También tendrás que sangrar cuando quieras crear un bloque de una sola línea.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hola a todos'\n    {print} 'Todo esto se repite 5 veces'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    comida = {ask} '¿Qué quieres?'\n    {if} comida {is} pizza\n        {print} '¡genial!'\n    {else}\n        {print} 'la pizza es mejor'"
                story_text: "En este nivel no puedes usar varias líneas sólo con `{if}` y `{repeat}`, ¡pero si puedes juntarlas!\nEn este ejemplo ves un comando `{if}` dentro de un comando `{repeat}`. También se permite lo contrario, y también un `{if}` se permite en un `{if}` y un `{repeat}` en un `{repeat}`.\n¡Pruébalo!\n"
                example_code: "```\n{repeat} 3 {times}\n    comida = {ask} '¿Qué quieres?'\n    {if} comida {is} pizza\n        {print} '¡genial!'\n    {else}\n        {print} 'la pizza es mejor'\n```\n"
    repeat_command_2:
        name: "{repeat} 2"
        levels:
            7:
                story_text_2: "Otra cosa interesante que puedes hacer con el comando `{repeat}` es usar variables para establecer las veces que algo debería repetirse. En el código de ejemplo puedes ver que primero preguntamos a la persona qué edad tiene.\nEntonces, en la línea 3, la pregunta se repite 'edad' veces. Así que hemos usado la variable 'edad' con el comando `{repeat}`.\n"
                example_code: "```\n{repeat} 2 {times} respuesta = {ask} '¿Sabías que puedes hacer una pregunta varias veces?'\n{if} respuesta {is} sí {repeat} 2 {times} {print} '¡Ya lo sabías!'\n{else} {repeat} 3 {times} {print} '¡Has aprendido algo nuevo!'\n```\n"
                example_code_2: "```\n{print} '¡Viva! ¡Es tu cumpleaños!'\nedad = {ask} '¿Cuántos años tienes?'\n{repeat} edad {times} {print} '¡Hip Hip Hurra!'\n```\n"
                start_code: "{repeat} 2 {times} respuesta = {ask} '¿Sabías que puedes hacer una pregunta varias veces?'\n{if} respuesta {is} sí {repeat} 2 {times} {print} '¡Ya lo sabías!'\n{else} {repeat} 3 {times} {print} '¡Has aprendido algo nuevo!'"
                story_text: "## Repeat con otros comandos y variables\nAhora has practicado el comando `{repeat}` en combinación con el comando `{print}`, pero ¿sabías que también puedes usar otros comandos con `{repeat}` ?\nEn este ejemplo puedes ver que `{repeat}` también se puede usar con un comando `{ask}`, `{if}` o `{else}`.\n"
            8:
                example_code: "```\n_ {print} '¿Conoces al hombre magdalena?'\n_ {repeat} 2 {times}\n_ {print} 'El hombre magdalena'\n_ {print} '¿Conoces al hombre magdalena, que vive en la Calle Drury?'\n```\n"
                story_text: "### ¿En el bloque o no?\nEn este nivel tienes que pensar con cuidado que líneas de código deben ir en el bloque y cuales no.\nPor ejemplo: Si quieres cantar la canción *el hombre magdalena*. Sólo quieres que la línea con 'el hombre magdalena' se repita dos veces.\nEsto significa que la última línea no debe comenzar con sangría ya que no pertenece al bloque.\nSi comienzas la última línea con sangría la canción será incorrecta.\n\n## Ejercicio\nCada linea en el ejemplo empieza con un espacio en blanco. Elimina los espacios en blanco e intenta averiguar qué línea necesita sangría y cual no para hacer la canción del hombre magdalena.\n"
                start_code: "{repeat} 3 {times}\n    {print} 'Esta línea se repetirá...'\n    {print} 'Esta también...'\n{print} '¡pero esta no!'"
        description: comando repeat 2
        default_save_name: repeat_command_2
    and_or_command:
        name: "{and} & {or}"
        description: introducción a y o
        default_save_name: y o
        levels:
            13:
                start_code: "nombre = {ask} '¿cómo te llamas?'\nedad = {ask} '¿cuántos años tienes?'\n{if} nombre {is} 'Hedy' {and} edad {is} 2\n    {print} '¡Tú eres el verdadero Hedy!'"
                story_text: "¡Ahora vamos a aprender `{and}` y `{or}`! Si quieres comprobar dos sentencias, no tienes que usar dos `{if}`s pero puedes usar `{and}` y `{or}`.\n\nSi usas `{and}`, ambas sentencias, a la izquierda y derecha de `{and}` tienen que ser verdaderas. También podemos usar `{or}`. Entonces sólo una sentencia tiene que ser correcta."
                example_code: "```\nnombre = {ask} '¿cómo te llamas?'\nedad = {ask} '¿cuántos años tienes?'\n{if} nombre {is} 'Hedy' {and} edad {is} 2\n    {print} '¡Tú eres el verdadero Hedy!'\n```\n"
    while_command:
        name: "{while}"
        levels:
            15:
                example_code: "```\nrespuesta = 0\n{while} respuesta != 25\n    respuesta = {ask} '¿Cuánto es 5 veces 5?'\n{print} 'La respuesta es correcta'\n```\n"
                start_code: "respuesta = 0\n{while} respuesta != 25\n    respuesta = {ask} '¿Cuánto es 5 veces 5?'\n{print} 'La respuesta es correcta'"
                story_text: "Vamos a aprender un nuevo bucle, ¡el bucle `{while}`! Continuamos el bucle mientras la sentencia sea verdadera.\nAsí que no olvides cambiar el valor en el bucle.\n\nEn el código de ejemplo, continuamos hasta que se de una respuesta verdadera.\nSi nunca se da la respuesta correcta, 'el bucle nunca termina!"
        description: while
        default_save_name: while_command
    elif_command:
        name: "{elif}"
        description: elif
        default_save_name: elif
        levels:
            17:
                story_text: "En este nivel también puedes usar un comando nuevo: `{elif}`. `{elif}` es la abreviatura para `{else}` `{if}` y lo necesitas cuando quieres hacer 3 (o más) opciones.\n¡Compruébalo!\n"
                example_code: "```\npremios = ['1 millón de dólares', 'una tarta de manzana', 'nada']\ntu_premio = premios[{random}]\n{print} 'Ganaste ' tu_premio\n{if} tu_premio == '1 millón de dólares' :\n    {print} '¡Sí! ¡Eres rico!'\n{elif} tu_premio == 'una tarta de manzana' :\n    {print} '¡Delicioso, una tarta de manzana!'\n{else}:\n    {print} 'Más suerte la próxima vez..'\n```\n"
                start_code: "premios = ['1 millón de dólares', 'una tarta de manzana', 'nada']\ntu_premio = premios[{random}]\n{print} 'Ganaste ' tu_premio\n{if} tu_premio == '1 millón de dólares' :\n    {print} '¡Sí! ¡Eres rico!'\n{elif} tu_premio == 'una tarta de manzana' :\n    {print} '¡Delicioso, una tarta de manzana!'\n{else}:\n    {print} 'Más suerte la próxima vez..'"
    rock_2:
        name: Piedra, papel, tijeras 2
        description: Parte 2 de piedra, papel, tijeras
        default_save_name: piedra_2
        levels:
            2:
                story_text: "Ahora que has aprendido como usar el comando `{ask}, ¡también puedes hacer tu código interactivo de piedra, papel, tijeras!\n\n### Ejercicio\nHaz el código interactivo de piedra, papel, tijeras añadiendo el comando `{ask}` y una pregunta a tu código de piedra, papel, tijeras.\n"
                example_code: "```\nopción es _\n{print} Yo elijo opción\n```\n"
                start_code: "# pon tu código aquí"
    harry_potter:
        name: Harry Potter
        description: Aventuras de Harry Potter
        default_save_name: Harry Potter
        levels:
            10:
                start_code: '# pon tu código aquí'
                story_text: "### Ejercicio\nTambién podemos hacer un adivino ambientado en Harry Potter. Rellena los huecos en blanco de forma que se impriman 9 líneas.\n**Extra** Cambia la temática del adivino a algo distinto, como tu libro, película o espectáculo de la tele favoritos.\n"
                example_code: "```\ncasas = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nasignaturas = pociones, defensa frente a artes oscuras, encantos, transfiguración\nmiedos = Voldemort, arañas, fallar tu examen de LECHUZA\nnombres = Harry, Ron, Hermione\n_\n_ {print} nombre ' pertenece a ' casas {at} {random}\n_ {print} nombre ' es mejor en ' asignaturas {at} {random}\n_ {print} nombre ' su gran miedo es ' miedos {at} {random}\n```\n"
    ask_command:
        name: "{ask}"
        description: Introducción al comando ask
        default_save_name: comando_ask
        levels:
            1:
                story_text: "## El comando ask\nAhora que puedes usar el comando `{print}`, estás preparado para usar el siguiente comando: `{ask}`. Con el comando `{ask}`, puedes hacer una pregunta. Compruébalo:\n"
                example_code: "```\n{print} ¡Hola!\n{ask} ¿Cómo te llamas?\n```\n"
                story_text_2: "## El comando echo\nSi quieres que el ordenador te repita la respuesta, puedes usar el comando `{echo}`. Ten en cuenta que la respuesta es repetida al final de la frase, como este ejemplo después del hola.\n"
                story_text_3: "### Ejercicio\nPrueba los comandos `{ask}` y `{echo}`. Lo primero, rellena los huecos en blanco para hacer que el programa funcione.\nDespués, haz 2 preguntas más usando el comando `{ask}`, tras cada `{ask}` usa un `{echo}` para imprimir la respuesta en pantalla.\n"
                example_code_2: "```\n{print} ¡Hola!\n{ask} ¿Cómo te llamas?\n{echo} hola\n```\n"
                example_code_3: "```\n_ ¿Qué tal estás?\n_\n```\n"
                start_code: "{print} ¡Hola!\n{ask} ¿Cómo te llamas?\n{echo} hola\n"
            2:
                story_text: "## El comando ask\nAhora que podemos usar **variables** en nuestros códigos, ya no necesitamos el comando `{echo}`.\nPodemos usar variables para almacenar las respuestas a nuestras pregunta y de esta manera podemos usar la respuesta a varias preguntas en nuestros códigos.\nCompruébalo:\n\n¡De esta manera tu código se convierte interactivo!\n"
                example_code: "```\nnombre {is} {ask} ¿Cómo te llamas?\n{print} Hola nombre\nedad {is} {ask} ¿Cúantos años tienes?\n{print} nombre tiene edad años.\n```\n"
                story_text_2: "### Ejercicio\nEn la pestaña anterior has practicado estableciendo variables con el comando `{is}`.\nHas creado al menos 3 variables y las has usado con el comando print.\nAhora, en vez de establecer las variables queremos que hagas las variables interactivas, como hicimos en nuestro ejemplo.\n\nCopia tu código de la pestaña anterior y haz las variables interactivas usando el comando `{ask}`.\n"
                example_code_2: "```\nanimales_favoritos {is} {ask} ¿Cuál es tu animal favorito?\n{print} Me gusta animales_favoritos\n```\n"
                start_code: "nombre {is} {ask} ¿Cómo te llamas?\n{print} Hola nombre\nedad {is} {ask} ¿Cúantos años tienes?\n{print} nombre tiene edad años."
    random_command:
        name: "{random}"
        description: introducción al comando random
        default_save_name: comando_random
        levels:
            3:
                story_text: "## At random\nEn este nivel puedes hacer una lista usando el comando `{is}`. Puedes dejar que el ordenador elija un objeto aleatorio de esa lista. Esto se hace con `{at} {random}`.\n"
                example_code: "```\nanimales {is} perros, gatos, canguros\n{print} animales {at} {random}\n```\n"
                story_text_2: "También puedes usar el comando `{at} {random}` en una frase.\n"
                example_code_2: "```\ncomida {is} sandwich, trozo de pizza, ensalada, burrito\n{print} Voy a tomar un/a comida {at} {random} para comer.\n```\n"
                start_code: "animales {is} perro, gato, canguro\n{print} animales {at} {random}\n"
                story_text_3: "### Ejercicio\nPrueba el comando `{at} {random}` haciendo tu propio espectáculo (como los de la tele) donde eliges una puerta o maleta y ¡tendrá un gran premio!\n¿Puedes hacerlo? Ya hemos puesto las primeras líneas en el código de ejemplo.\n"
                example_code_3: "```\n{print} ¡El gran espectáculo!\n{print} Hay 3 maletas delante tuyo...\nelegida {is} {ask} ¿Qué maleta eliges?\npremios {is} _\n_\n```\n"
            16:
                start_code: "fruta = ['manzana', 'plátano', 'cereza']\n{print} fruta[random]"
                story_text: "Vamos a hacer listas a la manera de Python, con corchetes alrededor de las listas! También mantendremos las comillas en cada objeto como hemos aprendido en los niveles anteriores.\nUsamos corchetes para señalar una posición en una lista. El comando {at} {random} ya no se puede utilizar."
                example_code: "```\namigos = ['Ahmed', 'Ben', 'Cayden']\nnumeros_suerte = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'el número de la suerte de ' amigos[i]\n    {print} 'es ' numeros_suerte[i]\n```\n"
    in_command:
        name: "{in}"
        description: Introducción al comando in
        default_save_name: in_command
        levels:
            5:
                story_text: "## Listas\nCuando queremos comprobar si algo se encuentra en una lista, podemos usar el comando `{in}`.\nEste código imprime ¡bonito! si eliges verde o amarillo, y meh en caso contrario.\n"
                example_code: "```\ncolores_bonitos {is} verde, amarillo\ncolor_favorito {is} {ask} '¿Cúal es tu color favorito?'\n{if} color_favorito {in} colores_bonitos {print} '!bonito!'\n{else} {print} 'meh'\n```\n"
                example_code_2: "```\nanimales is perro, vaca, oveja\nrespuesta is preguntar '¿Cúal es tu animal preferido?'\n_ respuesta _ animales _ '¡También el mío!'\n_ _ 'Mis animales preferidos son perrros, vacas y ovejas'\n```\n"
                story_text_2: "### Ejercicio\nCompleta el código de ejemplo rellenando los huecos en blanco con los comandos que aprendiste.\nCuando completes el código, intenta crear por tí mismo un código y usa una pregunta que se te haya ocurrido.\n"
                start_code: "colores_bonitos {is} verde, amarillo\ncolor_favorito {is} {ask} '¿Cúal es tu color preferido?'\n{if} color_favorito {in} colores_bonitos {print} '¡bonito!'\n{else} {print} 'meh'"
    quotation_marks:
        name: "'comillas'"
        description: Introducción a las comillas
        default_save_name: quotation_marks
        levels:
            4:
                story_text: "## 'Comillas'\nEn el nivel 4 `{ask}` y `{print}` han cambiado.\nDebes poner el texto que quieras imprimir entre comillas.\nEsto es útil, porque puedes imprimir todas las palabras que quieras. También las palabras que solías almacenar algo con `{is}`.\nLa mayoría de los lenguajes de programación también usan comillas al imprimir, asi que nos estamos acercando ¡a la programación real!\n"
                story_text_2: "## Contracciones\n¡Importante! Ten en cuenta que estamos usando comillas, Hedy se confundirá cuando uses el apóstrofe para contracciones como I'm o What's.\nAsegúrate de eliminar esos apóstrofes y cambia la ortografía a I am o What is.\nComprueba el código de ejemplo para ver la forma incorrecta de usar los apóstrofes.\n"
                example_code: "```\n{print} '¡A partir de ahora tienes que usar las comillas!'\nrespuesta {is} {ask} '¿Qué tienes que usar a partir de ahora?'\n{print} 'Tenemos que usar ' respuesta\n```\n"
                example_code_2: "```\n_ Esta es la manera incorrecta de usar apóstrofes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} '¡A partir de ahora tienes que usar las comillas!'\nrespuesta {is} {ask} '¿Qué tienes que usar a partir de ahora?'\n{print} 'Tenemos que usar ' respuesta"
            12:
                story_text: "**Todos los textos tienen que ir entre comillas**\nPara este nivel también tendrás que usar comillas cuando almacenes un texto con `=`:\n"
                example_code: "```\nnombre = 'El Robot Hedy'\n{print} 'Hola ' nombre\n```\n"
                story_text_2: "**Todos los objetos en las listas también necesitan comillas**\nLas listas son textos, así que también necesitan comillas. Ten en cuenta que cada objeto en la lista tiene comillas.\nEsto te permite guardar dos palabras como un objeto en la lista, por ejemplo 'Iron Man'.\n"
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**Todos los textos tras las comparaciones `{if}` también necesitan comillas**\n"
                example_code_3: "```\nnombre = {ask} '¿Cúal es tu nombre?'\n{if} nombre = 'El Robot Hedy'\n    {print} '¡Hola!'\n```\n"
                story_text_4: "**Los números no necesitan comillas**\nPara los números, no utilizas comillas en el `=`:\n"
                example_code_4: "```\npuntuación = 25\n{print} 'Obtuviste ' puntuación\n```\n"
                start_code: "nombre = {ask} '¿Cúal es tu nombre?'\n{if} nombre = 'El Robot Hedy'\n    {print} '¡Hola!'"
    for_command:
        name: "{for}"
        description: comando for
        default_save_name: for
        levels:
            10:
                start_code: "animales {is} perro, gato, pez globo\n{for} animal {in} animales\n    {print} 'Yo amo ' animal"
                story_text: "## For\nEn este nivel aprendemos un nuevo código llamado `{for}`. Con `{for}` puedes hacer una lista y usar todos los elementos.\n`{for}` crea un bloque, como `{repeat}` y `{if}` así todas las líneas dentro del bloque necesita empezar con 4 espacios."
                example_code: "```\nanimales {is} perro, gato, pez globo\n{for} animal {in} animales\n    {print} 'Yo amo ' animal\n```\n"
            11:
                start_code: "{for} contador {in} {range} 1 {to} 5\n    {print} contador"
                story_text: "En este nivel, añadimos una nueva forma del `{for}`. En niveles anteriores, usamos `{for}` con una lista, pero también podemos usar `{for}` con números.\nEsto lo hacemos añadiendo un nombre de variable, seguido por `{in}` `{range}`. Entonces escribimos el número en el que empezar, `{to}` y el número en el que terminar.\n\n¡Prueba este ejemplo a ver qué pasa! Otra vez en este nivel, tendrás que usar sangrías en las líneas situadas debajo de las sentencias `{for}`."
                example_code: "```\n{for} contador {in} {range} 1 {to} 5\n    {print} contador\n```\n"
    maths:
        name: maths
        description: Introducción a maths
        default_save_name: maths
        levels:
            6:
                start_code: "{print} '5 veces 5 es ' 5 * 5"
                story_text: "## 1 + 1\nEn este nivel aprenderás algo nuevo: ahora también puedes calcular.\n\nLa suma es fácil, se escribe como en matemáticas: `5 + 5` por ejemplo. La resta funciona igual, es `5 - 5`.\n\nLa multiplicación es un poco diferente, porque no hay símbolo de multiplicar en tu teclado. 'Sólo busca, no hay realmente!\nEso es porque multiplicamos con el asterísco sobre el 8: `5 * 5`. Leelo como \"5 veces 5\" para recordarlo mejor.\n"
                example_code: "```\n{print} '5 más 5 es ' 5 + 5\n{print} '5 menos 5 es ' 5 - 5\n{print} '5 veces 5 es ' 5 * 5\n```\n"
                story_text_2: "¡También podemos hacer un cambio al cambiar una palabra en una variable! Ahora puedes usar `=` en vez de  `{is}` cuando almacenamos un nombre o número en una variable, tal que así:\n"
                example_code_2: "```\nnombre = Hedy\nrespuesta = 20 + 4\n```\n"
            12:
                start_code: "{print} 'los números decimales ahora tienen que usar un punto'\n{print} 2.5 + 2.5"
                story_text: "**Números decimales**\nHasta ahora, Hedy no permitía números decimales como 1.5, pero ahora permitimos eso. Ten en cuenta que los ordenadores usan el `.` para los números decimales."
                example_code: "```\n{print} 'Dos y media más dos y medio es...'\n{print} 2.5 + 2.5\n```\n"
    clear_command:
        description: comando clear
        default_save_name: clear_command
        levels:
            4:
                start_code: "{print} '3'\n{sleep}\n{clear}\n{print} '2'\n{sleep}\n{clear}\n{print} '1'\n{sleep}\n{clear}\n{print} '¡SORPRESA!'\n"
                story_text: "¡Hora para un nuevo comando! Con `{clear}` puedes limpiar todo el texto de la pantalla de salida. De esta manera puedes evitar que tu pantalla se llene de texto.\n¡Atención! Si usas un comando `{clear}`, recuerda usar un `{sleep}` encima de él. En caso contrario, ¡Hedy limpiará tu pantalla sin darte tiempo a leer lo que pone!\n"
                example_code: "```\n{print} '3'\n{sleep}\n{clear}\n{print} '2'\n{sleep}\n{clear}\n{print} '1'\n{sleep}\n{clear}\n{print} '¡SORPRESA!'\n```\n"
        name: '{clear}'
